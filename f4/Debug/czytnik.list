
czytnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006e64  08006e64  00016e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08006e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000451c  20000090  08006ef8  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200045ac  08006ef8  000245ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037956  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006dad  00000000  00000000  00057a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00013874  00000000  00000000  0005e7c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001798  00000000  00000000  00072038  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ff8  00000000  00000000  000737d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e285  00000000  00000000  000757c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008c66  00000000  00000000  00083a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0008c6b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ce0  00000000  00000000  0008c730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d14 	.word	0x08006d14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08006d14 	.word	0x08006d14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x30>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800059a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005a2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f82f 	bl	8000610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f005 f9e0 	bl	8005978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f005 f900 	bl	80057bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005bc:	2000      	movs	r0, #0
 80005be:	bd08      	pop	{r3, pc}
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x10>)
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <HAL_IncTick+0x14>)
 80005c8:	6811      	ldr	r1, [r2, #0]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	440b      	add	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20003e08 	.word	0x20003e08
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <HAL_GetTick+0x8>)
 80005de:	6818      	ldr	r0, [r3, #0]
}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20003e08 	.word	0x20003e08

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b538      	push	{r3, r4, r5, lr}
 80005ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005ec:	f7ff fff6 	bl	80005dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005f2:	bf1c      	itt	ne
 80005f4:	4b05      	ldrne	r3, [pc, #20]	; (800060c <HAL_Delay+0x24>)
 80005f6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005f8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005fa:	bf18      	it	ne
 80005fc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005fe:	f7ff ffed 	bl	80005dc <HAL_GetTick>
 8000602:	1b40      	subs	r0, r0, r5
 8000604:	4284      	cmp	r4, r0
 8000606:	d8fa      	bhi.n	80005fe <HAL_Delay+0x16>
  {
  }
}
 8000608:	bd38      	pop	{r3, r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	20000000 	.word	0x20000000

08000610 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000612:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000614:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000618:	041b      	lsls	r3, r3, #16
 800061a:	0c1b      	lsrs	r3, r3, #16
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000620:	0200      	lsls	r0, r0, #8
 8000622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000626:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800062a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800062c:	60d3      	str	r3, [r2, #12]
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000636:	b530      	push	{r4, r5, lr}
 8000638:	68dc      	ldr	r4, [r3, #12]
 800063a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	2b04      	cmp	r3, #4
 8000646:	bf28      	it	cs
 8000648:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	f04f 0501 	mov.w	r5, #1
 8000650:	fa05 f303 	lsl.w	r3, r5, r3
 8000654:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000658:	bf8c      	ite	hi
 800065a:	3c03      	subhi	r4, #3
 800065c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065e:	4019      	ands	r1, r3
 8000660:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000662:	fa05 f404 	lsl.w	r4, r5, r4
 8000666:	3c01      	subs	r4, #1
 8000668:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800066a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	ea42 0201 	orr.w	r2, r2, r1
 8000670:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	bfaf      	iteee	ge
 8000676:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	f000 000f 	andlt.w	r0, r0, #15
 800067e:	4b06      	ldrlt	r3, [pc, #24]	; (8000698 <HAL_NVIC_SetPriority+0x64>)
 8000680:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	bfa5      	ittet	ge
 8000684:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000688:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00
 8000698:	e000ed14 	.word	0xe000ed14

0800069c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800069c:	0942      	lsrs	r2, r0, #5
 800069e:	2301      	movs	r3, #1
 80006a0:	f000 001f 	and.w	r0, r0, #31
 80006a4:	fa03 f000 	lsl.w	r0, r3, r0
 80006a8:	4b01      	ldr	r3, [pc, #4]	; (80006b0 <HAL_NVIC_EnableIRQ+0x14>)
 80006aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b4:	3801      	subs	r0, #1
 80006b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ba:	d20a      	bcs.n	80006d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	21f0      	movs	r1, #240	; 0xf0
 80006c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e010 	.word	0xe000e010
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006e2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006e4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006e6:	bf0c      	ite	eq
 80006e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006ec:	f022 0204 	bicne.w	r2, r2, #4
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	4770      	bx	lr
 80006f4:	e000e010 	.word	0xe000e010

080006f8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80006f8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d003      	beq.n	8000708 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000704:	2001      	movs	r0, #1
 8000706:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000708:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800070a:	2305      	movs	r3, #5
 800070c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000710:	6813      	ldr	r3, [r2, #0]
 8000712:	f023 0301 	bic.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000718:	2000      	movs	r0, #0
}
 800071a:	4770      	bx	lr

0800071c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000720:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000722:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000724:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80008c4 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000728:	4a64      	ldr	r2, [pc, #400]	; (80008bc <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800072c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000730:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000732:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000734:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000738:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 800073c:	42b7      	cmp	r7, r6
 800073e:	f040 80ad 	bne.w	800089c <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000742:	684c      	ldr	r4, [r1, #4]
 8000744:	f024 0a10 	bic.w	sl, r4, #16
 8000748:	f1ba 0f02 	cmp.w	sl, #2
 800074c:	d116      	bne.n	800077c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800074e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000752:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000756:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800075a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800075e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000762:	f04f 0e0f 	mov.w	lr, #15
 8000766:	fa0e fe0b 	lsl.w	lr, lr, fp
 800076a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800076e:	690d      	ldr	r5, [r1, #16]
 8000770:	fa05 f50b 	lsl.w	r5, r5, fp
 8000774:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000778:	f8cc 5020 	str.w	r5, [ip, #32]
 800077c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000780:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000782:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000786:	fa05 f50c 	lsl.w	r5, r5, ip
 800078a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800078c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000790:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000794:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000798:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800079c:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007a0:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a4:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80007a6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007aa:	d815      	bhi.n	80007d8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007ac:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007b0:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007b4:	68cd      	ldr	r5, [r1, #12]
 80007b6:	fa05 fa0c 	lsl.w	sl, r5, ip
 80007ba:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007be:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007c2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007c6:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007ca:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007ce:	fa0e fe03 	lsl.w	lr, lr, r3
 80007d2:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80007d6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007d8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007da:	9d00      	ldr	r5, [sp, #0]
 80007dc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007de:	688f      	ldr	r7, [r1, #8]
 80007e0:	fa07 f70c 	lsl.w	r7, r7, ip
 80007e4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007e6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007e8:	00e5      	lsls	r5, r4, #3
 80007ea:	d557      	bpl.n	800089c <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ec:	f04f 0b00 	mov.w	fp, #0
 80007f0:	f8cd b00c 	str.w	fp, [sp, #12]
 80007f4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f8:	4d31      	ldr	r5, [pc, #196]	; (80008c0 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007fe:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000802:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000806:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800080a:	9703      	str	r7, [sp, #12]
 800080c:	9f03      	ldr	r7, [sp, #12]
 800080e:	f023 0703 	bic.w	r7, r3, #3
 8000812:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000816:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800081a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800081e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000822:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000826:	f04f 0e0f 	mov.w	lr, #15
 800082a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800082e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000830:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000834:	d039      	beq.n	80008aa <HAL_GPIO_Init+0x18e>
 8000836:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800083a:	42a8      	cmp	r0, r5
 800083c:	d037      	beq.n	80008ae <HAL_GPIO_Init+0x192>
 800083e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000842:	42a8      	cmp	r0, r5
 8000844:	d035      	beq.n	80008b2 <HAL_GPIO_Init+0x196>
 8000846:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800084a:	42a8      	cmp	r0, r5
 800084c:	d033      	beq.n	80008b6 <HAL_GPIO_Init+0x19a>
 800084e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000852:	42a8      	cmp	r0, r5
 8000854:	bf14      	ite	ne
 8000856:	2507      	movne	r5, #7
 8000858:	2504      	moveq	r5, #4
 800085a:	fa05 f50c 	lsl.w	r5, r5, ip
 800085e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000862:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000864:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000866:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000868:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800086c:	bf0c      	ite	eq
 800086e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000870:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000872:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000874:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000876:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800087a:	bf0c      	ite	eq
 800087c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800087e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000880:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000882:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000884:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000888:	bf0c      	ite	eq
 800088a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800088c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800088e:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000890:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000892:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000894:	bf54      	ite	pl
 8000896:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000898:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800089a:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800089c:	3301      	adds	r3, #1
 800089e:	2b10      	cmp	r3, #16
 80008a0:	f47f af47 	bne.w	8000732 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008a4:	b005      	add	sp, #20
 80008a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008aa:	465d      	mov	r5, fp
 80008ac:	e7d5      	b.n	800085a <HAL_GPIO_Init+0x13e>
 80008ae:	2501      	movs	r5, #1
 80008b0:	e7d3      	b.n	800085a <HAL_GPIO_Init+0x13e>
 80008b2:	2502      	movs	r5, #2
 80008b4:	e7d1      	b.n	800085a <HAL_GPIO_Init+0x13e>
 80008b6:	2503      	movs	r5, #3
 80008b8:	e7cf      	b.n	800085a <HAL_GPIO_Init+0x13e>
 80008ba:	bf00      	nop
 80008bc:	40013c00 	.word	0x40013c00
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008c8:	b10a      	cbz	r2, 80008ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008ca:	6181      	str	r1, [r0, #24]
 80008cc:	4770      	bx	lr
 80008ce:	0409      	lsls	r1, r1, #16
 80008d0:	e7fb      	b.n	80008ca <HAL_GPIO_WritePin+0x2>

080008d2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80008d2:	6943      	ldr	r3, [r0, #20]
 80008d4:	4059      	eors	r1, r3
 80008d6:	6141      	str	r1, [r0, #20]
 80008d8:	4770      	bx	lr

080008da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80008da:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80008de:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 80008e0:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 80008e4:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 80008e8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80008ec:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 80008f0:	2801      	cmp	r0, #1
 80008f2:	d021      	beq.n	8000938 <HAL_HCD_HC_Init+0x5e>
 80008f4:	2001      	movs	r0, #1
 80008f6:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 80008fa:	2028      	movs	r0, #40	; 0x28
 80008fc:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8000900:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8000904:	09d5      	lsrs	r5, r2, #7
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000906:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 800090a:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800090e:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8000912:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8000916:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 800091a:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 800091e:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  
  status =  USB_HC_Init(hhcd->Instance, 
 8000922:	e88d 40c0 	stmia.w	sp, {r6, r7, lr}
 8000926:	6820      	ldr	r0, [r4, #0]
 8000928:	f001 feee 	bl	8002708 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 800092c:	2300      	movs	r3, #0
 800092e:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 8000932:	b004      	add	sp, #16
 8000934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 8000938:	2002      	movs	r0, #2
 800093a:	e7fa      	b.n	8000932 <HAL_HCD_HC_Init+0x58>

0800093c <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 800093c:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8000940:	2b01      	cmp	r3, #1
{
 8000942:	b510      	push	{r4, lr}
 8000944:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 8000946:	d009      	beq.n	800095c <HAL_HCD_HC_Halt+0x20>
 8000948:	2301      	movs	r3, #1
 800094a:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 800094e:	6800      	ldr	r0, [r0, #0]
 8000950:	f002 f893 	bl	8002a7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000954:	2000      	movs	r0, #0
 8000956:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 800095a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 800095c:	2002      	movs	r0, #2
}
 800095e:	bd10      	pop	{r4, pc}

08000960 <HAL_HCD_Init>:
{ 
 8000960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 8000964:	4607      	mov	r7, r0
{ 
 8000966:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 8000968:	b3a0      	cbz	r0, 80009d4 <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 800096a:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 800096c:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 800096e:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 8000972:	f005 f8eb 	bl	8005b4c <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 8000976:	f854 0b10 	ldr.w	r0, [r4], #16
 800097a:	f001 fd6f 	bl	800245c <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 800097e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000980:	466d      	mov	r5, sp
 8000982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000988:	e894 0003 	ldmia.w	r4, {r0, r1}
 800098c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000990:	f107 0804 	add.w	r8, r7, #4
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000994:	463e      	mov	r6, r7
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000996:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800099a:	6838      	ldr	r0, [r7, #0]
 800099c:	f001 fd1e 	bl	80023dc <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 80009a0:	f856 0b10 	ldr.w	r0, [r6], #16
 80009a4:	2101      	movs	r1, #1
 80009a6:	f001 fd5f 	bl	8002468 <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 80009aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80009ac:	466d      	mov	r5, sp
 80009ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80009b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80009bc:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80009c0:	6838      	ldr	r0, [r7, #0]
 80009c2:	f001 fdcd 	bl	8002560 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 80009c6:	2301      	movs	r3, #1
 80009c8:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  return HAL_OK;
 80009cc:	2000      	movs	r0, #0
}
 80009ce:	b00a      	add	sp, #40	; 0x28
 80009d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80009d4:	2001      	movs	r0, #1
 80009d6:	e7fa      	b.n	80009ce <HAL_HCD_Init+0x6e>

080009d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 80009da:	2628      	movs	r6, #40	; 0x28
 80009dc:	fb06 0601 	mla	r6, r6, r1, r0
{
 80009e0:	f89d e014 	ldrb.w	lr, [sp, #20]
 80009e4:	9d06      	ldr	r5, [sp, #24]
 80009e6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80009ea:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 80009ee:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 80009f2:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 80009f6:	f1be 0f00 	cmp.w	lr, #0
 80009fa:	d10e      	bne.n	8000a1a <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80009fc:	f04f 0e03 	mov.w	lr, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8000a00:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000a02:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 8000a06:	d04a      	beq.n	8000a9e <HAL_HCD_HC_SubmitRequest+0xc6>
 8000a08:	4573      	cmp	r3, lr
 8000a0a:	d055      	beq.n	8000ab8 <HAL_HCD_HC_SubmitRequest+0xe0>
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d12f      	bne.n	8000a70 <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000a10:	2328      	movs	r3, #40	; 0x28
 8000a12:	fb03 0301 	mla	r3, r3, r1, r0
 8000a16:	2200      	movs	r2, #0
 8000a18:	e055      	b.n	8000ac6 <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a1a:	f04f 0c02 	mov.w	ip, #2
 8000a1e:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d824      	bhi.n	8000a70 <HAL_HCD_HC_SubmitRequest+0x98>
 8000a26:	a601      	add	r6, pc, #4	; (adr r6, 8000a2c <HAL_HCD_HC_SubmitRequest+0x54>)
 8000a28:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8000a2c:	08000a3d 	.word	0x08000a3d
 8000a30:	08000a11 	.word	0x08000a11
 8000a34:	08000a9f 	.word	0x08000a9f
 8000a38:	08000ab9 	.word	0x08000ab9
    if((token == 1) && (direction == 0)) /*send data */
 8000a3c:	f1be 0f01 	cmp.w	lr, #1
 8000a40:	d116      	bne.n	8000a70 <HAL_HCD_HC_SubmitRequest+0x98>
 8000a42:	b9aa      	cbnz	r2, 8000a70 <HAL_HCD_HC_SubmitRequest+0x98>
      if (length == 0)
 8000a44:	b924      	cbnz	r4, 8000a50 <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 8000a46:	2328      	movs	r3, #40	; 0x28
 8000a48:	fb03 0301 	mla	r3, r3, r1, r0
 8000a4c:	f883 e051 	strb.w	lr, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0)
 8000a50:	2328      	movs	r3, #40	; 0x28
 8000a52:	fb03 0201 	mla	r2, r3, r1, r0
 8000a56:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 8000a5a:	b9f6      	cbnz	r6, 8000a9a <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a5c:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8000a60:	fb03 0301 	mla	r3, r3, r1, r0
 8000a64:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000a68:	2a02      	cmp	r2, #2
 8000a6a:	d001      	beq.n	8000a70 <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 8000a6c:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000a70:	2628      	movs	r6, #40	; 0x28
 8000a72:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8000a76:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0;
  hhcd->hc[ch_num].ch_num = ch_num;
 8000a78:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000a7c:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000a7e:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000a80:	649c      	str	r4, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8000a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0;
 8000a86:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8000a88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000a8c:	3138      	adds	r1, #56	; 0x38
 8000a8e:	7c02      	ldrb	r2, [r0, #16]
 8000a90:	6800      	ldr	r0, [r0, #0]
}
 8000a92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000a96:	f001 bea3 	b.w	80027e0 <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a9a:	2602      	movs	r6, #2
 8000a9c:	e7de      	b.n	8000a5c <HAL_HCD_HC_SubmitRequest+0x84>
 8000a9e:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000aa0:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8000aa4:	b992      	cbnz	r2, 8000acc <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000aa6:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000aaa:	b91e      	cbnz	r6, 8000ab4 <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8000ab0:	2328      	movs	r3, #40	; 0x28
 8000ab2:	e7d5      	b.n	8000a60 <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	e7f9      	b.n	8000aac <HAL_HCD_HC_SubmitRequest+0xd4>
 8000ab8:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000aba:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8000abe:	b92a      	cbnz	r2, 8000acc <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000ac0:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000ac4:	b936      	cbnz	r6, 8000ad4 <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
 8000aca:	e7d1      	b.n	8000a70 <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8000acc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d0f8      	beq.n	8000ac6 <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	e7f6      	b.n	8000ac6 <HAL_HCD_HC_SubmitRequest+0xee>

08000ad8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000adc:	6806      	ldr	r6, [r0, #0]
{
 8000ade:	b087      	sub	sp, #28
 8000ae0:	4604      	mov	r4, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	f001 fd20 	bl	8002528 <USB_GetMode>
 8000ae8:	2801      	cmp	r0, #1
 8000aea:	f040 80ec 	bne.w	8000cc6 <HAL_HCD_IRQHandler+0x1ee>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8000aee:	6820      	ldr	r0, [r4, #0]
 8000af0:	f001 fd16 	bl	8002520 <USB_ReadInterrupts>
 8000af4:	2800      	cmp	r0, #0
 8000af6:	f000 80e6 	beq.w	8000cc6 <HAL_HCD_IRQHandler+0x1ee>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000afa:	6820      	ldr	r0, [r4, #0]
 8000afc:	f001 fd10 	bl	8002520 <USB_ReadInterrupts>
 8000b00:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b02:	bf48      	it	mi
 8000b04:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b06:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b08:	bf44      	itt	mi
 8000b0a:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8000b0e:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b10:	f001 fd06 	bl	8002520 <USB_ReadInterrupts>
 8000b14:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b16:	bf48      	it	mi
 8000b18:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000b1a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b1c:	bf44      	itt	mi
 8000b1e:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8000b22:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000b24:	f001 fcfc 	bl	8002520 <USB_ReadInterrupts>
 8000b28:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000b2a:	bf48      	it	mi
 8000b2c:	6823      	ldrmi	r3, [r4, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000b2e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000b30:	bf44      	itt	mi
 8000b32:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8000b36:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000b38:	f001 fcf2 	bl	8002520 <USB_ReadInterrupts>
 8000b3c:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000b3e:	bf48      	it	mi
 8000b40:	6823      	ldrmi	r3, [r4, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000b42:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000b44:	bf44      	itt	mi
 8000b46:	2202      	movmi	r2, #2
 8000b48:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000b4a:	f001 fce9 	bl	8002520 <USB_ReadInterrupts>
 8000b4e:	0085      	lsls	r5, r0, #2
 8000b50:	d510      	bpl.n	8000b74 <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000b52:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8000b56:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000b5a:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f005 f82e 	bl	8005bc0 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000b64:	2101      	movs	r1, #1
 8000b66:	6820      	ldr	r0, [r4, #0]
 8000b68:	f001 fd6c 	bl	8002644 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000b6c:	6823      	ldr	r3, [r4, #0]
 8000b6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b72:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000b74:	6820      	ldr	r0, [r4, #0]
 8000b76:	f001 fcd3 	bl	8002520 <USB_ReadInterrupts>
 8000b7a:	01c0      	lsls	r0, r0, #7
 8000b7c:	d540      	bpl.n	8000c00 <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8000b7e:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000b80:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000b84:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8000b86:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000b8a:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000b8c:	9b05      	ldr	r3, [sp, #20]
 8000b8e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000b92:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000b94:	9b04      	ldr	r3, [sp, #16]
 8000b96:	0799      	lsls	r1, r3, #30
 8000b98:	d50d      	bpl.n	8000bb6 <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000b9a:	9b04      	ldr	r3, [sp, #16]
 8000b9c:	07da      	lsls	r2, r3, #31
 8000b9e:	d506      	bpl.n	8000bae <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000ba0:	69ab      	ldr	r3, [r5, #24]
 8000ba2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000ba6:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f005 f805 	bl	8005bb8 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000bae:	9b05      	ldr	r3, [sp, #20]
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000bb6:	9b04      	ldr	r3, [sp, #16]
 8000bb8:	071b      	lsls	r3, r3, #28
 8000bba:	d517      	bpl.n	8000bec <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000bbc:	9b05      	ldr	r3, [sp, #20]
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000bc4:	9b04      	ldr	r3, [sp, #16]
 8000bc6:	075f      	lsls	r7, r3, #29
 8000bc8:	f140 8088 	bpl.w	8000cdc <HAL_HCD_IRQHandler+0x204>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000bcc:	69a1      	ldr	r1, [r4, #24]
 8000bce:	2902      	cmp	r1, #2
 8000bd0:	d17c      	bne.n	8000ccc <HAL_HCD_IRQHandler+0x1f4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8000bd2:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000bd4:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8000bd6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000bda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000bde:	bf18      	it	ne
 8000be0:	2101      	movne	r1, #1
 8000be2:	f001 fd2f 	bl	8002644 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8000be6:	4620      	mov	r0, r4
 8000be8:	f004 ffe6 	bl	8005bb8 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000bec:	9b04      	ldr	r3, [sp, #16]
 8000bee:	0698      	lsls	r0, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000bf0:	bf42      	ittt	mi
 8000bf2:	9b05      	ldrmi	r3, [sp, #20]
 8000bf4:	f043 0320 	orrmi.w	r3, r3, #32
 8000bf8:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000bfa:	9b05      	ldr	r3, [sp, #20]
 8000bfc:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	f001 fc8d 	bl	8002520 <USB_ReadInterrupts>
 8000c06:	0701      	lsls	r1, r0, #28
 8000c08:	d505      	bpl.n	8000c16 <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f004 ffd0 	bl	8005bb0 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	2208      	movs	r2, #8
 8000c14:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000c16:	6820      	ldr	r0, [r4, #0]
 8000c18:	f001 fc82 	bl	8002520 <USB_ReadInterrupts>
 8000c1c:	0182      	lsls	r2, r0, #6
 8000c1e:	d514      	bpl.n	8000c4a <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000c20:	6820      	ldr	r0, [r4, #0]
 8000c22:	f001 ff1b 	bl	8002a5c <USB_HC_ReadInterrupt>
 8000c26:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8000c2a:	9002      	str	r0, [sp, #8]
 8000c2c:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c2e:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1U << i))
 8000c32:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000c36:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000c38:	f04f 0902 	mov.w	r9, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c3c:	68a3      	ldr	r3, [r4, #8]
 8000c3e:	459b      	cmp	fp, r3
 8000c40:	d358      	bcc.n	8000cf4 <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c48:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8000c4a:	6820      	ldr	r0, [r4, #0]
 8000c4c:	f001 fc68 	bl	8002520 <USB_ReadInterrupts>
 8000c50:	06c3      	lsls	r3, r0, #27
 8000c52:	d538      	bpl.n	8000cc6 <HAL_HCD_IRQHandler+0x1ee>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c54:	6825      	ldr	r5, [r4, #0]
 8000c56:	69ab      	ldr	r3, [r5, #24]
 8000c58:	f023 0310 	bic.w	r3, r3, #16
 8000c5c:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 8000c5e:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8000c60:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d129      	bne.n	8000cbc <HAL_HCD_IRQHandler+0x1e4>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000c68:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8000c6c:	f1b8 0f00 	cmp.w	r8, #0
 8000c70:	d024      	beq.n	8000cbc <HAL_HCD_IRQHandler+0x1e4>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8000c72:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8000c76:	2628      	movs	r6, #40	; 0x28
 8000c78:	fb06 4607 	mla	r6, r6, r7, r4
 8000c7c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000c7e:	b1e9      	cbz	r1, 8000cbc <HAL_HCD_IRQHandler+0x1e4>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8000c80:	4642      	mov	r2, r8
 8000c82:	4628      	mov	r0, r5
 8000c84:	f001 fc3e 	bl	8002504 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8000c88:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000c8a:	4443      	add	r3, r8
 8000c8c:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000c8e:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8000c92:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000c94:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8000c98:	4443      	add	r3, r8
 8000c9a:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000c9c:	692a      	ldr	r2, [r5, #16]
 8000c9e:	4bb7      	ldr	r3, [pc, #732]	; (8000f7c <HAL_HCD_IRQHandler+0x4a4>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	b15b      	cbz	r3, 8000cbc <HAL_HCD_IRQHandler+0x1e4>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8000ca4:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000ca6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8000cae:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8000cb0:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000cbc:	6822      	ldr	r2, [r4, #0]
 8000cbe:	6993      	ldr	r3, [r2, #24]
 8000cc0:	f043 0310 	orr.w	r3, r3, #16
 8000cc4:	6193      	str	r3, [r2, #24]
}
 8000cc6:	b007      	add	sp, #28
 8000cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8000ccc:	68e3      	ldr	r3, [r4, #12]
 8000cce:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 8000cd0:	bf04      	itt	eq
 8000cd2:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8000cd6:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8000cda:	e784      	b.n	8000be6 <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000cdc:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8000ce0:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000ce2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000ce6:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8000cea:	6993      	ldr	r3, [r2, #24]
 8000cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	e77b      	b.n	8000bec <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 8000cf4:	9a02      	ldr	r2, [sp, #8]
 8000cf6:	fa0a f30b 	lsl.w	r3, sl, fp
 8000cfa:	4213      	tst	r3, r2
 8000cfc:	f000 8086 	beq.w	8000e0c <HAL_HCD_IRQHandler+0x334>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8000d00:	9b01      	ldr	r3, [sp, #4]
 8000d02:	6820      	ldr	r0, [r4, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000d0a:	fa5f f58b 	uxtb.w	r5, fp
 8000d0e:	f000 810a 	beq.w	8000f26 <HAL_HCD_IRQHandler+0x44e>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8000d12:	016a      	lsls	r2, r5, #5
 8000d14:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
 8000d18:	eb02 0608 	add.w	r6, r2, r8
 8000d1c:	68b1      	ldr	r1, [r6, #8]
 8000d1e:	074b      	lsls	r3, r1, #29
 8000d20:	d513      	bpl.n	8000d4a <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000d22:	2104      	movs	r1, #4
 8000d24:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000d26:	68f1      	ldr	r1, [r6, #12]
 8000d28:	f041 0102 	orr.w	r1, r1, #2
 8000d2c:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8000d2e:	68b1      	ldr	r1, [r6, #8]
 8000d30:	058b      	lsls	r3, r1, #22
 8000d32:	d53d      	bpl.n	8000db0 <HAL_HCD_IRQHandler+0x2d8>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000d34:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000d36:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000d3e:	4629      	mov	r1, r5
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000d40:	f001 fe9b 	bl	8002a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d48:	e12b      	b.n	8000fa2 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8000d4a:	68b1      	ldr	r1, [r6, #8]
 8000d4c:	0689      	lsls	r1, r1, #26
 8000d4e:	d502      	bpl.n	8000d56 <HAL_HCD_IRQHandler+0x27e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000d50:	2120      	movs	r1, #32
 8000d52:	60b1      	str	r1, [r6, #8]
 8000d54:	e7eb      	b.n	8000d2e <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8000d56:	68b1      	ldr	r1, [r6, #8]
 8000d58:	070b      	lsls	r3, r1, #28
 8000d5a:	d513      	bpl.n	8000d84 <HAL_HCD_IRQHandler+0x2ac>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000d5c:	68f1      	ldr	r1, [r6, #12]
 8000d5e:	9203      	str	r2, [sp, #12]
 8000d60:	f041 0102 	orr.w	r1, r1, #2
 8000d64:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8000d66:	fb07 4105 	mla	r1, r7, r5, r4
 8000d6a:	f04f 0e05 	mov.w	lr, #5
 8000d6e:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000d72:	2110      	movs	r1, #16
 8000d74:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8000d76:	2108      	movs	r1, #8
 8000d78:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	f001 fe7d 	bl	8002a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000d80:	9a03      	ldr	r2, [sp, #12]
 8000d82:	e7d4      	b.n	8000d2e <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8000d84:	68b1      	ldr	r1, [r6, #8]
 8000d86:	0549      	lsls	r1, r1, #21
 8000d88:	d5d1      	bpl.n	8000d2e <HAL_HCD_IRQHandler+0x256>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000d8a:	68f1      	ldr	r1, [r6, #12]
 8000d8c:	9203      	str	r2, [sp, #12]
 8000d8e:	f041 0102 	orr.w	r1, r1, #2
 8000d92:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000d94:	4629      	mov	r1, r5
 8000d96:	f001 fe70 	bl	8002a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000d9e:	fb07 4105 	mla	r1, r7, r5, r4
 8000da2:	2008      	movs	r0, #8
 8000da4:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dac:	60b1      	str	r1, [r6, #8]
 8000dae:	e7e7      	b.n	8000d80 <HAL_HCD_IRQHandler+0x2a8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8000db0:	68b1      	ldr	r1, [r6, #8]
 8000db2:	07c8      	lsls	r0, r1, #31
 8000db4:	d540      	bpl.n	8000e38 <HAL_HCD_IRQHandler+0x360>
    if (hhcd->Init.dma_enable)
 8000db6:	6921      	ldr	r1, [r4, #16]
 8000db8:	b149      	cbz	r1, 8000dce <HAL_HCD_IRQHandler+0x2f6>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000dba:	fb07 4e05 	mla	lr, r7, r5, r4
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000dbe:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000dc0:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000dc4:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8000dce:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0U;
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 8000dd6:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000dda:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000dde:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8000de2:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8000de6:	d117      	bne.n	8000e18 <HAL_HCD_IRQHandler+0x340>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000de8:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000dea:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000df2:	4629      	mov	r1, r5
 8000df4:	f001 fe41 	bl	8002a7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000df8:	2310      	movs	r3, #16
 8000dfa:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 8000dfc:	fb07 4505 	mla	r5, r7, r5, r4
 8000e00:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8000e04:	f083 0301 	eor.w	r3, r3, #1
 8000e08:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 8000e0c:	9b01      	ldr	r3, [sp, #4]
 8000e0e:	3320      	adds	r3, #32
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000e10:	f10b 0b01 	add.w	fp, fp, #1
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	e711      	b.n	8000c3c <HAL_HCD_IRQHandler+0x164>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000e18:	2803      	cmp	r0, #3
 8000e1a:	d1ef      	bne.n	8000dfc <HAL_HCD_IRQHandler+0x324>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000e1c:	f852 0008 	ldr.w	r0, [r2, r8]
 8000e20:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8000e24:	f842 0008 	str.w	r0, [r2, r8]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8000e28:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4629      	mov	r1, r5
 8000e30:	4620      	mov	r0, r4
 8000e32:	f004 fec9 	bl	8005bc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000e36:	e7e1      	b.n	8000dfc <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8000e38:	68b1      	ldr	r1, [r6, #8]
 8000e3a:	0789      	lsls	r1, r1, #30
 8000e3c:	d535      	bpl.n	8000eaa <HAL_HCD_IRQHandler+0x3d2>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8000e3e:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000e40:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8000e44:	f021 0102 	bic.w	r1, r1, #2
 8000e48:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000e4a:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8000e4e:	2901      	cmp	r1, #1
 8000e50:	d10c      	bne.n	8000e6c <HAL_HCD_IRQHandler+0x394>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8000e52:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8000e56:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000e5a:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8000e5e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000e62:	4629      	mov	r1, r5
 8000e64:	4620      	mov	r0, r4
 8000e66:	f004 feaf 	bl	8005bc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000e6a:	e7cf      	b.n	8000e0c <HAL_HCD_IRQHandler+0x334>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8000e6c:	2905      	cmp	r1, #5
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_HCD_IRQHandler+0x37a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000e70:	2906      	cmp	r1, #6
 8000e72:	d001      	beq.n	8000e78 <HAL_HCD_IRQHandler+0x3a0>
 8000e74:	2908      	cmp	r1, #8
 8000e76:	d1ee      	bne.n	8000e56 <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8000e78:	fb07 4105 	mla	r1, r7, r5, r4
 8000e7c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8000e7e:	2803      	cmp	r0, #3
 8000e80:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8000e84:	bf88      	it	hi
 8000e86:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8000e88:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].ErrCnt = 0U;
 8000e8a:	bf83      	ittte	hi
 8000e8c:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8000e8e:	2004      	movhi	r0, #4
 8000e90:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8000e94:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8000e98:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000e9c:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000ea0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8000ea4:	f842 1008 	str.w	r1, [r2, r8]
 8000ea8:	e7d5      	b.n	8000e56 <HAL_HCD_IRQHandler+0x37e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8000eaa:	68b1      	ldr	r1, [r6, #8]
 8000eac:	060b      	lsls	r3, r1, #24
 8000eae:	d511      	bpl.n	8000ed4 <HAL_HCD_IRQHandler+0x3fc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000eb0:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8000eb2:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	60f3      	str	r3, [r6, #12]
    hhcd->hc[chnum].ErrCnt++;
 8000eba:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);     
 8000ebe:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt++;
 8000ec0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ec2:	3201      	adds	r2, #1
 8000ec4:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8000ec6:	2206      	movs	r2, #6
 8000ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8000ecc:	f001 fdd5 	bl	8002a7a <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	e066      	b.n	8000fa2 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8000ed4:	68b1      	ldr	r1, [r6, #8]
 8000ed6:	06c8      	lsls	r0, r1, #27
 8000ed8:	d598      	bpl.n	8000e0c <HAL_HCD_IRQHandler+0x334>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000eda:	fb07 4105 	mla	r1, r7, r5, r4
 8000ede:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8000ee2:	2903      	cmp	r1, #3
 8000ee4:	d109      	bne.n	8000efa <HAL_HCD_IRQHandler+0x422>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000ee6:	68f1      	ldr	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8000ee8:	6820      	ldr	r0, [r4, #0]
 8000eea:	9203      	str	r2, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000eec:	f041 0102 	orr.w	r1, r1, #2
 8000ef0:	60f1      	str	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	f001 fdc1 	bl	8002a7a <USB_HC_Halt>
 8000ef8:	9a03      	ldr	r2, [sp, #12]
    hhcd->hc[chnum].state = HC_NAK;
 8000efa:	fb07 4505 	mla	r5, r7, r5, r4
 8000efe:	2103      	movs	r1, #3
 8000f00:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000f04:	2110      	movs	r1, #16
 8000f06:	60b1      	str	r1, [r6, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000f08:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 8000f0c:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8000f10:	f47f af7c 	bne.w	8000e0c <HAL_HCD_IRQHandler+0x334>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8000f14:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000f18:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000f1c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8000f20:	f842 1008 	str.w	r1, [r2, r8]
 8000f24:	e772      	b.n	8000e0c <HAL_HCD_IRQHandler+0x334>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8000f26:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
 8000f2a:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8000f2e:	68b3      	ldr	r3, [r6, #8]
 8000f30:	0759      	lsls	r1, r3, #29
 8000f32:	d506      	bpl.n	8000f42 <HAL_HCD_IRQHandler+0x46a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000f34:	2304      	movs	r3, #4
 8000f36:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000f38:	68f3      	ldr	r3, [r6, #12]
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	60f3      	str	r3, [r6, #12]
 8000f40:	e764      	b.n	8000e0c <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8000f42:	68b3      	ldr	r3, [r6, #8]
 8000f44:	f013 0320 	ands.w	r3, r3, #32
 8000f48:	d01a      	beq.n	8000f80 <HAL_HCD_IRQHandler+0x4a8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8000f4e:	fb07 4305 	mla	r3, r7, r5, r4
 8000f52:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000f56:	2a01      	cmp	r2, #1
 8000f58:	f47f af58 	bne.w	8000e0c <HAL_HCD_IRQHandler+0x334>
      hhcd->hc[chnum].state = HC_NYET;     
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f62:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 8000f64:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f66:	f042 0202 	orr.w	r2, r2, #2
 8000f6a:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	f001 fd84 	bl	8002a7a <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8000f72:	9b03      	ldr	r3, [sp, #12]
 8000f74:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8000f78:	e748      	b.n	8000e0c <HAL_HCD_IRQHandler+0x334>
 8000f7a:	bf00      	nop
 8000f7c:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8000f80:	68b2      	ldr	r2, [r6, #8]
 8000f82:	0652      	lsls	r2, r2, #25
 8000f84:	d50f      	bpl.n	8000fa6 <HAL_HCD_IRQHandler+0x4ce>
    hhcd->hc[chnum].state = HC_NYET;
 8000f86:	fb07 4205 	mla	r2, r7, r5, r4
 8000f8a:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 8000f8c:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f8e:	68f3      	ldr	r3, [r6, #12]
    hhcd->hc[chnum].state = HC_NYET;
 8000f90:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	f001 fd6d 	bl	8002a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8000fa0:	2340      	movs	r3, #64	; 0x40
 8000fa2:	60b3      	str	r3, [r6, #8]
 8000fa4:	e732      	b.n	8000e0c <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8000fa6:	68b2      	ldr	r2, [r6, #8]
 8000fa8:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8000fac:	d005      	beq.n	8000fba <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000fae:	68f3      	ldr	r3, [r6, #12]
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	e6c2      	b.n	8000d40 <HAL_HCD_IRQHandler+0x268>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8000fba:	68b3      	ldr	r3, [r6, #8]
 8000fbc:	07d9      	lsls	r1, r3, #31
 8000fbe:	d510      	bpl.n	8000fe2 <HAL_HCD_IRQHandler+0x50a>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8000fc0:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000fc4:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0U;  
 8000fc6:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000fc8:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 8000fca:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000fcc:	f042 0202 	orr.w	r2, r2, #2
 8000fd0:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000fd2:	f001 fd52 	bl	8002a7a <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8000fd6:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000fd8:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8000fdc:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 8000fe0:	e714      	b.n	8000e0c <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8000fe2:	68b3      	ldr	r3, [r6, #8]
 8000fe4:	071a      	lsls	r2, r3, #28
 8000fe6:	d50e      	bpl.n	8001006 <HAL_HCD_IRQHandler+0x52e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8000fe8:	2308      	movs	r3, #8
 8000fea:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000fec:	68f3      	ldr	r3, [r6, #12]
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	f001 fd40 	bl	8002a7a <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8000ffa:	fb07 4505 	mla	r5, r7, r5, r4
 8000ffe:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001000:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001004:	e702      	b.n	8000e0c <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001006:	68b3      	ldr	r3, [r6, #8]
 8001008:	06db      	lsls	r3, r3, #27
 800100a:	d511      	bpl.n	8001030 <HAL_HCD_IRQHandler+0x558>
    hhcd->hc[chnum].ErrCnt = 0U;  
 800100c:	fb07 4305 	mla	r3, r7, r5, r4
 8001010:	2200      	movs	r2, #0
 8001012:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001014:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001016:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001018:	f042 0202 	orr.w	r2, r2, #2
 800101c:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800101e:	4629      	mov	r1, r5
 8001020:	f001 fd2b 	bl	8002a7a <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001024:	9b03      	ldr	r3, [sp, #12]
 8001026:	2203      	movs	r2, #3
 8001028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800102c:	2310      	movs	r3, #16
 800102e:	e7b8      	b.n	8000fa2 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001030:	68b3      	ldr	r3, [r6, #8]
 8001032:	0619      	lsls	r1, r3, #24
 8001034:	d50c      	bpl.n	8001050 <HAL_HCD_IRQHandler+0x578>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001036:	68f3      	ldr	r3, [r6, #12]
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 800103e:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001040:	fb07 4505 	mla	r5, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001044:	f001 fd19 	bl	8002a7a <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001048:	2306      	movs	r3, #6
 800104a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800104e:	e73f      	b.n	8000ed0 <HAL_HCD_IRQHandler+0x3f8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001050:	68b1      	ldr	r1, [r6, #8]
 8001052:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8001056:	d00f      	beq.n	8001078 <HAL_HCD_IRQHandler+0x5a0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001058:	68f3      	ldr	r3, [r6, #12]
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001060:	4629      	mov	r1, r5
 8001062:	f001 fd0a 	bl	8002a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001066:	2310      	movs	r3, #16
 8001068:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 800106a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106e:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001070:	fb07 4505 	mla	r5, r7, r5, r4
 8001074:	2308      	movs	r3, #8
 8001076:	e7c3      	b.n	8001000 <HAL_HCD_IRQHandler+0x528>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001078:	68b3      	ldr	r3, [r6, #8]
 800107a:	079a      	lsls	r2, r3, #30
 800107c:	f57f aec6 	bpl.w	8000e0c <HAL_HCD_IRQHandler+0x334>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001080:	68f3      	ldr	r3, [r6, #12]
 8001082:	f023 0302 	bic.w	r3, r3, #2
 8001086:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001088:	fb07 4305 	mla	r3, r7, r5, r4
 800108c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001090:	2a01      	cmp	r2, #1
 8001092:	d10d      	bne.n	80010b0 <HAL_HCD_IRQHandler+0x5d8>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8001094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8001098:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800109c:	2a02      	cmp	r2, #2
 800109e:	f47f aeda 	bne.w	8000e56 <HAL_HCD_IRQHandler+0x37e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 80010a2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80010a6:	f082 0201 	eor.w	r2, r2, #1
 80010aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80010ae:	e6d2      	b.n	8000e56 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 80010b0:	2a03      	cmp	r2, #3
 80010b2:	d102      	bne.n	80010ba <HAL_HCD_IRQHandler+0x5e2>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80010b4:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 80010b8:	e6cd      	b.n	8000e56 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 80010ba:	2a04      	cmp	r2, #4
 80010bc:	d104      	bne.n	80010c8 <HAL_HCD_IRQHandler+0x5f0>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80010be:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 80010c2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 80010c6:	e6c6      	b.n	8000e56 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80010c8:	2a05      	cmp	r2, #5
 80010ca:	d102      	bne.n	80010d2 <HAL_HCD_IRQHandler+0x5fa>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80010cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80010d0:	e6c1      	b.n	8000e56 <HAL_HCD_IRQHandler+0x37e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80010d2:	2a06      	cmp	r2, #6
 80010d4:	d002      	beq.n	80010dc <HAL_HCD_IRQHandler+0x604>
 80010d6:	2a08      	cmp	r2, #8
 80010d8:	f47f aebd 	bne.w	8000e56 <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 80010dc:	fb07 4305 	mla	r3, r7, r5, r4
 80010e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010e2:	1c51      	adds	r1, r2, #1
 80010e4:	2a03      	cmp	r2, #3
 80010e6:	6599      	str	r1, [r3, #88]	; 0x58
 80010e8:	d9e4      	bls.n	80010b4 <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].ErrCnt = 0U;
 80010ea:	2200      	movs	r2, #0
 80010ec:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80010ee:	2204      	movs	r2, #4
 80010f0:	e7ec      	b.n	80010cc <HAL_HCD_IRQHandler+0x5f4>
 80010f2:	bf00      	nop

080010f4 <HAL_HCD_Start>:
{ 
 80010f4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 80010f6:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80010fa:	2b01      	cmp	r3, #1
{ 
 80010fc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 80010fe:	d00d      	beq.n	800111c <HAL_HCD_Start+0x28>
 8001100:	2501      	movs	r5, #1
 8001102:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001106:	6800      	ldr	r0, [r0, #0]
 8001108:	f001 f9a2 	bl	8002450 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 800110c:	4629      	mov	r1, r5
 800110e:	6820      	ldr	r0, [r4, #0]
 8001110:	f001 face 	bl	80026b0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001114:	2000      	movs	r0, #0
 8001116:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 800111a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 800111c:	2002      	movs	r0, #2
}
 800111e:	bd38      	pop	{r3, r4, r5, pc}

08001120 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 8001120:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001124:	2b01      	cmp	r3, #1
{ 
 8001126:	b510      	push	{r4, lr}
 8001128:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 800112a:	d009      	beq.n	8001140 <HAL_HCD_Stop+0x20>
 800112c:	2301      	movs	r3, #1
 800112e:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8001132:	6800      	ldr	r0, [r0, #0]
 8001134:	f001 fdc6 	bl	8002cc4 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8001138:	2000      	movs	r0, #0
 800113a:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 800113e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 8001140:	2002      	movs	r0, #2
}
 8001142:	bd10      	pop	{r4, pc}

08001144 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001144:	6800      	ldr	r0, [r0, #0]
 8001146:	f001 ba9a 	b.w	800267e <USB_ResetPort>

0800114a <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800114a:	2328      	movs	r3, #40	; 0x28
 800114c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001150:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8001154:	4770      	bx	lr

08001156 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 8001156:	2328      	movs	r3, #40	; 0x28
 8001158:	fb03 0101 	mla	r1, r3, r1, r0
}
 800115c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800115e:	4770      	bx	lr

08001160 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001160:	6800      	ldr	r0, [r0, #0]
 8001162:	f001 bacc 	b.w	80026fe <USB_GetCurrentFrame>

08001166 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001166:	6800      	ldr	r0, [r0, #0]
 8001168:	f001 bac0 	b.w	80026ec <USB_GetHostSpeed>

0800116c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800116c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800116e:	4604      	mov	r4, r0
 8001170:	2800      	cmp	r0, #0
 8001172:	d062      	beq.n	800123a <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001174:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001178:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800117c:	b91b      	cbnz	r3, 8001186 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800117e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001182:	f004 fb63 	bl	800584c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001186:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001188:	4e2d      	ldr	r6, [pc, #180]	; (8001240 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 800118a:	4d2e      	ldr	r5, [pc, #184]	; (8001244 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 800118c:	2324      	movs	r3, #36	; 0x24
 800118e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001192:	6813      	ldr	r3, [r2, #0]
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800119a:	f000 fceb 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800119e:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80011a0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80011a2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80011a6:	42b3      	cmp	r3, r6
 80011a8:	bf84      	itt	hi
 80011aa:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80011ae:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80011b0:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80011b2:	bf91      	iteee	ls
 80011b4:	1c69      	addls	r1, r5, #1
 80011b6:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80011ba:	fbb1 f1f5 	udivhi	r1, r1, r5
 80011be:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80011c0:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80011c2:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80011c4:	d821      	bhi.n	800120a <HAL_I2C_Init+0x9e>
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80011cc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	bf98      	it	ls
 80011d4:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011d6:	6a21      	ldr	r1, [r4, #32]
 80011d8:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80011da:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011dc:	430b      	orrs	r3, r1
 80011de:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80011e0:	68e1      	ldr	r1, [r4, #12]
 80011e2:	6923      	ldr	r3, [r4, #16]
 80011e4:	430b      	orrs	r3, r1
 80011e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80011e8:	69a1      	ldr	r1, [r4, #24]
 80011ea:	6963      	ldr	r3, [r4, #20]
 80011ec:	430b      	orrs	r3, r1
 80011ee:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011f0:	6813      	ldr	r3, [r2, #0]
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80011fa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011fc:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001202:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001204:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001208:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800120a:	68a1      	ldr	r1, [r4, #8]
 800120c:	b949      	cbnz	r1, 8001222 <HAL_I2C_Init+0xb6>
 800120e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001212:	fbb0 f0f3 	udiv	r0, r0, r3
 8001216:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800121a:	b163      	cbz	r3, 8001236 <HAL_I2C_Init+0xca>
 800121c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001220:	e7d9      	b.n	80011d6 <HAL_I2C_Init+0x6a>
 8001222:	2119      	movs	r1, #25
 8001224:	434b      	muls	r3, r1
 8001226:	fbb0 f0f3 	udiv	r0, r0, r3
 800122a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800122e:	b113      	cbz	r3, 8001236 <HAL_I2C_Init+0xca>
 8001230:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001234:	e7cf      	b.n	80011d6 <HAL_I2C_Init+0x6a>
 8001236:	2001      	movs	r0, #1
 8001238:	e7cd      	b.n	80011d6 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 800123a:	2001      	movs	r0, #1
}
 800123c:	bd70      	pop	{r4, r5, r6, pc}
 800123e:	bf00      	nop
 8001240:	000186a0 	.word	0x000186a0
 8001244:	000f4240 	.word	0x000f4240

08001248 <HAL_I2S_TxCpltCallback>:
 8001248:	4770      	bx	lr

0800124a <HAL_I2S_RxCpltCallback>:
 800124a:	4770      	bx	lr

0800124c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
 __weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800124c:	4770      	bx	lr
	...

08001250 <HAL_I2S_Init>:
{
 8001250:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 8001252:	4604      	mov	r4, r0
 8001254:	2800      	cmp	r0, #0
 8001256:	d03f      	beq.n	80012d8 <HAL_I2S_Init+0x88>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001258:	2502      	movs	r5, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_I2S_Init+0x110>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 800125c:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001260:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8001262:	f004 fb1d 	bl	80058a0 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001266:	6822      	ldr	r2, [r4, #0]
 8001268:	69d3      	ldr	r3, [r2, #28]
 800126a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800126e:	f023 030f 	bic.w	r3, r3, #15
 8001272:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001274:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001276:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001278:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 800127a:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800127c:	d035      	beq.n	80012ea <HAL_I2S_Init+0x9a>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800127e:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
 8001280:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001282:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8001284:	bf14      	ite	ne
 8001286:	2620      	movne	r6, #32
 8001288:	2610      	moveq	r6, #16
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800128a:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800128c:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 800128e:	bf98      	it	ls
 8001290:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001292:	f000 fd4d 	bl	8001d30 <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001296:	6923      	ldr	r3, [r4, #16]
 8001298:	6961      	ldr	r1, [r4, #20]
 800129a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800129e:	d11f      	bne.n	80012e0 <HAL_I2S_Init+0x90>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80012a0:	68e3      	ldr	r3, [r4, #12]
 80012a2:	220a      	movs	r2, #10
 80012a4:	b1d3      	cbz	r3, 80012dc <HAL_I2S_Init+0x8c>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 80012a6:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 80012a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ac:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 80012ae:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 80012b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b4:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80012b6:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 80012ba:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 80012be:	0212      	lsls	r2, r2, #8
 80012c0:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80012c4:	1e99      	subs	r1, r3, #2
 80012c6:	29fd      	cmp	r1, #253	; 0xfd
 80012c8:	d911      	bls.n	80012ee <HAL_I2S_Init+0x9e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80012ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff ffba 	bl	800124c <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 80012d8:	2001      	movs	r0, #1
}
 80012da:	bd70      	pop	{r4, r5, r6, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 80012dc:	00f3      	lsls	r3, r6, #3
 80012de:	e7e3      	b.n	80012a8 <HAL_I2S_Init+0x58>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 80012e0:	230a      	movs	r3, #10
 80012e2:	fbb0 f0f6 	udiv	r0, r0, r6
 80012e6:	4343      	muls	r3, r0
 80012e8:	e7e1      	b.n	80012ae <HAL_I2S_Init+0x5e>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 80012ea:	2200      	movs	r2, #0
 80012ec:	e7ea      	b.n	80012c4 <HAL_I2S_Init+0x74>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80012ee:	4313      	orrs	r3, r2
 80012f0:	6922      	ldr	r2, [r4, #16]
 80012f2:	6820      	ldr	r0, [r4, #0]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 80012f4:	6866      	ldr	r6, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80012f6:	4313      	orrs	r3, r2
 80012f8:	6203      	str	r3, [r0, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80012fa:	68e2      	ldr	r2, [r4, #12]
 80012fc:	68a3      	ldr	r3, [r4, #8]
 80012fe:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 8001300:	69a2      	ldr	r2, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001302:	4313      	orrs	r3, r2
 8001304:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8001306:	f446 6100 	orr.w	r1, r6, #2048	; 0x800
 800130a:	4319      	orrs	r1, r3
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800130c:	6a22      	ldr	r2, [r4, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 800130e:	b289      	uxth	r1, r1
 8001310:	430d      	orrs	r5, r1
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001312:	2a01      	cmp	r2, #1
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8001314:	61c5      	str	r5, [r0, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001316:	d11c      	bne.n	8001352 <HAL_I2S_Init+0x102>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_I2S_Init+0x114>)
 800131a:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800131c:	4912      	ldr	r1, [pc, #72]	; (8001368 <HAL_I2S_Init+0x118>)
 800131e:	4a13      	ldr	r2, [pc, #76]	; (800136c <HAL_I2S_Init+0x11c>)
 8001320:	4288      	cmp	r0, r1
 8001322:	bf18      	it	ne
 8001324:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8001328:	f436 7000 	bics.w	r0, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800132c:	69d1      	ldr	r1, [r2, #28]
 800132e:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 8001332:	f021 010f 	bic.w	r1, r1, #15
 8001336:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001338:	f04f 0102 	mov.w	r1, #2
 800133c:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800133e:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_TX;
 8001340:	bf0c      	ite	eq
 8001342:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8001346:	2000      	movne	r0, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800134c:	4303      	orrs	r3, r0
 800134e:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 8001350:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001352:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001354:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001356:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001358:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 800135c:	bd70      	pop	{r4, r5, r6, pc}
 800135e:	bf00      	nop
 8001360:	08001371 	.word	0x08001371
 8001364:	0800147d 	.word	0x0800147d
 8001368:	40003800 	.word	0x40003800
 800136c:	40003400 	.word	0x40003400

08001370 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001372:	6803      	ldr	r3, [r0, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001378:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800137c:	2a04      	cmp	r2, #4
{
 800137e:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001380:	d13a      	bne.n	80013f8 <I2S_IRQHandler+0x88>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001382:	9a01      	ldr	r2, [sp, #4]
 8001384:	07d1      	lsls	r1, r2, #31
 8001386:	d519      	bpl.n	80013bc <I2S_IRQHandler+0x4c>
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	0652      	lsls	r2, r2, #25
 800138c:	d516      	bpl.n	80013bc <I2S_IRQHandler+0x4c>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800138e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001390:	1c91      	adds	r1, r2, #2
 8001392:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001394:	68d9      	ldr	r1, [r3, #12]
 8001396:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001398:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800139a:	3a01      	subs	r2, #1
 800139c:	b292      	uxth	r2, r2
 800139e:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 80013a0:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80013a2:	b292      	uxth	r2, r2
 80013a4:	b952      	cbnz	r2, 80013bc <I2S_IRQHandler+0x4c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013ac:	0412      	lsls	r2, r2, #16
 80013ae:	0c12      	lsrs	r2, r2, #16
 80013b0:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80013b8:	f7ff ff47 	bl	800124a <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80013bc:	9b01      	ldr	r3, [sp, #4]
 80013be:	0659      	lsls	r1, r3, #25
 80013c0:	d51a      	bpl.n	80013f8 <I2S_IRQHandler+0x88>
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	0692      	lsls	r2, r2, #26
 80013c8:	d516      	bpl.n	80013f8 <I2S_IRQHandler+0x88>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013d0:	0412      	lsls	r2, r2, #16
 80013d2:	0c12      	lsrs	r2, r2, #16
 80013d4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80013d6:	2200      	movs	r2, #0
 80013d8:	9202      	str	r2, [sp, #8]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	9202      	str	r2, [sp, #8]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 80013ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80013f2:	4620      	mov	r0, r4
 80013f4:	f7ff ff2a 	bl	800124c <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80013f8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d13a      	bne.n	8001476 <I2S_IRQHandler+0x106>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001400:	9b01      	ldr	r3, [sp, #4]
 8001402:	079b      	lsls	r3, r3, #30
 8001404:	d51b      	bpl.n	800143e <I2S_IRQHandler+0xce>
 8001406:	6822      	ldr	r2, [r4, #0]
 8001408:	6853      	ldr	r3, [r2, #4]
 800140a:	0618      	lsls	r0, r3, #24
 800140c:	d517      	bpl.n	800143e <I2S_IRQHandler+0xce>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800140e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001410:	1c99      	adds	r1, r3, #2
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	6261      	str	r1, [r4, #36]	; 0x24
 8001416:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001418:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800141a:	3b01      	subs	r3, #1
 800141c:	b29b      	uxth	r3, r3
 800141e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 8001420:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001422:	b29b      	uxth	r3, r3
 8001424:	b95b      	cbnz	r3, 800143e <I2S_IRQHandler+0xce>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001426:	6853      	ldr	r3, [r2, #4]
 8001428:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800142c:	041b      	lsls	r3, r3, #16
 800142e:	0c1b      	lsrs	r3, r3, #16
 8001430:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001432:	2301      	movs	r3, #1
 8001434:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff ff05 	bl	8001248 <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800143e:	9b01      	ldr	r3, [sp, #4]
 8001440:	0719      	lsls	r1, r3, #28
 8001442:	d518      	bpl.n	8001476 <I2S_IRQHandler+0x106>
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	0692      	lsls	r2, r2, #26
 800144a:	d514      	bpl.n	8001476 <I2S_IRQHandler+0x106>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001452:	0412      	lsls	r2, r2, #16
 8001454:	0c12      	lsrs	r2, r2, #16
 8001456:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001458:	2200      	movs	r2, #0
 800145a:	9203      	str	r2, [sp, #12]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	9303      	str	r3, [sp, #12]
 8001460:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001462:	2301      	movs	r3, #1
 8001464:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001468:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff feeb 	bl	800124c <HAL_I2S_ErrorCallback>
    }
  }
}
 8001476:	b004      	add	sp, #16
 8001478:	bd10      	pop	{r4, pc}

0800147a <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800147a:	4770      	bx	lr

0800147c <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 800147c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 800147e:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001480:	4992      	ldr	r1, [pc, #584]	; (80016cc <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001486:	4a92      	ldr	r2, [pc, #584]	; (80016d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001488:	428b      	cmp	r3, r1
 800148a:	bf18      	it	ne
 800148c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 8001490:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001492:	6891      	ldr	r1, [r2, #8]
 8001494:	9101      	str	r1, [sp, #4]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8001496:	69d9      	ldr	r1, [r3, #28]
 8001498:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800149c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80014a0:	d004      	beq.n	80014ac <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80014a2:	69d9      	ldr	r1, [r3, #28]
 80014a4:	f411 7f40 	tst.w	r1, #768	; 0x300
 80014a8:	f040 8097 	bne.w	80015da <HAL_I2SEx_FullDuplex_IRQHandler+0x15e>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80014ac:	9a00      	ldr	r2, [sp, #0]
 80014ae:	0792      	lsls	r2, r2, #30
 80014b0:	d51d      	bpl.n	80014ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	0610      	lsls	r0, r2, #24
 80014b6:	d51a      	bpl.n	80014ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80014b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014ba:	1c91      	adds	r1, r2, #2
 80014bc:	8812      	ldrh	r2, [r2, #0]
 80014be:	6261      	str	r1, [r4, #36]	; 0x24
 80014c0:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 80014c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014c4:	3a01      	subs	r2, #1
 80014c6:	b292      	uxth	r2, r2
 80014c8:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 80014ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014cc:	b292      	uxth	r2, r2
 80014ce:	b972      	cbnz	r2, 80014ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80014d6:	0412      	lsls	r2, r2, #16
 80014d8:	0c12      	lsrs	r2, r2, #16
 80014da:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 80014dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b92b      	cbnz	r3, 80014ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80014e8:	4620      	mov	r0, r4
 80014ea:	f7ff ffc6 	bl	800147a <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	07d9      	lsls	r1, r3, #31
 80014f2:	d522      	bpl.n	800153a <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 80014f4:	4a75      	ldr	r2, [pc, #468]	; (80016cc <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 80014f6:	6821      	ldr	r1, [r4, #0]
 80014f8:	4b75      	ldr	r3, [pc, #468]	; (80016d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80014fa:	4291      	cmp	r1, r2
 80014fc:	bf18      	it	ne
 80014fe:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	0652      	lsls	r2, r2, #25
 8001506:	d518      	bpl.n	800153a <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001508:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800150a:	1c91      	adds	r1, r2, #2
 800150c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800150e:	68d9      	ldr	r1, [r3, #12]
 8001510:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 8001512:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001514:	3a01      	subs	r2, #1
 8001516:	b292      	uxth	r2, r2
 8001518:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 800151a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800151c:	b292      	uxth	r2, r2
 800151e:	b962      	cbnz	r2, 800153a <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001526:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 8001528:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	b92b      	cbnz	r3, 800153a <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800152e:	2301      	movs	r3, #1
 8001530:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff ffa0 	bl	800147a <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800153a:	9b01      	ldr	r3, [sp, #4]
 800153c:	0658      	lsls	r0, r3, #25
 800153e:	d524      	bpl.n	800158a <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 8001540:	4962      	ldr	r1, [pc, #392]	; (80016cc <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	4a62      	ldr	r2, [pc, #392]	; (80016d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001546:	428b      	cmp	r3, r1
 8001548:	bf18      	it	ne
 800154a:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800154e:	6851      	ldr	r1, [r2, #4]
 8001550:	0689      	lsls	r1, r1, #26
 8001552:	d51a      	bpl.n	800158a <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001554:	6851      	ldr	r1, [r2, #4]
 8001556:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800155a:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001562:	0412      	lsls	r2, r2, #16
 8001564:	0c12      	lsrs	r2, r2, #16
 8001566:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001568:	2200      	movs	r2, #0
 800156a:	9202      	str	r2, [sp, #8]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	9202      	str	r2, [sp, #8]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001576:	2301      	movs	r3, #1
 8001578:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 800157c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff fe61 	bl	800124c <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800158a:	9b00      	ldr	r3, [sp, #0]
 800158c:	071b      	lsls	r3, r3, #28
 800158e:	d522      	bpl.n	80015d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	0690      	lsls	r0, r2, #26
 8001596:	d51e      	bpl.n	80015d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001598:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800159a:	494c      	ldr	r1, [pc, #304]	; (80016cc <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800159c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015a0:	0412      	lsls	r2, r2, #16
 80015a2:	0c12      	lsrs	r2, r2, #16
 80015a4:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015a6:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80015a8:	428b      	cmp	r3, r1
 80015aa:	bf18      	it	ne
 80015ac:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80015b0:	6851      	ldr	r1, [r2, #4]
 80015b2:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80015b6:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80015b8:	2200      	movs	r2, #0
 80015ba:	9203      	str	r2, [sp, #12]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	9303      	str	r3, [sp, #12]
 80015c0:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 80015c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff fe3b 	bl	800124c <HAL_I2S_ErrorCallback>
}
 80015d6:	b004      	add	sp, #16
 80015d8:	bd10      	pop	{r4, pc}
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80015da:	9b01      	ldr	r3, [sp, #4]
 80015dc:	0799      	lsls	r1, r3, #30
 80015de:	d51a      	bpl.n	8001616 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 80015e0:	6853      	ldr	r3, [r2, #4]
 80015e2:	061b      	lsls	r3, r3, #24
 80015e4:	d517      	bpl.n	8001616 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80015e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015e8:	1c99      	adds	r1, r3, #2
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	6241      	str	r1, [r0, #36]	; 0x24
 80015ee:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 80015f0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 80015f8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b95b      	cbnz	r3, 8001616 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015fe:	6853      	ldr	r3, [r2, #4]
 8001600:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001604:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 8001606:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001608:	b29b      	uxth	r3, r3
 800160a:	b923      	cbnz	r3, 8001616 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
        hi2s->State = HAL_I2S_STATE_READY;
 800160c:	2301      	movs	r3, #1
 800160e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001612:	f7ff ff32 	bl	800147a <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001616:	9b00      	ldr	r3, [sp, #0]
 8001618:	07d8      	lsls	r0, r3, #31
 800161a:	d51e      	bpl.n	800165a <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	6853      	ldr	r3, [r2, #4]
 8001620:	0659      	lsls	r1, r3, #25
 8001622:	d51a      	bpl.n	800165a <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001626:	1c99      	adds	r1, r3, #2
 8001628:	62e1      	str	r1, [r4, #44]	; 0x2c
 800162a:	68d1      	ldr	r1, [r2, #12]
 800162c:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 800162e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001630:	3b01      	subs	r3, #1
 8001632:	b29b      	uxth	r3, r3
 8001634:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 8001636:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001638:	b29b      	uxth	r3, r3
 800163a:	b973      	cbnz	r3, 800165a <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800163c:	6853      	ldr	r3, [r2, #4]
 800163e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001642:	041b      	lsls	r3, r3, #16
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 8001648:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800164a:	b29b      	uxth	r3, r3
 800164c:	b92b      	cbnz	r3, 800165a <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
        hi2s->State = HAL_I2S_STATE_READY;
 800164e:	2301      	movs	r3, #1
 8001650:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff ff10 	bl	800147a <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800165a:	9b00      	ldr	r3, [sp, #0]
 800165c:	065a      	lsls	r2, r3, #25
 800165e:	d51d      	bpl.n	800169c <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
 8001660:	6822      	ldr	r2, [r4, #0]
 8001662:	6853      	ldr	r3, [r2, #4]
 8001664:	069b      	lsls	r3, r3, #26
 8001666:	d519      	bpl.n	800169c <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001668:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800166a:	4918      	ldr	r1, [pc, #96]	; (80016cc <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800166c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001678:	428a      	cmp	r2, r1
 800167a:	bf18      	it	ne
 800167c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001680:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001688:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800168a:	2301      	movs	r3, #1
 800168c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001690:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001698:	f7ff fdd8 	bl	800124c <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800169c:	9b01      	ldr	r3, [sp, #4]
 800169e:	0718      	lsls	r0, r3, #28
 80016a0:	d599      	bpl.n	80015d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80016a2:	490a      	ldr	r1, [pc, #40]	; (80016cc <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80016a8:	428a      	cmp	r2, r1
 80016aa:	bf18      	it	ne
 80016ac:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80016b0:	6859      	ldr	r1, [r3, #4]
 80016b2:	0689      	lsls	r1, r1, #26
 80016b4:	d58f      	bpl.n	80015d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80016bc:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80016be:	6853      	ldr	r3, [r2, #4]
 80016c0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	0c1b      	lsrs	r3, r3, #16
 80016c8:	6053      	str	r3, [r2, #4]
 80016ca:	e77a      	b.n	80015c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80016cc:	40003800 	.word	0x40003800
 80016d0:	40003400 	.word	0x40003400

080016d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	4604      	mov	r4, r0
 80016da:	b918      	cbnz	r0, 80016e4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80016dc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80016de:	b002      	add	sp, #8
 80016e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e4:	6803      	ldr	r3, [r0, #0]
 80016e6:	07dd      	lsls	r5, r3, #31
 80016e8:	d410      	bmi.n	800170c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	0798      	lsls	r0, r3, #30
 80016ee:	d458      	bmi.n	80017a2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	071a      	lsls	r2, r3, #28
 80016f4:	f100 809a 	bmi.w	800182c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	075b      	lsls	r3, r3, #29
 80016fc:	f100 80b8 	bmi.w	8001870 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001700:	69a2      	ldr	r2, [r4, #24]
 8001702:	2a00      	cmp	r2, #0
 8001704:	f040 8119 	bne.w	800193a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001708:	2000      	movs	r0, #0
 800170a:	e7e8      	b.n	80016de <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800170c:	4ba6      	ldr	r3, [pc, #664]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	f002 020c 	and.w	r2, r2, #12
 8001714:	2a04      	cmp	r2, #4
 8001716:	d007      	beq.n	8001728 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800171e:	2a08      	cmp	r2, #8
 8001720:	d10a      	bne.n	8001738 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	0259      	lsls	r1, r3, #9
 8001726:	d507      	bpl.n	8001738 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	4b9f      	ldr	r3, [pc, #636]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	039a      	lsls	r2, r3, #14
 800172e:	d5dc      	bpl.n	80016ea <HAL_RCC_OscConfig+0x16>
 8001730:	6863      	ldr	r3, [r4, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1d9      	bne.n	80016ea <HAL_RCC_OscConfig+0x16>
 8001736:	e7d1      	b.n	80016dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001738:	6863      	ldr	r3, [r4, #4]
 800173a:	4d9b      	ldr	r5, [pc, #620]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d111      	bne.n	8001766 <HAL_RCC_OscConfig+0x92>
 8001742:	682b      	ldr	r3, [r5, #0]
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800174a:	f7fe ff47 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4d96      	ldr	r5, [pc, #600]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001750:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	039b      	lsls	r3, r3, #14
 8001756:	d4c8      	bmi.n	80016ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001758:	f7fe ff40 	bl	80005dc <HAL_GetTick>
 800175c:	1b80      	subs	r0, r0, r6
 800175e:	2864      	cmp	r0, #100	; 0x64
 8001760:	d9f7      	bls.n	8001752 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001762:	2003      	movs	r0, #3
 8001764:	e7bb      	b.n	80016de <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176a:	d104      	bne.n	8001776 <HAL_RCC_OscConfig+0xa2>
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001772:	602b      	str	r3, [r5, #0]
 8001774:	e7e5      	b.n	8001742 <HAL_RCC_OscConfig+0x6e>
 8001776:	682a      	ldr	r2, [r5, #0]
 8001778:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800177c:	602a      	str	r2, [r5, #0]
 800177e:	682a      	ldr	r2, [r5, #0]
 8001780:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001784:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1df      	bne.n	800174a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800178a:	f7fe ff27 	bl	80005dc <HAL_GetTick>
 800178e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	039f      	lsls	r7, r3, #14
 8001794:	d5a9      	bpl.n	80016ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001796:	f7fe ff21 	bl	80005dc <HAL_GetTick>
 800179a:	1b80      	subs	r0, r0, r6
 800179c:	2864      	cmp	r0, #100	; 0x64
 800179e:	d9f7      	bls.n	8001790 <HAL_RCC_OscConfig+0xbc>
 80017a0:	e7df      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017a2:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	f012 0f0c 	tst.w	r2, #12
 80017aa:	d007      	beq.n	80017bc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017b2:	2a08      	cmp	r2, #8
 80017b4:	d111      	bne.n	80017da <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	025e      	lsls	r6, r3, #9
 80017ba:	d40e      	bmi.n	80017da <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017bc:	4b7a      	ldr	r3, [pc, #488]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	0795      	lsls	r5, r2, #30
 80017c2:	d502      	bpl.n	80017ca <HAL_RCC_OscConfig+0xf6>
 80017c4:	68e2      	ldr	r2, [r4, #12]
 80017c6:	2a01      	cmp	r2, #1
 80017c8:	d188      	bne.n	80016dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	6921      	ldr	r1, [r4, #16]
 80017ce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017d2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80017d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d8:	e78a      	b.n	80016f0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017da:	68e2      	ldr	r2, [r4, #12]
 80017dc:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x2d8>)
 80017de:	b1b2      	cbz	r2, 800180e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017e4:	f7fe fefa 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e8:	4d6f      	ldr	r5, [pc, #444]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	682b      	ldr	r3, [r5, #0]
 80017ee:	0798      	lsls	r0, r3, #30
 80017f0:	d507      	bpl.n	8001802 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	682b      	ldr	r3, [r5, #0]
 80017f4:	6922      	ldr	r2, [r4, #16]
 80017f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017fe:	602b      	str	r3, [r5, #0]
 8001800:	e776      	b.n	80016f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001802:	f7fe feeb 	bl	80005dc <HAL_GetTick>
 8001806:	1b80      	subs	r0, r0, r6
 8001808:	2802      	cmp	r0, #2
 800180a:	d9ef      	bls.n	80017ec <HAL_RCC_OscConfig+0x118>
 800180c:	e7a9      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800180e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001810:	f7fe fee4 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001814:	4d64      	ldr	r5, [pc, #400]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001816:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	0799      	lsls	r1, r3, #30
 800181c:	f57f af68 	bpl.w	80016f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001820:	f7fe fedc 	bl	80005dc <HAL_GetTick>
 8001824:	1b80      	subs	r0, r0, r6
 8001826:	2802      	cmp	r0, #2
 8001828:	d9f6      	bls.n	8001818 <HAL_RCC_OscConfig+0x144>
 800182a:	e79a      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800182c:	6962      	ldr	r2, [r4, #20]
 800182e:	4b60      	ldr	r3, [pc, #384]	; (80019b0 <HAL_RCC_OscConfig+0x2dc>)
 8001830:	b17a      	cbz	r2, 8001852 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001836:	f7fe fed1 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	4d5b      	ldr	r5, [pc, #364]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800183c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001840:	079f      	lsls	r7, r3, #30
 8001842:	f53f af59 	bmi.w	80016f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001846:	f7fe fec9 	bl	80005dc <HAL_GetTick>
 800184a:	1b80      	subs	r0, r0, r6
 800184c:	2802      	cmp	r0, #2
 800184e:	d9f6      	bls.n	800183e <HAL_RCC_OscConfig+0x16a>
 8001850:	e787      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001852:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001854:	f7fe fec2 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	4d53      	ldr	r5, [pc, #332]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800185a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800185e:	0798      	lsls	r0, r3, #30
 8001860:	f57f af4a 	bpl.w	80016f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001864:	f7fe feba 	bl	80005dc <HAL_GetTick>
 8001868:	1b80      	subs	r0, r0, r6
 800186a:	2802      	cmp	r0, #2
 800186c:	d9f6      	bls.n	800185c <HAL_RCC_OscConfig+0x188>
 800186e:	e778      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001870:	4b4d      	ldr	r3, [pc, #308]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
 8001872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001874:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001878:	d128      	bne.n	80018cc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	9201      	str	r2, [sp, #4]
 800187c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800188e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	4d48      	ldr	r5, [pc, #288]	; (80019b4 <HAL_RCC_OscConfig+0x2e0>)
 8001892:	682b      	ldr	r3, [r5, #0]
 8001894:	05d9      	lsls	r1, r3, #23
 8001896:	d51b      	bpl.n	80018d0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001898:	68a3      	ldr	r3, [r4, #8]
 800189a:	4d43      	ldr	r5, [pc, #268]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
 800189c:	2b01      	cmp	r3, #1
 800189e:	d127      	bne.n	80018f0 <HAL_RCC_OscConfig+0x21c>
 80018a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018a8:	f7fe fe98 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	4d3e      	ldr	r5, [pc, #248]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80018ae:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018b6:	079b      	lsls	r3, r3, #30
 80018b8:	d539      	bpl.n	800192e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80018ba:	2e00      	cmp	r6, #0
 80018bc:	f43f af20 	beq.w	8001700 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c0:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
 80018c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	e719      	b.n	8001700 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80018cc:	2600      	movs	r6, #0
 80018ce:	e7df      	b.n	8001890 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018d8:	f7fe fe80 	bl	80005dc <HAL_GetTick>
 80018dc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	682b      	ldr	r3, [r5, #0]
 80018e0:	05da      	lsls	r2, r3, #23
 80018e2:	d4d9      	bmi.n	8001898 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e4:	f7fe fe7a 	bl	80005dc <HAL_GetTick>
 80018e8:	1bc0      	subs	r0, r0, r7
 80018ea:	2802      	cmp	r0, #2
 80018ec:	d9f7      	bls.n	80018de <HAL_RCC_OscConfig+0x20a>
 80018ee:	e738      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d104      	bne.n	80018fe <HAL_RCC_OscConfig+0x22a>
 80018f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	672b      	str	r3, [r5, #112]	; 0x70
 80018fc:	e7d0      	b.n	80018a0 <HAL_RCC_OscConfig+0x1cc>
 80018fe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	672a      	str	r2, [r5, #112]	; 0x70
 8001906:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001908:	f022 0204 	bic.w	r2, r2, #4
 800190c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ca      	bne.n	80018a8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001912:	f7fe fe63 	bl	80005dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800191a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800191e:	0798      	lsls	r0, r3, #30
 8001920:	d5cb      	bpl.n	80018ba <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7fe fe5b 	bl	80005dc <HAL_GetTick>
 8001926:	1bc0      	subs	r0, r0, r7
 8001928:	4540      	cmp	r0, r8
 800192a:	d9f7      	bls.n	800191c <HAL_RCC_OscConfig+0x248>
 800192c:	e719      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7fe fe55 	bl	80005dc <HAL_GetTick>
 8001932:	1bc0      	subs	r0, r0, r7
 8001934:	4540      	cmp	r0, r8
 8001936:	d9bd      	bls.n	80018b4 <HAL_RCC_OscConfig+0x1e0>
 8001938:	e713      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800193a:	4d1b      	ldr	r5, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
 800193c:	68ab      	ldr	r3, [r5, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	f43f aeca 	beq.w	80016dc <HAL_RCC_OscConfig+0x8>
 8001948:	4e1b      	ldr	r6, [pc, #108]	; (80019b8 <HAL_RCC_OscConfig+0x2e4>)
 800194a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800194e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001950:	d134      	bne.n	80019bc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001952:	f7fe fe43 	bl	80005dc <HAL_GetTick>
 8001956:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	0199      	lsls	r1, r3, #6
 800195c:	d41e      	bmi.n	800199c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800195e:	6a22      	ldr	r2, [r4, #32]
 8001960:	69e3      	ldr	r3, [r4, #28]
 8001962:	4313      	orrs	r3, r2
 8001964:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001966:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800196a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800196c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001970:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4c0d      	ldr	r4, [pc, #52]	; (80019a8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001974:	0852      	lsrs	r2, r2, #1
 8001976:	3a01      	subs	r2, #1
 8001978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800197c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800197e:	2301      	movs	r3, #1
 8001980:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001982:	f7fe fe2b 	bl	80005dc <HAL_GetTick>
 8001986:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	019a      	lsls	r2, r3, #6
 800198c:	f53f aebc 	bmi.w	8001708 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7fe fe24 	bl	80005dc <HAL_GetTick>
 8001994:	1b40      	subs	r0, r0, r5
 8001996:	2802      	cmp	r0, #2
 8001998:	d9f6      	bls.n	8001988 <HAL_RCC_OscConfig+0x2b4>
 800199a:	e6e2      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199c:	f7fe fe1e 	bl	80005dc <HAL_GetTick>
 80019a0:	1bc0      	subs	r0, r0, r7
 80019a2:	2802      	cmp	r0, #2
 80019a4:	d9d8      	bls.n	8001958 <HAL_RCC_OscConfig+0x284>
 80019a6:	e6dc      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	42470000 	.word	0x42470000
 80019b0:	42470e80 	.word	0x42470e80
 80019b4:	40007000 	.word	0x40007000
 80019b8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80019bc:	f7fe fe0e 	bl	80005dc <HAL_GetTick>
 80019c0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	682b      	ldr	r3, [r5, #0]
 80019c4:	019b      	lsls	r3, r3, #6
 80019c6:	f57f ae9f 	bpl.w	8001708 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ca:	f7fe fe07 	bl	80005dc <HAL_GetTick>
 80019ce:	1b00      	subs	r0, r0, r4
 80019d0:	2802      	cmp	r0, #2
 80019d2:	d9f6      	bls.n	80019c2 <HAL_RCC_OscConfig+0x2ee>
 80019d4:	e6c5      	b.n	8001762 <HAL_RCC_OscConfig+0x8e>
 80019d6:	bf00      	nop

080019d8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d8:	4913      	ldr	r1, [pc, #76]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80019da:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019dc:	688b      	ldr	r3, [r1, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x16>
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d003      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ea:	4810      	ldr	r0, [pc, #64]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019ec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80019ee:	4810      	ldr	r0, [pc, #64]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x58>)
 80019f0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fc:	bf14      	ite	ne
 80019fe:	480c      	ldrne	r0, [pc, #48]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a00:	480a      	ldreq	r0, [pc, #40]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001a06:	bf18      	it	ne
 8001a08:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0e:	fba1 0100 	umull	r0, r1, r1, r0
 8001a12:	f7fe fc35 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x50>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001a1e:	3301      	adds	r3, #1
 8001a20:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001a22:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a26:	bd08      	pop	{r3, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	00f42400 	.word	0x00f42400
 8001a30:	007a1200 	.word	0x007a1200

08001a34 <HAL_RCC_ClockConfig>:
{
 8001a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a38:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	b910      	cbnz	r0, 8001a44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
 8001a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <HAL_RCC_ClockConfig+0x124>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	f002 020f 	and.w	r2, r2, #15
 8001a4c:	428a      	cmp	r2, r1
 8001a4e:	d328      	bcc.n	8001aa2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	6821      	ldr	r1, [r4, #0]
 8001a52:	078f      	lsls	r7, r1, #30
 8001a54:	d42d      	bmi.n	8001ab2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	07c8      	lsls	r0, r1, #31
 8001a58:	d440      	bmi.n	8001adc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_RCC_ClockConfig+0x124>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	f002 020f 	and.w	r2, r2, #15
 8001a62:	4295      	cmp	r5, r2
 8001a64:	d366      	bcc.n	8001b34 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a66:	6822      	ldr	r2, [r4, #0]
 8001a68:	0751      	lsls	r1, r2, #29
 8001a6a:	d46c      	bmi.n	8001b46 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	0713      	lsls	r3, r2, #28
 8001a6e:	d507      	bpl.n	8001a80 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a70:	4a3a      	ldr	r2, [pc, #232]	; (8001b5c <HAL_RCC_ClockConfig+0x128>)
 8001a72:	6921      	ldr	r1, [r4, #16]
 8001a74:	6893      	ldr	r3, [r2, #8]
 8001a76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a80:	f7ff ffaa 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_RCC_ClockConfig+0x128>)
 8001a86:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <HAL_RCC_ClockConfig+0x12c>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	40d8      	lsrs	r0, r3
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <HAL_RCC_ClockConfig+0x130>)
 8001a94:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f003 ff6e 	bl	8005978 <HAL_InitTick>
  return HAL_OK;
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	4299      	cmp	r1, r3
 8001aae:	d1c6      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xa>
 8001ab0:	e7ce      	b.n	8001a50 <HAL_RCC_ClockConfig+0x1c>
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab8:	bf1e      	ittt	ne
 8001aba:	689a      	ldrne	r2, [r3, #8]
 8001abc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001ac0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac4:	bf42      	ittt	mi
 8001ac6:	689a      	ldrmi	r2, [r3, #8]
 8001ac8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001acc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	68a0      	ldr	r0, [r4, #8]
 8001ad2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ad6:	4302      	orrs	r2, r0
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	e7bc      	b.n	8001a56 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001adc:	6862      	ldr	r2, [r4, #4]
 8001ade:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <HAL_RCC_ClockConfig+0x128>)
 8001ae0:	2a01      	cmp	r2, #1
 8001ae2:	d11d      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	d0a8      	beq.n	8001a3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aec:	4e1b      	ldr	r6, [pc, #108]	; (8001b5c <HAL_RCC_ClockConfig+0x128>)
 8001aee:	68b3      	ldr	r3, [r6, #8]
 8001af0:	f023 0303 	bic.w	r3, r3, #3
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001af8:	f7fe fd70 	bl	80005dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b00:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	68b3      	ldr	r3, [r6, #8]
 8001b04:	6862      	ldr	r2, [r4, #4]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b0e:	d0a4      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7fe fd64 	bl	80005dc <HAL_GetTick>
 8001b14:	1bc0      	subs	r0, r0, r7
 8001b16:	4540      	cmp	r0, r8
 8001b18:	d9f3      	bls.n	8001b02 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001b1a:	2003      	movs	r0, #3
}
 8001b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b20:	1e91      	subs	r1, r2, #2
 8001b22:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b24:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b26:	d802      	bhi.n	8001b2e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b2c:	e7dd      	b.n	8001aea <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	f013 0f02 	tst.w	r3, #2
 8001b32:	e7da      	b.n	8001aea <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b34:	b2ea      	uxtb	r2, r5
 8001b36:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	429d      	cmp	r5, r3
 8001b40:	f47f af7d 	bne.w	8001a3e <HAL_RCC_ClockConfig+0xa>
 8001b44:	e78f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b46:	4905      	ldr	r1, [pc, #20]	; (8001b5c <HAL_RCC_ClockConfig+0x128>)
 8001b48:	68e0      	ldr	r0, [r4, #12]
 8001b4a:	688b      	ldr	r3, [r1, #8]
 8001b4c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b50:	4303      	orrs	r3, r0
 8001b52:	608b      	str	r3, [r1, #8]
 8001b54:	e78a      	b.n	8001a6c <HAL_RCC_ClockConfig+0x38>
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	08006d8d 	.word	0x08006d8d
 8001b64:	20000028 	.word	0x20000028

08001b68 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b68:	4b01      	ldr	r3, [pc, #4]	; (8001b70 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000028 	.word	0x20000028

08001b74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b82:	6810      	ldr	r0, [r2, #0]
}
 8001b84:	40d8      	lsrs	r0, r3
 8001b86:	4770      	bx	lr
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08006d9d 	.word	0x08006d9d
 8001b90:	20000028 	.word	0x20000028

08001b94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	4a03      	ldr	r2, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ba2:	6810      	ldr	r0, [r2, #0]
}
 8001ba4:	40d8      	lsrs	r0, r3
 8001ba6:	4770      	bx	lr
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	08006d9d 	.word	0x08006d9d
 8001bb0:	20000028 	.word	0x20000028

08001bb4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_GetClockConfig+0x34>)
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	f002 0203 	and.w	r2, r2, #3
 8001bc0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001bc8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001bd0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001bda:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_RCC_GetClockConfig+0x38>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	600b      	str	r3, [r1, #0]
 8001be6:	4770      	bx	lr
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bf0:	6803      	ldr	r3, [r0, #0]
 8001bf2:	f013 0f05 	tst.w	r3, #5
{
 8001bf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bf8:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bfa:	d13c      	bne.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	079a      	lsls	r2, r3, #30
 8001c00:	d530      	bpl.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	4b45      	ldr	r3, [pc, #276]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x12c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c08:	4d45      	ldr	r5, [pc, #276]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c24:	f7fe fcda 	bl	80005dc <HAL_GetTick>
 8001c28:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c2a:	682b      	ldr	r3, [r5, #0]
 8001c2c:	05d9      	lsls	r1, r3, #23
 8001c2e:	d54c      	bpl.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0xda>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c30:	4d3a      	ldr	r5, [pc, #232]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001c32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c34:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c38:	d14d      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c3a:	6923      	ldr	r3, [r4, #16]
 8001c3c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c40:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c44:	4a35      	ldr	r2, [pc, #212]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001c46:	d165      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8001c48:	6891      	ldr	r1, [r2, #8]
 8001c4a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001c4e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c52:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001c56:	4301      	orrs	r1, r0
 8001c58:	6091      	str	r1, [r2, #8]
 8001c5a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6713      	str	r3, [r2, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c64:	6820      	ldr	r0, [r4, #0]
 8001c66:	f010 0008 	ands.w	r0, r0, #8
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c6a:	bf1f      	itttt	ne
 8001c6c:	4b2d      	ldrne	r3, [pc, #180]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c6e:	7d22      	ldrbne	r2, [r4, #20]
 8001c70:	601a      	strne	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001c72:	2000      	movne	r0, #0
 8001c74:	e027      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_PLLI2S_DISABLE();
 8001c76:	4e2c      	ldr	r6, [pc, #176]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c78:	4d28      	ldr	r5, [pc, #160]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001c7e:	f7fe fcad 	bl	80005dc <HAL_GetTick>
 8001c82:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c84:	682b      	ldr	r3, [r5, #0]
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	d417      	bmi.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c8a:	68e3      	ldr	r3, [r4, #12]
 8001c8c:	68a2      	ldr	r2, [r4, #8]
 8001c8e:	071b      	lsls	r3, r3, #28
 8001c90:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c94:	6862      	ldr	r2, [r4, #4]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001ca0:	f7fe fc9c 	bl	80005dc <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ca4:	4d1d      	ldr	r5, [pc, #116]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    tickstart = HAL_GetTick();
 8001ca6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	0118      	lsls	r0, r3, #4
 8001cac:	d4a6      	bmi.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cae:	f7fe fc95 	bl	80005dc <HAL_GetTick>
 8001cb2:	1b80      	subs	r0, r0, r6
 8001cb4:	2802      	cmp	r0, #2
 8001cb6:	d9f7      	bls.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8001cb8:	e004      	b.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cba:	f7fe fc8f 	bl	80005dc <HAL_GetTick>
 8001cbe:	1bc0      	subs	r0, r0, r7
 8001cc0:	2802      	cmp	r0, #2
 8001cc2:	d9df      	bls.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x94>
        return HAL_TIMEOUT;
 8001cc4:	2003      	movs	r0, #3
}
 8001cc6:	b003      	add	sp, #12
 8001cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7fe fc87 	bl	80005dc <HAL_GetTick>
 8001cce:	1b80      	subs	r0, r0, r6
 8001cd0:	2802      	cmp	r0, #2
 8001cd2:	d9aa      	bls.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8001cd4:	e7f6      	b.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cd6:	6922      	ldr	r2, [r4, #16]
 8001cd8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d0ac      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ce0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cec:	2100      	movs	r1, #0
 8001cee:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001cf0:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cf2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cf4:	07da      	lsls	r2, r3, #31
 8001cf6:	d5a0      	bpl.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8001cf8:	f7fe fc70 	bl	80005dc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001d00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d02:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d04:	079b      	lsls	r3, r3, #30
 8001d06:	d498      	bmi.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7fe fc68 	bl	80005dc <HAL_GetTick>
 8001d0c:	1b80      	subs	r0, r0, r6
 8001d0e:	42b8      	cmp	r0, r7
 8001d10:	d9f7      	bls.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d12:	e7d7      	b.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d14:	6891      	ldr	r1, [r2, #8]
 8001d16:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001d1a:	e79d      	b.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40007000 	.word	0x40007000
 8001d24:	424711e0 	.word	0x424711e0
 8001d28:	42470068 	.word	0x42470068
 8001d2c:	42470e40 	.word	0x42470e40

08001d30 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8001d30:	2801      	cmp	r0, #1
 8001d32:	d121      	bne.n	8001d78 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8001d36:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8001d38:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8001d3c:	d004      	beq.n	8001d48 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8001d3e:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8001d40:	480f      	ldr	r0, [pc, #60]	; (8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8001d42:	bf18      	it	ne
 8001d44:	2000      	movne	r0, #0
 8001d46:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d48:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001d4a:	490c      	ldr	r1, [pc, #48]	; (8001d7c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8001d4c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d50:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001d52:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8001d56:	bf4c      	ite	mi
 8001d58:	4b0a      	ldrmi	r3, [pc, #40]	; (8001d84 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8001d5a:	4b0b      	ldrpl	r3, [pc, #44]	; (8001d88 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8001d5c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8001d60:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001d64:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001d68:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8001d6c:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001d6e:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8001d72:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8001d76:	4770      	bx	lr
  uint32_t frequency = 0U;
 8001d78:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8001d7a:	4770      	bx	lr
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	00bb8000 	.word	0x00bb8000
 8001d84:	007a1200 	.word	0x007a1200
 8001d88:	00f42400 	.word	0x00f42400

08001d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d90:	9e06      	ldr	r6, [sp, #24]
 8001d92:	4604      	mov	r4, r0
 8001d94:	4688      	mov	r8, r1
 8001d96:	4617      	mov	r7, r2
 8001d98:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001d9a:	6822      	ldr	r2, [r4, #0]
 8001d9c:	6893      	ldr	r3, [r2, #8]
 8001d9e:	ea38 0303 	bics.w	r3, r8, r3
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	429f      	cmp	r7, r3
 8001daa:	d102      	bne.n	8001db2 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001dac:	2000      	movs	r0, #0
}
 8001dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001db2:	1c6b      	adds	r3, r5, #1
 8001db4:	d0f2      	beq.n	8001d9c <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001db6:	bb55      	cbnz	r5, 8001e0e <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001dc0:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dc2:	6862      	ldr	r2, [r4, #4]
 8001dc4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001dc8:	d10a      	bne.n	8001de0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001dca:	68a2      	ldr	r2, [r4, #8]
 8001dcc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001dd0:	d002      	beq.n	8001dd8 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001dd2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001dd6:	d103      	bne.n	8001de0 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dde:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001de0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001de2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001de6:	d109      	bne.n	8001dfc <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dee:	0412      	lsls	r2, r2, #16
 8001df0:	0c12      	lsrs	r2, r2, #16
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dfa:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001e02:	2300      	movs	r3, #0
 8001e04:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001e08:	2003      	movs	r0, #3
 8001e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001e0e:	f7fe fbe5 	bl	80005dc <HAL_GetTick>
 8001e12:	1b80      	subs	r0, r0, r6
 8001e14:	4285      	cmp	r5, r0
 8001e16:	d8c0      	bhi.n	8001d9a <SPI_WaitFlagStateUntilTimeout+0xe>
 8001e18:	e7ce      	b.n	8001db8 <SPI_WaitFlagStateUntilTimeout+0x2c>

08001e1a <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e1a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	9200      	str	r2, [sp, #0]
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	2200      	movs	r2, #0
{
 8001e24:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e26:	f7ff ffb1 	bl	8001d8c <SPI_WaitFlagStateUntilTimeout>
 8001e2a:	b120      	cbz	r0, 8001e36 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e2e:	f043 0320 	orr.w	r3, r3, #32
 8001e32:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001e34:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001e36:	b002      	add	sp, #8
 8001e38:	bd10      	pop	{r4, pc}

08001e3a <HAL_SPI_Init>:
{
 8001e3a:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d036      	beq.n	8001eb0 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8001e46:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001e4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e4e:	b91b      	cbnz	r3, 8001e58 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001e50:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001e54:	f003 fd62 	bl	800591c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001e58:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e5a:	68a0      	ldr	r0, [r4, #8]
 8001e5c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001e64:	680b      	ldr	r3, [r1, #0]
 8001e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e6a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e6c:	6863      	ldr	r3, [r4, #4]
 8001e6e:	4303      	orrs	r3, r0
 8001e70:	68e0      	ldr	r0, [r4, #12]
 8001e72:	4303      	orrs	r3, r0
 8001e74:	6920      	ldr	r0, [r4, #16]
 8001e76:	4303      	orrs	r3, r0
 8001e78:	6960      	ldr	r0, [r4, #20]
 8001e7a:	4303      	orrs	r3, r0
 8001e7c:	69e0      	ldr	r0, [r4, #28]
 8001e7e:	4303      	orrs	r3, r0
 8001e80:	6a20      	ldr	r0, [r4, #32]
 8001e82:	4303      	orrs	r3, r0
 8001e84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e86:	4303      	orrs	r3, r0
 8001e88:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001e8c:	4303      	orrs	r3, r0
 8001e8e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e90:	0c12      	lsrs	r2, r2, #16
 8001e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e94:	f002 0204 	and.w	r2, r2, #4
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e9c:	69cb      	ldr	r3, [r1, #28]
 8001e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ea2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ea4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001ea6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ea8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001eaa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001eae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001eb0:	2001      	movs	r0, #1
}
 8001eb2:	bd10      	pop	{r4, pc}

08001eb4 <HAL_SPI_TransmitReceive>:
{
 8001eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eb8:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001eba:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001ebe:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001ec0:	2b01      	cmp	r3, #1
{
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	460d      	mov	r5, r1
 8001ec6:	4616      	mov	r6, r2
 8001ec8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001eca:	f000 80ed 	beq.w	80020a8 <HAL_SPI_TransmitReceive+0x1f4>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001ed4:	f7fe fb82 	bl	80005dc <HAL_GetTick>
  tmp  = hspi->State;
 8001ed8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8001edc:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001ede:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001ee0:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001ee2:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001ee4:	d00a      	beq.n	8001efc <HAL_SPI_TransmitReceive+0x48>
 8001ee6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001eea:	f040 80db 	bne.w	80020a4 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001eee:	68a2      	ldr	r2, [r4, #8]
 8001ef0:	2a00      	cmp	r2, #0
 8001ef2:	f040 80d7 	bne.w	80020a4 <HAL_SPI_TransmitReceive+0x1f0>
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	f040 80d4 	bne.w	80020a4 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001efc:	2d00      	cmp	r5, #0
 8001efe:	d04e      	beq.n	8001f9e <HAL_SPI_TransmitReceive+0xea>
 8001f00:	2e00      	cmp	r6, #0
 8001f02:	d04c      	beq.n	8001f9e <HAL_SPI_TransmitReceive+0xea>
 8001f04:	f1b9 0f00 	cmp.w	r9, #0
 8001f08:	d049      	beq.n	8001f9e <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001f0a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f0e:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001f10:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f12:	bf04      	itt	eq
 8001f14:	2305      	moveq	r3, #5
 8001f16:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001f1e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f20:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f22:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001f24:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001f28:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f2c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001f2e:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f32:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001f34:	bf58      	it	pl
 8001f36:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f38:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001f3a:	bf58      	it	pl
 8001f3c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001f40:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001f44:	bf58      	it	pl
 8001f46:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f48:	68e2      	ldr	r2, [r4, #12]
 8001f4a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001f4e:	d15d      	bne.n	800200c <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001f50:	b119      	cbz	r1, 8001f5a <HAL_SPI_TransmitReceive+0xa6>
 8001f52:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001f54:	b292      	uxth	r2, r2
 8001f56:	2a01      	cmp	r2, #1
 8001f58:	d106      	bne.n	8001f68 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001f5a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001f5e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001f68:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	b9bb      	cbnz	r3, 8001fa2 <HAL_SPI_TransmitReceive+0xee>
 8001f72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b9a3      	cbnz	r3, 8001fa2 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001f78:	f8cd 8000 	str.w	r8, [sp]
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2102      	movs	r1, #2
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff ff02 	bl	8001d8c <SPI_WaitFlagStateUntilTimeout>
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d135      	bne.n	8001ff8 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001f8c:	4642      	mov	r2, r8
 8001f8e:	4639      	mov	r1, r7
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7ff ff42 	bl	8001e1a <SPI_CheckFlag_BSY>
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d079      	beq.n	800208e <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	e02b      	b.n	8001ffa <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001fa2:	f1b9 0f00 	cmp.w	r9, #0
 8001fa6:	d00f      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x114>
 8001fa8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	b163      	cbz	r3, 8001fc8 <HAL_SPI_TransmitReceive+0x114>
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	0791      	lsls	r1, r2, #30
 8001fb4:	d508      	bpl.n	8001fc8 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001fb6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001fba:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001fbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001fc4:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001fc8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	b163      	cbz	r3, 8001fe8 <HAL_SPI_TransmitReceive+0x134>
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	07d2      	lsls	r2, r2, #31
 8001fd4:	d508      	bpl.n	8001fe8 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001fdc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001fe4:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001fe8:	1c78      	adds	r0, r7, #1
 8001fea:	d0bf      	beq.n	8001f6c <HAL_SPI_TransmitReceive+0xb8>
 8001fec:	f7fe faf6 	bl	80005dc <HAL_GetTick>
 8001ff0:	eba0 0008 	sub.w	r0, r0, r8
 8001ff4:	4287      	cmp	r7, r0
 8001ff6:	d8b9      	bhi.n	8001f6c <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8001ff8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002000:	2300      	movs	r3, #0
 8002002:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002006:	b005      	add	sp, #20
 8002008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800200c:	b119      	cbz	r1, 8002016 <HAL_SPI_TransmitReceive+0x162>
 800200e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002010:	b292      	uxth	r2, r2
 8002012:	2a01      	cmp	r2, #1
 8002014:	d106      	bne.n	8002024 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002016:	f815 2b01 	ldrb.w	r2, [r5], #1
 800201a:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800201c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800201e:	3b01      	subs	r3, #1
 8002020:	b29b      	uxth	r3, r3
 8002022:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002024:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002028:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800202a:	b29b      	uxth	r3, r3
 800202c:	b91b      	cbnz	r3, 8002036 <HAL_SPI_TransmitReceive+0x182>
 800202e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0a0      	beq.n	8001f78 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002036:	f1b9 0f00 	cmp.w	r9, #0
 800203a:	d00f      	beq.n	800205c <HAL_SPI_TransmitReceive+0x1a8>
 800203c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800203e:	b29b      	uxth	r3, r3
 8002040:	b163      	cbz	r3, 800205c <HAL_SPI_TransmitReceive+0x1a8>
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	0791      	lsls	r1, r2, #30
 8002048:	d508      	bpl.n	800205c <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800204a:	782a      	ldrb	r2, [r5, #0]
 800204c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800204e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002050:	3b01      	subs	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002056:	3501      	adds	r5, #1
        txallowed = 0U;
 8002058:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800205c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800205e:	b29b      	uxth	r3, r3
 8002060:	b163      	cbz	r3, 800207c <HAL_SPI_TransmitReceive+0x1c8>
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	07d2      	lsls	r2, r2, #31
 8002068:	d508      	bpl.n	800207c <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 800206e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002070:	3b01      	subs	r3, #1
 8002072:	b29b      	uxth	r3, r3
 8002074:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002076:	3601      	adds	r6, #1
        txallowed = 1U;
 8002078:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800207c:	1c7b      	adds	r3, r7, #1
 800207e:	d0d3      	beq.n	8002028 <HAL_SPI_TransmitReceive+0x174>
 8002080:	f7fe faac 	bl	80005dc <HAL_GetTick>
 8002084:	eba0 0008 	sub.w	r0, r0, r8
 8002088:	4287      	cmp	r7, r0
 800208a:	d8cd      	bhi.n	8002028 <HAL_SPI_TransmitReceive+0x174>
 800208c:	e7b4      	b.n	8001ff8 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800208e:	68a3      	ldr	r3, [r4, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1b2      	bne.n	8001ffa <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	9003      	str	r0, [sp, #12]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	9203      	str	r2, [sp, #12]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	9303      	str	r3, [sp, #12]
 80020a0:	9b03      	ldr	r3, [sp, #12]
 80020a2:	e7aa      	b.n	8001ffa <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 80020a4:	2002      	movs	r0, #2
 80020a6:	e7a8      	b.n	8001ffa <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 80020a8:	2002      	movs	r0, #2
 80020aa:	e7ac      	b.n	8002006 <HAL_SPI_TransmitReceive+0x152>

080020ac <HAL_SPI_ErrorCallback>:
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 80020b0:	6803      	ldr	r3, [r0, #0]
{
 80020b2:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80020b4:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80020b6:	689a      	ldr	r2, [r3, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80020b8:	f002 0541 	and.w	r5, r2, #65	; 0x41
 80020bc:	2d01      	cmp	r5, #1
{
 80020be:	b085      	sub	sp, #20
 80020c0:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80020c2:	d105      	bne.n	80020d0 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80020c4:	064d      	lsls	r5, r1, #25
 80020c6:	d503      	bpl.n	80020d0 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 80020c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 80020ca:	4798      	blx	r3
}
 80020cc:	b005      	add	sp, #20
 80020ce:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80020d0:	0795      	lsls	r5, r2, #30
 80020d2:	d504      	bpl.n	80020de <HAL_SPI_IRQHandler+0x2e>
 80020d4:	0608      	lsls	r0, r1, #24
 80020d6:	d502      	bpl.n	80020de <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 80020d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020da:	4620      	mov	r0, r4
 80020dc:	e7f5      	b.n	80020ca <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80020de:	f412 7fb0 	tst.w	r2, #352	; 0x160
 80020e2:	d0f3      	beq.n	80020cc <HAL_SPI_IRQHandler+0x1c>
 80020e4:	068d      	lsls	r5, r1, #26
 80020e6:	d5f1      	bpl.n	80020cc <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 80020e8:	0650      	lsls	r0, r2, #25
 80020ea:	d50f      	bpl.n	800210c <HAL_SPI_IRQHandler+0x5c>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 80020ec:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80020f0:	2803      	cmp	r0, #3
 80020f2:	f04f 0500 	mov.w	r5, #0
 80020f6:	d041      	beq.n	800217c <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80020f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020fa:	f040 0004 	orr.w	r0, r0, #4
 80020fe:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002100:	9500      	str	r5, [sp, #0]
 8002102:	68d8      	ldr	r0, [r3, #12]
 8002104:	9000      	str	r0, [sp, #0]
 8002106:	6898      	ldr	r0, [r3, #8]
 8002108:	9000      	str	r0, [sp, #0]
 800210a:	9800      	ldr	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 800210c:	0695      	lsls	r5, r2, #26
 800210e:	d50c      	bpl.n	800212a <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002110:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002112:	f040 0001 	orr.w	r0, r0, #1
 8002116:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002118:	2000      	movs	r0, #0
 800211a:	9002      	str	r0, [sp, #8]
 800211c:	6898      	ldr	r0, [r3, #8]
 800211e:	9002      	str	r0, [sp, #8]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002126:	6018      	str	r0, [r3, #0]
 8002128:	9802      	ldr	r0, [sp, #8]
    if((itflag & SPI_FLAG_FRE) != RESET)
 800212a:	05d0      	lsls	r0, r2, #23
 800212c:	d508      	bpl.n	8002140 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800212e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002130:	f042 0208 	orr.w	r2, r2, #8
 8002134:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002136:	2200      	movs	r2, #0
 8002138:	9203      	str	r2, [sp, #12]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	9203      	str	r2, [sp, #12]
 800213e:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002140:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002142:	2a00      	cmp	r2, #0
 8002144:	d0c2      	beq.n	80020cc <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800214c:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800214e:	2201      	movs	r2, #1
 8002150:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002154:	078a      	lsls	r2, r1, #30
 8002156:	d018      	beq.n	800218a <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002158:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 800215a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800215c:	f022 0203 	bic.w	r2, r2, #3
 8002160:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8002162:	b118      	cbz	r0, 800216c <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_SPI_IRQHandler+0xe4>)
 8002166:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002168:	f7fe fac6 	bl	80006f8 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 800216c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800216e:	2800      	cmp	r0, #0
 8002170:	d0ac      	beq.n	80020cc <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_SPI_IRQHandler+0xe4>)
 8002174:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002176:	f7fe fabf 	bl	80006f8 <HAL_DMA_Abort_IT>
 800217a:	e7a7      	b.n	80020cc <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800217c:	9501      	str	r5, [sp, #4]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	9201      	str	r2, [sp, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	9b01      	ldr	r3, [sp, #4]
        return;
 8002188:	e7a0      	b.n	80020cc <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff ff8e 	bl	80020ac <HAL_SPI_ErrorCallback>
 8002190:	e79c      	b.n	80020cc <HAL_SPI_IRQHandler+0x1c>
 8002192:	bf00      	nop
 8002194:	08002199 	.word	0x08002199

08002198 <SPI_DMAAbortOnError>:
{
 8002198:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800219a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80021a0:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80021a2:	f7ff ff83 	bl	80020ac <HAL_SPI_ErrorCallback>
 80021a6:	bd08      	pop	{r3, pc}

080021a8 <HAL_TIM_Base_MspInit>:
 80021a8:	4770      	bx	lr

080021aa <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021aa:	6803      	ldr	r3, [r0, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80021bc:	2000      	movs	r0, #0
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_OC_DelayElapsedCallback>:
 80021c0:	4770      	bx	lr

080021c2 <HAL_TIM_IC_CaptureCallback>:
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80021c4:	4770      	bx	lr

080021c6 <HAL_TIM_TriggerCallback>:
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021c8:	6803      	ldr	r3, [r0, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	0791      	lsls	r1, r2, #30
{
 80021ce:	b510      	push	{r4, lr}
 80021d0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d2:	d50e      	bpl.n	80021f2 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	0792      	lsls	r2, r2, #30
 80021d8:	d50b      	bpl.n	80021f2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021da:	f06f 0202 	mvn.w	r2, #2
 80021de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021e0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021e2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021e4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021e6:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021e8:	d077      	beq.n	80022da <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	f7ff ffea 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	2300      	movs	r3, #0
 80021f0:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	0750      	lsls	r0, r2, #29
 80021f8:	d510      	bpl.n	800221c <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	0751      	lsls	r1, r2, #29
 80021fe:	d50d      	bpl.n	800221c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002200:	f06f 0204 	mvn.w	r2, #4
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002206:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002208:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800220a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800220e:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002210:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002212:	d068      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002214:	f7ff ffd5 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002218:	2300      	movs	r3, #0
 800221a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	0712      	lsls	r2, r2, #28
 8002222:	d50f      	bpl.n	8002244 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	0710      	lsls	r0, r2, #28
 8002228:	d50c      	bpl.n	8002244 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800222a:	f06f 0208 	mvn.w	r2, #8
 800222e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002230:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002232:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002234:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002236:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002238:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800223a:	d05a      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800223c:	f7ff ffc1 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002240:	2300      	movs	r3, #0
 8002242:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	06d2      	lsls	r2, r2, #27
 800224a:	d510      	bpl.n	800226e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	06d0      	lsls	r0, r2, #27
 8002250:	d50d      	bpl.n	800226e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002252:	f06f 0210 	mvn.w	r2, #16
 8002256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002258:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800225c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002260:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002264:	d04b      	beq.n	80022fe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	f7ff ffac 	bl	80021c2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	2300      	movs	r3, #0
 800226c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	07d1      	lsls	r1, r2, #31
 8002274:	d508      	bpl.n	8002288 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	07d2      	lsls	r2, r2, #31
 800227a:	d505      	bpl.n	8002288 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800227c:	f06f 0201 	mvn.w	r2, #1
 8002280:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002282:	4620      	mov	r0, r4
 8002284:	f003 f918 	bl	80054b8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	0610      	lsls	r0, r2, #24
 800228e:	d508      	bpl.n	80022a2 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	0611      	lsls	r1, r2, #24
 8002294:	d505      	bpl.n	80022a2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002296:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800229a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800229c:	4620      	mov	r0, r4
 800229e:	f000 f89c 	bl	80023da <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	0652      	lsls	r2, r2, #25
 80022a8:	d508      	bpl.n	80022bc <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	0650      	lsls	r0, r2, #25
 80022ae:	d505      	bpl.n	80022bc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff ff85 	bl	80021c6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	0691      	lsls	r1, r2, #26
 80022c2:	d522      	bpl.n	800230a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	0692      	lsls	r2, r2, #26
 80022c8:	d51f      	bpl.n	800230a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80022ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d0:	611a      	str	r2, [r3, #16]
    }
  }
}
 80022d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80022d6:	f000 b87f 	b.w	80023d8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022da:	f7ff ff71 	bl	80021c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022de:	4620      	mov	r0, r4
 80022e0:	f7ff ff70 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80022e4:	e783      	b.n	80021ee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	f7ff ff6b 	bl	80021c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7ff ff6a 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80022f0:	e792      	b.n	8002218 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	f7ff ff65 	bl	80021c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff ff64 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80022fc:	e7a0      	b.n	8002240 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	f7ff ff5f 	bl	80021c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff ff5e 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002308:	e7af      	b.n	800226a <HAL_TIM_IRQHandler+0xa2>
 800230a:	bd10      	pop	{r4, pc}

0800230c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800230c:	4a22      	ldr	r2, [pc, #136]	; (8002398 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 800230e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002310:	4290      	cmp	r0, r2
 8002312:	d00e      	beq.n	8002332 <TIM_Base_SetConfig+0x26>
 8002314:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002318:	d00b      	beq.n	8002332 <TIM_Base_SetConfig+0x26>
 800231a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800231e:	4290      	cmp	r0, r2
 8002320:	d007      	beq.n	8002332 <TIM_Base_SetConfig+0x26>
 8002322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002326:	4290      	cmp	r0, r2
 8002328:	d003      	beq.n	8002332 <TIM_Base_SetConfig+0x26>
 800232a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800232e:	4290      	cmp	r0, r2
 8002330:	d119      	bne.n	8002366 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002332:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002338:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800233a:	4a17      	ldr	r2, [pc, #92]	; (8002398 <TIM_Base_SetConfig+0x8c>)
 800233c:	4290      	cmp	r0, r2
 800233e:	d104      	bne.n	800234a <TIM_Base_SetConfig+0x3e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002340:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002346:	4313      	orrs	r3, r2
 8002348:	e018      	b.n	800237c <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800234a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800234e:	d0f7      	beq.n	8002340 <TIM_Base_SetConfig+0x34>
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <TIM_Base_SetConfig+0x90>)
 8002352:	4290      	cmp	r0, r2
 8002354:	d0f4      	beq.n	8002340 <TIM_Base_SetConfig+0x34>
 8002356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800235a:	4290      	cmp	r0, r2
 800235c:	d0f0      	beq.n	8002340 <TIM_Base_SetConfig+0x34>
 800235e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002362:	4290      	cmp	r0, r2
 8002364:	d0ec      	beq.n	8002340 <TIM_Base_SetConfig+0x34>
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <TIM_Base_SetConfig+0x94>)
 8002368:	4290      	cmp	r0, r2
 800236a:	d0e9      	beq.n	8002340 <TIM_Base_SetConfig+0x34>
 800236c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002370:	4290      	cmp	r0, r2
 8002372:	d0e5      	beq.n	8002340 <TIM_Base_SetConfig+0x34>
 8002374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002378:	4290      	cmp	r0, r2
 800237a:	d0e1      	beq.n	8002340 <TIM_Base_SetConfig+0x34>
  }

  TIMx->CR1 = tmpcr1;
 800237c:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800237e:	688b      	ldr	r3, [r1, #8]
 8002380:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002382:	680b      	ldr	r3, [r1, #0]
 8002384:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <TIM_Base_SetConfig+0x8c>)
 8002388:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800238a:	bf04      	itt	eq
 800238c:	690b      	ldreq	r3, [r1, #16]
 800238e:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002390:	2301      	movs	r3, #1
 8002392:	6143      	str	r3, [r0, #20]
}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40010000 	.word	0x40010000
 800239c:	40000400 	.word	0x40000400
 80023a0:	40014000 	.word	0x40014000

080023a4 <HAL_TIM_Base_Init>:
{ 
 80023a4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80023a6:	4604      	mov	r4, r0
 80023a8:	b1a0      	cbz	r0, 80023d4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80023aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023b2:	b91b      	cbnz	r3, 80023bc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80023b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80023b8:	f7ff fef6 	bl	80021a8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80023bc:	2302      	movs	r3, #2
 80023be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	1d21      	adds	r1, r4, #4
 80023c6:	f7ff ffa1 	bl	800230c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80023d0:	2000      	movs	r0, #0
 80023d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023d4:	2001      	movs	r0, #1
}
 80023d6:	bd10      	pop	{r4, pc}

080023d8 <HAL_TIMEx_CommutationCallback>:
 80023d8:	4770      	bx	lr

080023da <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023da:	4770      	bx	lr

080023dc <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80023dc:	b084      	sub	sp, #16
 80023de:	b538      	push	{r3, r4, r5, lr}
 80023e0:	ad05      	add	r5, sp, #20
 80023e2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80023e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023e8:	2b01      	cmp	r3, #1
{
 80023ea:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80023ec:	d126      	bne.n	800243c <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80023ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80023f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f4:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80023f6:	68c3      	ldr	r3, [r0, #12]
 80023f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80023fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002400:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002402:	68c3      	ldr	r3, [r0, #12]
 8002404:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002408:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 800240a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800240c:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800240e:	bf02      	ittt	eq
 8002410:	68c3      	ldreq	r3, [r0, #12]
 8002412:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002416:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002418:	f000 f88a 	bl	8002530 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 800241c:	9b08      	ldr	r3, [sp, #32]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002422:	68a3      	ldr	r3, [r4, #8]
 8002424:	f043 0306 	orr.w	r3, r3, #6
 8002428:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800242a:	68a3      	ldr	r3, [r4, #8]
 800242c:	f043 0320 	orr.w	r3, r3, #32
 8002430:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8002432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002436:	2000      	movs	r0, #0
 8002438:	b004      	add	sp, #16
 800243a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800243c:	68c3      	ldr	r3, [r0, #12]
 800243e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002442:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8002444:	f000 f874 	bl	8002530 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244c:	63a3      	str	r3, [r4, #56]	; 0x38
 800244e:	e7e5      	b.n	800241c <USB_CoreInit+0x40>

08002450 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002450:	6883      	ldr	r3, [r0, #8]
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002458:	2000      	movs	r0, #0
 800245a:	4770      	bx	lr

0800245c <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800245c:	6883      	ldr	r3, [r0, #8]
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002464:	2000      	movs	r0, #0
 8002466:	4770      	bx	lr

08002468 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002468:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800246a:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800246c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800246e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002472:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8002474:	d108      	bne.n	8002488 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002476:	68c3      	ldr	r3, [r0, #12]
 8002478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800247c:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 800247e:	2032      	movs	r0, #50	; 0x32
 8002480:	f7fe f8b2 	bl	80005e8 <HAL_Delay>
  
  return HAL_OK;
}
 8002484:	2000      	movs	r0, #0
 8002486:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002488:	2900      	cmp	r1, #0
 800248a:	d1f8      	bne.n	800247e <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800248c:	68c3      	ldr	r3, [r0, #12]
 800248e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002492:	60c3      	str	r3, [r0, #12]
 8002494:	e7f3      	b.n	800247e <USB_SetCurrentMode+0x16>
	...

08002498 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002498:	0189      	lsls	r1, r1, #6
 800249a:	f041 0120 	orr.w	r1, r1, #32
 800249e:	4a06      	ldr	r2, [pc, #24]	; (80024b8 <USB_FlushTxFifo+0x20>)
 80024a0:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80024a2:	3a01      	subs	r2, #1
 80024a4:	d005      	beq.n	80024b2 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80024a6:	6903      	ldr	r3, [r0, #16]
 80024a8:	f013 0320 	ands.w	r3, r3, #32
 80024ac:	d1f9      	bne.n	80024a2 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80024ae:	4618      	mov	r0, r3
 80024b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80024b2:	2003      	movs	r0, #3
}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	00030d41 	.word	0x00030d41

080024bc <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80024bc:	2310      	movs	r3, #16
 80024be:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <USB_FlushRxFifo+0x1c>)
 80024c0:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80024c2:	3a01      	subs	r2, #1
 80024c4:	d005      	beq.n	80024d2 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80024c6:	6903      	ldr	r3, [r0, #16]
 80024c8:	f013 0310 	ands.w	r3, r3, #16
 80024cc:	d1f9      	bne.n	80024c2 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80024ce:	4618      	mov	r0, r3
 80024d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80024d2:	2003      	movs	r0, #3
}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	00030d41 	.word	0x00030d41

080024dc <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80024dc:	b510      	push	{r4, lr}
 80024de:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 80024e2:	b94c      	cbnz	r4, 80024f8 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 80024e4:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80024e6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 80024f2:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 80024f4:	4299      	cmp	r1, r3
 80024f6:	d101      	bne.n	80024fc <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 80024f8:	2000      	movs	r0, #0
 80024fa:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80024fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8002500:	6010      	str	r0, [r2, #0]
 8002502:	e7f7      	b.n	80024f4 <USB_WritePacket+0x18>

08002504 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8002504:	3203      	adds	r2, #3
 8002506:	f022 0203 	bic.w	r2, r2, #3
 800250a:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800250c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8002510:	4291      	cmp	r1, r2
 8002512:	d101      	bne.n	8002518 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8002514:	4608      	mov	r0, r1
 8002516:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002518:	6803      	ldr	r3, [r0, #0]
 800251a:	f841 3b04 	str.w	r3, [r1], #4
 800251e:	e7f7      	b.n	8002510 <USB_ReadPacket+0xc>

08002520 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8002520:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8002522:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8002524:	4010      	ands	r0, r2
 8002526:	4770      	bx	lr

08002528 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8002528:	6940      	ldr	r0, [r0, #20]
}
 800252a:	f000 0001 	and.w	r0, r0, #1
 800252e:	4770      	bx	lr

08002530 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002532:	3b01      	subs	r3, #1
 8002534:	d101      	bne.n	800253a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002536:	2003      	movs	r0, #3
 8002538:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800253a:	6902      	ldr	r2, [r0, #16]
 800253c:	2a00      	cmp	r2, #0
 800253e:	daf8      	bge.n	8002532 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002540:	6903      	ldr	r3, [r0, #16]
 8002542:	4a06      	ldr	r2, [pc, #24]	; (800255c <USB_CoreReset+0x2c>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800254a:	3a01      	subs	r2, #1
 800254c:	d0f3      	beq.n	8002536 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800254e:	6903      	ldr	r3, [r0, #16]
 8002550:	f013 0301 	ands.w	r3, r3, #1
 8002554:	d1f9      	bne.n	800254a <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8002556:	4618      	mov	r0, r3
}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	00030d41 	.word	0x00030d41

08002560 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002560:	b084      	sub	sp, #16
 8002562:	b538      	push	{r3, r4, r5, lr}
 8002564:	4604      	mov	r4, r0
 8002566:	a805      	add	r0, sp, #20
 8002568:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 8002572:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002578:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 800257a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800257c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002580:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002582:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002588:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 800258a:	9b07      	ldr	r3, [sp, #28]
 800258c:	2b03      	cmp	r3, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 800258e:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8002592:	d13c      	bne.n	800260e <USB_HostInit+0xae>
 8002594:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8002598:	d039      	beq.n	800260e <USB_HostInit+0xae>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80025a2:	2110      	movs	r1, #16
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff ff77 	bl	8002498 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7ff ff86 	bl	80024bc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	9906      	ldr	r1, [sp, #24]
 80025b4:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 80025bc:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 80025be:	428b      	cmp	r3, r1
 80025c0:	d12a      	bne.n	8002618 <USB_HostInit+0xb8>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 80025c2:	2101      	movs	r1, #1
 80025c4:	4620      	mov	r0, r4
 80025c6:	f000 f873 	bl	80026b0 <USB_DriveVbus>
  
  HAL_Delay(200U);
 80025ca:	20c8      	movs	r0, #200	; 0xc8
 80025cc:	f7fe f80c 	bl	80005e8 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
 80025d4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
 80025dc:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 80025de:	d120      	bne.n	8002622 <USB_HostInit+0xc2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 80025e4:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80025e8:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <USB_HostInit+0xd8>)
 80025ec:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80025f0:	9b08      	ldr	r3, [sp, #32]
 80025f2:	b91b      	cbnz	r3, 80025fc <USB_HostInit+0x9c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80025f4:	69a3      	ldr	r3, [r4, #24]
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80025fc:	69a2      	ldr	r2, [r4, #24]
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <USB_HostInit+0xdc>)
 8002600:	4313      	orrs	r3, r2
 8002602:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8002604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002608:	2000      	movs	r0, #0
 800260a:	b004      	add	sp, #16
 800260c:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 800260e:	f023 0304 	bic.w	r3, r3, #4
 8002612:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8002616:	e7c4      	b.n	80025a2 <USB_HostInit+0x42>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002618:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 800261a:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 800261c:	60d5      	str	r5, [r2, #12]
 800261e:	3220      	adds	r2, #32
 8002620:	e7cd      	b.n	80025be <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x200U; 
 8002622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002626:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8002628:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800262c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <USB_HostInit+0xe0>)
 8002630:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002634:	e7dc      	b.n	80025f0 <USB_HostInit+0x90>
 8002636:	bf00      	nop
 8002638:	004000e0 	.word	0x004000e0
 800263c:	a3200008 	.word	0xa3200008
 8002640:	00e00300 	.word	0x00e00300

08002644 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002644:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002648:	f023 0303 	bic.w	r3, r3, #3
{
 800264c:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800264e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8002652:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8002656:	f001 0303 	and.w	r3, r1, #3
 800265a:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 800265c:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800265e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8002662:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 8002666:	d104      	bne.n	8002672 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8002668:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800266c:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 800266e:	2000      	movs	r0, #0
 8002670:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 8002672:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 8002674:	bf04      	itt	eq
 8002676:	f241 7370 	movweq	r3, #6000	; 0x1770
 800267a:	6053      	streq	r3, [r2, #4]
 800267c:	e7f7      	b.n	800266e <USB_InitFSLSPClkSel+0x2a>

0800267e <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800267e:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8002680:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002684:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8002686:	9b01      	ldr	r3, [sp, #4]
 8002688:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800268c:	9301      	str	r3, [sp, #4]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 800268e:	9b01      	ldr	r3, [sp, #4]
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002694:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8002696:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 800269a:	200a      	movs	r0, #10
 800269c:	f7fd ffa4 	bl	80005e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80026a0:	9b01      	ldr	r3, [sp, #4]
  return HAL_OK;
}
 80026a2:	2000      	movs	r0, #0
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80026a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 80026ac:	b002      	add	sp, #8
 80026ae:	bd10      	pop	{r4, pc}

080026b0 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80026b0:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80026b2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80026b6:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80026b8:	9b01      	ldr	r3, [sp, #4]
 80026ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026be:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80026c0:	9b01      	ldr	r3, [sp, #4]
 80026c2:	04da      	lsls	r2, r3, #19
 80026c4:	d406      	bmi.n	80026d4 <USB_DriveVbus+0x24>
 80026c6:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 80026c8:	bf02      	ittt	eq
 80026ca:	9b01      	ldreq	r3, [sp, #4]
 80026cc:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80026d0:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80026d4:	9b01      	ldr	r3, [sp, #4]
 80026d6:	04db      	lsls	r3, r3, #19
 80026d8:	d505      	bpl.n	80026e6 <USB_DriveVbus+0x36>
 80026da:	b921      	cbnz	r1, 80026e6 <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 80026dc:	9b01      	ldr	r3, [sp, #4]
 80026de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026e2:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 80026e6:	2000      	movs	r0, #0
 80026e8:	b002      	add	sp, #8
 80026ea:	4770      	bx	lr

080026ec <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 80026ec:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 80026ee:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80026f2:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 80026f4:	9801      	ldr	r0, [sp, #4]
}
 80026f6:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80026fa:	b002      	add	sp, #8
 80026fc:	4770      	bx	lr

080026fe <USB_GetCurrentFrame>:
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80026fe:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002702:	6880      	ldr	r0, [r0, #8]
}
 8002704:	b280      	uxth	r0, r0
 8002706:	4770      	bx	lr

08002708 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002708:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800270a:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 800270e:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 8002712:	f89d 5018 	ldrb.w	r5, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8002716:	f04f 36ff 	mov.w	r6, #4294967295
 800271a:	60a6      	str	r6, [r4, #8]
 800271c:	b257      	sxtb	r7, r2
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 800271e:	2d03      	cmp	r5, #3
 8002720:	d814      	bhi.n	800274c <USB_HC_Init+0x44>
 8002722:	e8df f005 	tbb	[pc, r5]
 8002726:	5302      	.short	0x5302
 8002728:	4d02      	.short	0x4d02
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800272a:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 800272e:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8002730:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8002732:	da04      	bge.n	800273e <USB_HC_Init+0x36>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002734:	68e6      	ldr	r6, [r4, #12]
 8002736:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800273a:	60e6      	str	r6, [r4, #12]
 800273c:	e006      	b.n	800274c <USB_HC_Init+0x44>
      if(USBx != USB_OTG_FS)
 800273e:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002742:	d003      	beq.n	800274c <USB_HC_Init+0x44>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002744:	68e6      	ldr	r6, [r4, #12]
 8002746:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 800274a:	60e6      	str	r6, [r4, #12]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800274c:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418
 8002750:	2601      	movs	r6, #1
 8002752:	fa06 f101 	lsl.w	r1, r6, r1
 8002756:	ea41 010c 	orr.w	r1, r1, ip
 800275a:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800275e:	6981      	ldr	r1, [r0, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8002760:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8002762:	02d2      	lsls	r2, r2, #11
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002764:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8002768:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 800276c:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002770:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8002772:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8002774:	f8bd 101c 	ldrh.w	r1, [sp, #28]
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8002778:	f89d 3014 	ldrb.w	r3, [sp, #20]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 800277c:	2f00      	cmp	r7, #0
 800277e:	bfb4      	ite	lt
 8002780:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 8002784:	2600      	movge	r6, #0
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8002786:	f3c1 010a 	ubfx	r1, r1, #0, #11
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 800278a:	2b02      	cmp	r3, #2
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 800278c:	ea4f 4385 	mov.w	r3, r5, lsl #18
 8002790:	ea42 0201 	orr.w	r2, r2, r1
 8002794:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002798:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800279c:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80027a0:	ea43 0306 	orr.w	r3, r3, r6
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80027a4:	bf0c      	ite	eq
 80027a6:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 80027aa:	2000      	movne	r0, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80027ac:	4303      	orrs	r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80027ae:	6023      	str	r3, [r4, #0]
    
  if (ep_type == EP_TYPE_INTR)
 80027b0:	2d03      	cmp	r5, #3
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80027b2:	bf02      	ittt	eq
 80027b4:	6823      	ldreq	r3, [r4, #0]
 80027b6:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80027ba:	6023      	streq	r3, [r4, #0]
  }

  return HAL_OK; 
}
 80027bc:	2000      	movs	r0, #0
 80027be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80027c0:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80U) 
 80027c4:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80027c6:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 80027c8:	dac0      	bge.n	800274c <USB_HC_Init+0x44>
 80027ca:	e7b3      	b.n	8002734 <USB_HC_Init+0x2c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80027cc:	f240 2625 	movw	r6, #549	; 0x225
 80027d0:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 80027d2:	2f00      	cmp	r7, #0
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 80027d4:	bfbe      	ittt	lt
 80027d6:	68e6      	ldrlt	r6, [r4, #12]
 80027d8:	f446 76c0 	orrlt.w	r6, r6, #384	; 0x180
 80027dc:	60e6      	strlt	r6, [r4, #12]
 80027de:	e7b5      	b.n	800274c <USB_HC_Init+0x44>

080027e0 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	4613      	mov	r3, r2
 80027ec:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 80027ee:	2300      	movs	r3, #0
 80027f0:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 80027f2:	2300      	movs	r3, #0
 80027f4:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 80027fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fe:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800280a:	d02b      	beq.n	8002864 <USB_HC_StartXfer+0x84>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	791b      	ldrb	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d127      	bne.n	8002864 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <USB_HC_StartXfer+0x52>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	795b      	ldrb	r3, [r3, #5]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d107      	bne.n	8002832 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	785b      	ldrb	r3, [r3, #1]
 8002826:	4619      	mov	r1, r3
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fa0f 	bl	8002c4c <USB_DoPing>
      return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e10d      	b.n	8002a4e <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d115      	bne.n	8002864 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	785b      	ldrb	r3, [r3, #1]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	4619      	mov	r1, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	785b      	ldrb	r3, [r3, #1]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800285c:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2200      	movs	r2, #0
 8002862:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d019      	beq.n	80028a0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	8912      	ldrh	r2, [r2, #8]
 8002874:	4413      	add	r3, r2
 8002876:	3b01      	subs	r3, #1
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	8912      	ldrh	r2, [r2, #8]
 800287c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002880:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 8002882:	8bfa      	ldrh	r2, [r7, #30]
 8002884:	8b3b      	ldrh	r3, [r7, #24]
 8002886:	429a      	cmp	r2, r3
 8002888:	d90c      	bls.n	80028a4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800288a:	8b3b      	ldrh	r3, [r7, #24]
 800288c:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 800288e:	8bfb      	ldrh	r3, [r7, #30]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	8912      	ldrh	r2, [r2, #8]
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	461a      	mov	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	611a      	str	r2, [r3, #16]
 800289e:	e001      	b.n	80028a4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	78db      	ldrb	r3, [r3, #3]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 80028ac:	8bfb      	ldrh	r3, [r7, #30]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	8912      	ldrh	r2, [r2, #8]
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ca:	4619      	mov	r1, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80028d4:	8bfb      	ldrh	r3, [r7, #30]
 80028d6:	04db      	lsls	r3, r3, #19
 80028d8:	4618      	mov	r0, r3
 80028da:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <USB_HC_StartXfer+0x278>)
 80028dc:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80028de:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	7a9b      	ldrb	r3, [r3, #10]
 80028e4:	075b      	lsls	r3, r3, #29
 80028e6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80028ea:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80028ec:	610b      	str	r3, [r1, #16]
  
  if (dma)
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	4619      	mov	r1, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002946:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	4619      	mov	r1, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	7f7a      	ldrb	r2, [r7, #29]
 800296a:	0752      	lsls	r2, r2, #29
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	785b      	ldrb	r3, [r3, #1]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002988:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002990:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	785b      	ldrb	r3, [r3, #1]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	461a      	mov	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d14f      	bne.n	8002a4c <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	78db      	ldrb	r3, [r3, #3]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d14b      	bne.n	8002a4c <USB_HC_StartXfer+0x26c>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d047      	beq.n	8002a4c <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	79db      	ldrb	r3, [r3, #7]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d831      	bhi.n	8002a28 <USB_HC_StartXfer+0x248>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <USB_HC_StartXfer+0x1ec>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	08002a01 	.word	0x08002a01
 80029d4:	080029dd 	.word	0x080029dd
 80029d8:	08002a01 	.word	0x08002a01
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	3303      	adds	r3, #3
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 80029e6:	8b7a      	ldrh	r2, [r7, #26]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d91c      	bls.n	8002a2c <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80029fe:	e015      	b.n	8002a2c <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	3303      	adds	r3, #3
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8002a0a:	8b7a      	ldrh	r2, [r7, #26]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d90a      	bls.n	8002a30 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	619a      	str	r2, [r3, #24]
        }
        break;
 8002a26:	e003      	b.n	8002a30 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8002a28:	bf00      	nop
 8002a2a:	e002      	b.n	8002a32 <USB_HC_StartXfer+0x252>
        break;
 8002a2c:	bf00      	nop
 8002a2e:	e000      	b.n	8002a32 <USB_HC_StartXfer+0x252>
        break;
 8002a30:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	68d9      	ldr	r1, [r3, #12]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	785a      	ldrb	r2, [r3, #1]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	b298      	uxth	r0, r3
 8002a40:	2300      	movs	r3, #0
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4603      	mov	r3, r0
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7ff fd48 	bl	80024dc <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	1ff80000 	.word	0x1ff80000

08002a5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	b29b      	uxth	r3, r3
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0c9b      	lsrs	r3, r3, #18
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <USB_HC_Halt+0x40>
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8002ab0:	0c9b      	lsrs	r3, r3, #18
 8002ab2:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d160      	bne.n	8002b7c <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ada:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d135      	bne.n	8002b54 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	4619      	mov	r1, r3
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b08:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	4619      	mov	r1, r3
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b2a:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b38:	d81e      	bhi.n	8002b78 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b50:	d0ec      	beq.n	8002b2c <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8002b52:	e074      	b.n	8002c3e <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	4619      	mov	r1, r3
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b74:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8002b76:	e062      	b.n	8002c3e <USB_HC_Halt+0x1c4>
          break;
 8002b78:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8002b7a:	e060      	b.n	8002c3e <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	4619      	mov	r1, r3
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b9c:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d135      	bne.n	8002c18 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	4619      	mov	r1, r3
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bcc:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	4619      	mov	r1, r3
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bee:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bfc:	d81e      	bhi.n	8002c3c <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c14:	d0ec      	beq.n	8002bf0 <USB_HC_Halt+0x176>
 8002c16:	e012      	b.n	8002c3e <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	4619      	mov	r1, r3
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c38:	600b      	str	r3, [r1, #0]
 8002c3a:	e000      	b.n	8002c3e <USB_HC_Halt+0x1c4>
          break;
 8002c3c:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	04db      	lsls	r3, r3, #19
 8002c72:	4619      	mov	r1, r3
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <USB_DoPing+0x74>)
 8002c76:	400b      	ands	r3, r1
 8002c78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c94:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c9c:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	1ff80000 	.word	0x1ff80000

08002cc4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fbc3 	bl	800245c <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8002cd6:	2110      	movs	r1, #16
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fbdd 	bl	8002498 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fbec 	bl	80024bc <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	75fb      	strb	r3, [r7, #23]
 8002ce8:	e01f      	b.n	8002d2a <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d00:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d08:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d10:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	3301      	adds	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d9dc      	bls.n	8002cea <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	75fb      	strb	r3, [r7, #23]
 8002d34:	e034      	b.n	8002da0 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d4c:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d54:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d5c:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	3301      	adds	r3, #1
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d7c:	d80c      	bhi.n	8002d98 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d94:	d0ec      	beq.n	8002d70 <USB_StopHost+0xac>
 8002d96:	e000      	b.n	8002d9a <USB_StopHost+0xd6>
        break;
 8002d98:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	75fb      	strb	r3, [r7, #23]
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	d9c7      	bls.n	8002d36 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dac:	461a      	mov	r2, r3
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dba:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff fb47 	bl	8002450 <USB_EnableGlobalInt>
  return HAL_OK;  
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;  
}
 8002dcc:	2000      	movs	r0, #0
 8002dce:	4770      	bx	lr

08002dd0 <USBH_CDC_InterfaceDeInit>:
{
 8002dd0:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002dd2:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8002dd6:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8002dd8:	7821      	ldrb	r1, [r4, #0]
{
 8002dda:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8002ddc:	b139      	cbz	r1, 8002dee <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8002dde:	f000 fe87 	bl	8003af0 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8002de2:	7821      	ldrb	r1, [r4, #0]
 8002de4:	4628      	mov	r0, r5
 8002de6:	f000 fea0 	bl	8003b2a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0;     /* Reset the Channel as Free */
 8002dea:	2300      	movs	r3, #0
 8002dec:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8002dee:	7b21      	ldrb	r1, [r4, #12]
 8002df0:	b141      	cbz	r1, 8002e04 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 fe7c 	bl	8003af0 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8002df8:	7b21      	ldrb	r1, [r4, #12]
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f000 fe95 	bl	8003b2a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0;     /* Reset the Channel as Free */
 8002e00:	2300      	movs	r3, #0
 8002e02:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8002e04:	7b61      	ldrb	r1, [r4, #13]
 8002e06:	b141      	cbz	r1, 8002e1a <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8002e08:	4628      	mov	r0, r5
 8002e0a:	f000 fe71 	bl	8003af0 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8002e0e:	7b61      	ldrb	r1, [r4, #13]
 8002e10:	4628      	mov	r0, r5
 8002e12:	f000 fe8a 	bl	8003b2a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0;     /* Reset the Channel as Free */
 8002e16:	2300      	movs	r3, #0
 8002e18:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8002e1a:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8002e1e:	69d8      	ldr	r0, [r3, #28]
 8002e20:	b128      	cbz	r0, 8002e2e <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8002e22:	f002 ffff 	bl	8005e24 <free>
    phost->pActiveClass->pData = 0;
 8002e26:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
}
 8002e2e:	2000      	movs	r0, #0
 8002e30:	bd38      	pop	{r3, r4, r5, pc}

08002e32 <USBH_CDC_InterfaceInit>:
{	
 8002e32:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, 
 8002e34:	2202      	movs	r2, #2
{	
 8002e36:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, 
 8002e38:	2301      	movs	r3, #1
 8002e3a:	4611      	mov	r1, r2
{	
 8002e3c:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, 
 8002e3e:	f000 f9e3 	bl	8003208 <USBH_FindInterface>
  if(interface == 0xFF) /* No Valid Interface */
 8002e42:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, 
 8002e44:	4606      	mov	r6, r0
  if(interface == 0xFF) /* No Valid Interface */
 8002e46:	d102      	bne.n	8002e4e <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8002e48:	2002      	movs	r0, #2
}
 8002e4a:	b005      	add	sp, #20
 8002e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8002e4e:	4601      	mov	r1, r0
 8002e50:	4628      	mov	r0, r5
 8002e52:	f000 f9d0 	bl	80031f6 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002e56:	2050      	movs	r0, #80	; 0x50
 8002e58:	f8d5 7374 	ldr.w	r7, [r5, #884]	; 0x374
 8002e5c:	f002 ffda 	bl	8005e14 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002e60:	231a      	movs	r3, #26
 8002e62:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002e66:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002e68:	f896 3348 	ldrb.w	r3, [r6, #840]	; 0x348
 8002e6c:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002e6e:	bf42      	ittt	mi
 8002e70:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002e72:	f8b6 334a 	ldrhmi.w	r3, [r6, #842]	; 0x34a
 8002e76:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002e78:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8002e7a:	7841      	ldrb	r1, [r0, #1]
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f000 fe3c 	bl	8003afa <USBH_AllocPipe>
 8002e82:	4601      	mov	r1, r0
 8002e84:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8002e86:	8960      	ldrh	r0, [r4, #10]
 8002e88:	9002      	str	r0, [sp, #8]
 8002e8a:	2003      	movs	r0, #3
 8002e8c:	9001      	str	r0, [sp, #4]
 8002e8e:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002e92:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002e96:	7862      	ldrb	r2, [r4, #1]
 8002e98:	9000      	str	r0, [sp, #0]
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f000 fe19 	bl	8003ad2 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0);    
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	7821      	ldrb	r1, [r4, #0]
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f002 ff4c 	bl	8005d42 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost, 
 8002eaa:	2300      	movs	r3, #0
 8002eac:	461a      	mov	r2, r3
 8002eae:	210a      	movs	r1, #10
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f000 f9a9 	bl	8003208 <USBH_FindInterface>
    if(interface == 0xFF) /* No Valid Interface */
 8002eb6:	28ff      	cmp	r0, #255	; 0xff
 8002eb8:	d0c6      	beq.n	8002e48 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002eba:	231a      	movs	r3, #26
 8002ebc:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8002ec0:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002ec4:	f891 2348 	ldrb.w	r2, [r1, #840]	; 0x348
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8002ec8:	f890 3350 	ldrb.w	r3, [r0, #848]	; 0x350
 8002ecc:	f8b1 134a 	ldrh.w	r1, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002ed0:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002ed4:	bf0d      	iteet	eq
 8002ed6:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002ed8:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002eda:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002edc:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8002ede:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002ee2:	bf08      	it	eq
 8002ee4:	73a3      	strbeq	r3, [r4, #14]
 8002ee6:	f8b0 2352 	ldrh.w	r2, [r0, #850]	; 0x352
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002eea:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002eec:	bf18      	it	ne
 8002eee:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002ef0:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002ef2:	bf14      	ite	ne
 8002ef4:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002ef6:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002ef8:	f000 fdff 	bl	8003afa <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8002efc:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002efe:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8002f00:	4628      	mov	r0, r5
 8002f02:	f000 fdfa 	bl	8003afa <USBH_AllocPipe>
 8002f06:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8002f08:	8b20      	ldrh	r0, [r4, #24]
 8002f0a:	9002      	str	r0, [sp, #8]
 8002f0c:	2602      	movs	r6, #2
 8002f0e:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002f12:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002f16:	7ba2      	ldrb	r2, [r4, #14]
 8002f18:	7b61      	ldrb	r1, [r4, #13]
 8002f1a:	9601      	str	r6, [sp, #4]
 8002f1c:	9000      	str	r0, [sp, #0]
 8002f1e:	4628      	mov	r0, r5
 8002f20:	f000 fdd7 	bl	8003ad2 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8002f24:	8b60      	ldrh	r0, [r4, #26]
 8002f26:	9002      	str	r0, [sp, #8]
 8002f28:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002f2c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002f30:	7be2      	ldrb	r2, [r4, #15]
 8002f32:	7b21      	ldrb	r1, [r4, #12]
 8002f34:	9601      	str	r6, [sp, #4]
 8002f36:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002f38:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	f000 fdc9 	bl	8003ad2 <USBH_OpenPipe>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8002f40:	4632      	mov	r2, r6
 8002f42:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002f44:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f002 fefa 	bl	8005d42 <USBH_LL_SetToggle>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.InPipe,0);
 8002f4e:	4632      	mov	r2, r6
 8002f50:	7b21      	ldrb	r1, [r4, #12]
 8002f52:	4628      	mov	r0, r5
 8002f54:	f002 fef5 	bl	8005d42 <USBH_LL_SetToggle>
      status = USBH_OK; 
 8002f58:	4630      	mov	r0, r6
 8002f5a:	e776      	b.n	8002e4a <USBH_CDC_InterfaceInit+0x18>

08002f5c <USBH_CDC_ClassRequest>:
{   
 8002f5c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;  
 8002f5e:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8002f62:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002f64:	23a1      	movs	r3, #161	; 0xa1
 8002f66:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002f68:	2321      	movs	r3, #33	; 0x21
 8002f6a:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002f6c:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8002f72:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002f74:	82c2      	strh	r2, [r0, #22]
 
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002f76:	3140      	adds	r1, #64	; 0x40
{   
 8002f78:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002f7a:	f000 fb20 	bl	80035be <USBH_CtlReq>
  if(status == USBH_OK)
 8002f7e:	4605      	mov	r5, r0
 8002f80:	b920      	cbnz	r0, 8002f8c <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8002f82:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8002f86:	2102      	movs	r1, #2
 8002f88:	4620      	mov	r0, r4
 8002f8a:	4798      	blx	r3
}
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	bd38      	pop	{r3, r4, r5, pc}

08002f90 <USBH_CDC_TransmitCallback>:
 8002f90:	4770      	bx	lr

08002f92 <USBH_CDC_ReceiveCallback>:
 8002f92:	4770      	bx	lr

08002f94 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8002f94:	4770      	bx	lr

08002f96 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 8002f96:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8002f9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 8002f9c:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8002f9e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8002fa2:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d817      	bhi.n	8002fd8 <USBH_CDC_Process+0x42>
 8002fa8:	e8df f003 	tbb	[pc, r3]
 8002fac:	42180603 	.word	0x42180603
 8002fb0:	b8          	.byte	0xb8
 8002fb1:	00          	.byte	0x00
    status = USBH_OK;
 8002fb2:	2000      	movs	r0, #0
}
 8002fb4:	b003      	add	sp, #12
 8002fb6:	bd30      	pop	{r4, r5, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8002fb8:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8002fba:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8002fbc:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002fc2:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8002fc8:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002fca:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecodin->Array , LINE_CODING_STRUCTURE_SIZE );  
 8002fcc:	f000 faf7 	bl	80035be <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002fd0:	bb50      	cbnz	r0, 8003028 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE; 
 8002fd2:	2302      	movs	r3, #2
      CDC_Handle->state = CDC_ERROR_STATE; 
 8002fd4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8002fd8:	2001      	movs	r0, #1
 8002fda:	e7eb      	b.n	8002fb4 <USBH_CDC_Process+0x1e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002fdc:	23a1      	movs	r3, #161	; 0xa1
 8002fde:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002fe0:	2321      	movs	r3, #33	; 0x21
 8002fe2:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002fe4:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8002fea:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002fec:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002fee:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8002ff2:	f000 fae4 	bl	80035be <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002ff6:	b9b8      	cbnz	r0, 8003028 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8002ff8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ffa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE; 
 8002ffc:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8003000:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800300a:	4291      	cmp	r1, r2
 800300c:	d1e4      	bne.n	8002fd8 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800300e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003012:	795a      	ldrb	r2, [r3, #5]
 8003014:	4291      	cmp	r1, r2
 8003016:	d1df      	bne.n	8002fd8 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8003018:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d1db      	bne.n	8002fd8 <USBH_CDC_Process+0x42>
        USBH_CDC_LineCodingChanged(phost);
 8003020:	4628      	mov	r0, r5
 8003022:	f7ff ffb7 	bl	8002f94 <USBH_CDC_LineCodingChanged>
 8003026:	e7d7      	b.n	8002fd8 <USBH_CDC_Process+0x42>
    else if(req_status != USBH_BUSY)
 8003028:	2801      	cmp	r0, #1
 800302a:	d0d5      	beq.n	8002fd8 <USBH_CDC_Process+0x42>
      CDC_Handle->state = CDC_ERROR_STATE; 
 800302c:	2304      	movs	r3, #4
 800302e:	e7d1      	b.n	8002fd4 <USBH_CDC_Process+0x3e>
  switch(CDC_Handle->data_tx_state)
 8003030:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8003034:	2901      	cmp	r1, #1
 8003036:	d02b      	beq.n	8003090 <USBH_CDC_Process+0xfa>
 8003038:	2902      	cmp	r1, #2
 800303a:	d038      	beq.n	80030ae <USBH_CDC_Process+0x118>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800303c:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8003040:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8003042:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8003046:	2b03      	cmp	r3, #3
 8003048:	d057      	beq.n	80030fa <USBH_CDC_Process+0x164>
 800304a:	2b04      	cmp	r3, #4
 800304c:	d1c4      	bne.n	8002fd8 <USBH_CDC_Process+0x42>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe); 
 800304e:	7b21      	ldrb	r1, [r4, #12]
 8003050:	4628      	mov	r0, r5
 8003052:	f002 fe65 	bl	8005d20 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 8003056:	2801      	cmp	r0, #1
 8003058:	d1be      	bne.n	8002fd8 <USBH_CDC_Process+0x42>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800305a:	7b21      	ldrb	r1, [r4, #12]
 800305c:	4628      	mov	r0, r5
 800305e:	f002 fe1b 	bl	8005c98 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8003062:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8003064:	b282      	uxth	r2, r0
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8003066:	4293      	cmp	r3, r2
 8003068:	4610      	mov	r0, r2
 800306a:	d050      	beq.n	800310e <USBH_CDC_Process+0x178>
 800306c:	8b61      	ldrh	r1, [r4, #26]
 800306e:	4291      	cmp	r1, r2
 8003070:	d24d      	bcs.n	800310e <USBH_CDC_Process+0x178>
        CDC_Handle->RxDataLength -= length ;
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	62a3      	str	r3, [r4, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8003076:	6a23      	ldr	r3, [r4, #32]
 8003078:	4418      	add	r0, r3
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 800307a:	2303      	movs	r3, #3
        CDC_Handle->pRxData += length;
 800307c:	6220      	str	r0, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 800307e:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
      osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2104      	movs	r1, #4
 8003086:	f8d5 03c8 	ldr.w	r0, [r5, #968]	; 0x3c8
 800308a:	f000 fd7b 	bl	8003b84 <osMessagePut>
 800308e:	e7a3      	b.n	8002fd8 <USBH_CDC_Process+0x42>
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003090:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003092:	8b22      	ldrh	r2, [r4, #24]
 8003094:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8003096:	9100      	str	r1, [sp, #0]
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003098:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 800309a:	bf98      	it	ls
 800309c:	b282      	uxthls	r2, r0
 800309e:	69e1      	ldr	r1, [r4, #28]
 80030a0:	4628      	mov	r0, r5
 80030a2:	f000 fcef 	bl	8003a84 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80030a6:	2302      	movs	r3, #2
 80030a8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80030ac:	e7c6      	b.n	800303c <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe); 
 80030ae:	7b61      	ldrb	r1, [r4, #13]
 80030b0:	f002 fe36 	bl	8005d20 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 80030b4:	2801      	cmp	r0, #1
 80030b6:	d11d      	bne.n	80030f4 <USBH_CDC_Process+0x15e>
      if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80030b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030ba:	8b22      	ldrh	r2, [r4, #24]
 80030bc:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize ;
 80030be:	bf83      	ittte	hi
 80030c0:	1a9b      	subhi	r3, r3, r2
 80030c2:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80030c4:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0;
 80030c6:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80030c8:	bf8a      	itet	hi
 80030ca:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0;
 80030cc:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80030ce:	61e3      	strhi	r3, [r4, #28]
      if( CDC_Handle->TxDataLength > 0)
 80030d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030d2:	b11b      	cbz	r3, 80030dc <USBH_CDC_Process+0x146>
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 80030d4:	2301      	movs	r3, #1
 80030d6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80030da:	e004      	b.n	80030e6 <USBH_CDC_Process+0x150>
        CDC_Handle->data_tx_state = CDC_IDLE;    
 80030dc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80030e0:	4628      	mov	r0, r5
 80030e2:	f7ff ff55 	bl	8002f90 <USBH_CDC_TransmitCallback>
      osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2104      	movs	r1, #4
 80030ea:	f8d5 03c8 	ldr.w	r0, [r5, #968]	; 0x3c8
 80030ee:	f000 fd49 	bl	8003b84 <osMessagePut>
 80030f2:	e7a3      	b.n	800303c <USBH_CDC_Process+0xa6>
    else if( URB_Status == USBH_URB_NOTREADY )
 80030f4:	2802      	cmp	r0, #2
 80030f6:	d1a1      	bne.n	800303c <USBH_CDC_Process+0xa6>
 80030f8:	e7ec      	b.n	80030d4 <USBH_CDC_Process+0x13e>
    USBH_BulkReceiveData (phost,
 80030fa:	7b23      	ldrb	r3, [r4, #12]
 80030fc:	8b62      	ldrh	r2, [r4, #26]
 80030fe:	6a21      	ldr	r1, [r4, #32]
 8003100:	4628      	mov	r0, r5
 8003102:	f000 fcd6 	bl	8003ab2 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8003106:	2304      	movs	r3, #4
 8003108:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 800310c:	e764      	b.n	8002fd8 <USBH_CDC_Process+0x42>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800310e:	2300      	movs	r3, #0
 8003110:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8003114:	4628      	mov	r0, r5
 8003116:	f7ff ff3c 	bl	8002f92 <USBH_CDC_ReceiveCallback>
 800311a:	e7b2      	b.n	8003082 <USBH_CDC_Process+0xec>
    req_status = USBH_ClrFeature(phost, 0x00); 
 800311c:	2100      	movs	r1, #0
 800311e:	f000 fc6b 	bl	80039f8 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8003122:	2800      	cmp	r0, #0
 8003124:	f47f af58 	bne.w	8002fd8 <USBH_CDC_Process+0x42>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8003128:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800312c:	e754      	b.n	8002fd8 <USBH_CDC_Process+0x42>

0800312e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800312e:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 8003132:	f500 726e 	add.w	r2, r0, #952	; 0x3b8
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 8003136:	2100      	movs	r1, #0
 8003138:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800313c:	4293      	cmp	r3, r2
 800313e:	d1fb      	bne.n	8003138 <DeInitStateMachine+0xa>
 8003140:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003144:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 800314e:	4291      	cmp	r1, r2
 8003150:	d1fb      	bne.n	800314a <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8003152:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8003154:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8003156:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8003158:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800315a:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 800315c:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  phost->Control.state = CTRL_SETUP;
 8003160:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8003162:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 8003164:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003166:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800316a:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d
  
  return USBH_OK;
}
 800316e:	2000      	movs	r0, #0
 8003170:	4770      	bx	lr
	...

08003174 <USBH_Init>:
{
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	460c      	mov	r4, r1
 8003178:	b088      	sub	sp, #32
  if(phost == NULL)
 800317a:	4605      	mov	r5, r0
 800317c:	b348      	cbz	r0, 80031d2 <USBH_Init+0x5e>
  phost->pActiveClass = NULL;
 800317e:	2300      	movs	r3, #0
  phost->id = id;
 8003180:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  phost->pActiveClass = NULL;
 8003184:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
  phost->ClassNumber = 0;
 8003188:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  DeInitStateMachine(phost);
 800318c:	f7ff ffcf 	bl	800312e <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8003190:	b10c      	cbz	r4, 8003196 <USBH_Init+0x22>
    phost->pUser = pUsrFunc;
 8003192:	f8c5 43c4 	str.w	r4, [r5, #964]	; 0x3c4
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8003196:	4c10      	ldr	r4, [pc, #64]	; (80031d8 <USBH_Init+0x64>)
 8003198:	e894 0003 	ldmia.w	r4, {r0, r1}
 800319c:	ab01      	add	r3, sp, #4
 800319e:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL); 
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fce9 	bl	8003b7c <osMessageCreate>
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 80031aa:	3408      	adds	r4, #8
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL); 
 80031ac:	f8c5 03c8 	str.w	r0, [r5, #968]	; 0x3c8
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 80031b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b2:	ae03      	add	r6, sp, #12
 80031b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	6033      	str	r3, [r6, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 80031ba:	4629      	mov	r1, r5
 80031bc:	a803      	add	r0, sp, #12
 80031be:	f000 fcc5 	bl	8003b4c <osThreadCreate>
 80031c2:	f8c5 03cc 	str.w	r0, [r5, #972]	; 0x3cc
  USBH_LL_Init(phost);
 80031c6:	4628      	mov	r0, r5
 80031c8:	f002 fd02 	bl	8005bd0 <USBH_LL_Init>
  return USBH_OK;
 80031cc:	2000      	movs	r0, #0
}
 80031ce:	b008      	add	sp, #32
 80031d0:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL; 
 80031d2:	2002      	movs	r0, #2
 80031d4:	e7fb      	b.n	80031ce <USBH_Init+0x5a>
 80031d6:	bf00      	nop
 80031d8:	08006d2c 	.word	0x08006d2c

080031dc <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 80031dc:	b149      	cbz	r1, 80031f2 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80031de:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80031e2:	b933      	cbnz	r3, 80031f2 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80031e4:	2201      	movs	r2, #1
 80031e6:	f8c0 2378 	str.w	r2, [r0, #888]	; 0x378
 80031ea:	f8c0 1370 	str.w	r1, [r0, #880]	; 0x370
      status = USBH_OK;
 80031ee:	4618      	mov	r0, r3
 80031f0:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 80031f2:	2002      	movs	r0, #2
  }
  
  return status;
}
 80031f4:	4770      	bx	lr

080031f6 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80031f6:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 80031fa:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80031fc:	bf86      	itte	hi
 80031fe:	f880 131f 	strbhi.w	r1, [r0, #799]	; 0x31f
  USBH_StatusTypeDef   status = USBH_OK;
 8003202:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8003204:	2002      	movls	r0, #2
  }
  return status;  
}
 8003206:	4770      	bx	lr

08003208 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8003208:	b530      	push	{r4, r5, lr}
 800320a:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 800320c:	f890 5341 	ldrb.w	r5, [r0, #833]	; 0x341
 8003210:	428d      	cmp	r5, r1
 8003212:	d001      	beq.n	8003218 <USBH_FindInterface+0x10>
 8003214:	29ff      	cmp	r1, #255	; 0xff
 8003216:	d10d      	bne.n	8003234 <USBH_FindInterface+0x2c>
 8003218:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
 800321c:	4295      	cmp	r5, r2
 800321e:	d001      	beq.n	8003224 <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8003220:	2aff      	cmp	r2, #255	; 0xff
 8003222:	d107      	bne.n	8003234 <USBH_FindInterface+0x2c>
 8003224:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 8003228:	429d      	cmp	r5, r3
 800322a:	d101      	bne.n	8003230 <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 800322c:	b2e0      	uxtb	r0, r4
 800322e:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8003230:	2bff      	cmp	r3, #255	; 0xff
 8003232:	d0fb      	beq.n	800322c <USBH_FindInterface+0x24>
 8003234:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003236:	2c02      	cmp	r4, #2
 8003238:	f100 001a 	add.w	r0, r0, #26
 800323c:	d1e6      	bne.n	800320c <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 800323e:	20ff      	movs	r0, #255	; 0xff
}
 8003240:	bd30      	pop	{r4, r5, pc}

08003242 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003242:	b510      	push	{r4, lr}
 8003244:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003246:	f002 fcef 	bl	8005c28 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 800324a:	2101      	movs	r1, #1
 800324c:	4620      	mov	r0, r4
 800324e:	f002 fd6b 	bl	8005d28 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 8003252:	2000      	movs	r0, #0
 8003254:	bd10      	pop	{r4, pc}

08003256 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003256:	b530      	push	{r4, r5, lr}
 8003258:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800325a:	2302      	movs	r3, #2
 800325c:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 8003260:	7803      	ldrb	r3, [r0, #0]
{
 8003262:	4604      	mov	r4, r0
  switch (phost->gState)
 8003264:	2b0a      	cmp	r3, #10
 8003266:	d81d      	bhi.n	80032a4 <USBH_Process+0x4e>
 8003268:	e8df f013 	tbh	[pc, r3, lsl #1]
 800326c:	001c000b 	.word	0x001c000b
 8003270:	0135001f 	.word	0x0135001f
 8003274:	0050001c 	.word	0x0050001c
 8003278:	00e9011c 	.word	0x00e9011c
 800327c:	00fc00f3 	.word	0x00fc00f3
 8003280:	012d      	.short	0x012d
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8003282:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8003286:	b16b      	cbz	r3, 80032a4 <USBH_Process+0x4e>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 8003288:	2501      	movs	r5, #1
 800328a:	7005      	strb	r5, [r0, #0]
      USBH_Delay(200); 
 800328c:	20c8      	movs	r0, #200	; 0xc8
 800328e:	f002 fd67 	bl	8005d60 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8003292:	4620      	mov	r0, r4
 8003294:	f002 fcf2 	bl	8005c7c <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8003298:	2200      	movs	r2, #0
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800329a:	2101      	movs	r1, #1
 800329c:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 80032a0:	f000 fc70 	bl	8003b84 <osMessagePut>
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 80032a4:	2000      	movs	r0, #0
 80032a6:	b007      	add	sp, #28
 80032a8:	bd30      	pop	{r4, r5, pc}
    USBH_Delay(100); 
 80032aa:	2064      	movs	r0, #100	; 0x64
 80032ac:	f002 fd58 	bl	8005d60 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80032b0:	4620      	mov	r0, r4
 80032b2:	f002 fcd5 	bl	8005c60 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 80032b6:	2305      	movs	r3, #5
 80032b8:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80032ba:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80032be:	2100      	movs	r1, #0
 80032c0:	4620      	mov	r0, r4
 80032c2:	f000 fc1a 	bl	8003afa <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80032c6:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80032c8:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80032ca:	4620      	mov	r0, r4
 80032cc:	f000 fc15 	bl	8003afa <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80032d0:	79a2      	ldrb	r2, [r4, #6]
 80032d2:	9202      	str	r2, [sp, #8]
 80032d4:	2500      	movs	r5, #0
 80032d6:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80032da:	7120      	strb	r0, [r4, #4]
 80032dc:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80032de:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80032e2:	9200      	str	r2, [sp, #0]
 80032e4:	9501      	str	r5, [sp, #4]
 80032e6:	2280      	movs	r2, #128	; 0x80
 80032e8:	4620      	mov	r0, r4
 80032ea:	f000 fbf2 	bl	8003ad2 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 80032ee:	79a2      	ldrb	r2, [r4, #6]
 80032f0:	9202      	str	r2, [sp, #8]
 80032f2:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80032f6:	9200      	str	r2, [sp, #0]
 80032f8:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80032fc:	7961      	ldrb	r1, [r4, #5]
 80032fe:	9501      	str	r5, [sp, #4]
 8003300:	462a      	mov	r2, r5
 8003302:	4620      	mov	r0, r4
 8003304:	f000 fbe5 	bl	8003ad2 <USBH_OpenPipe>
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8003308:	462a      	mov	r2, r5
 800330a:	e7c6      	b.n	800329a <USBH_Process+0x44>
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
  
  switch (phost->EnumState)
 800330c:	7843      	ldrb	r3, [r0, #1]
 800330e:	2b07      	cmp	r3, #7
 8003310:	d8c8      	bhi.n	80032a4 <USBH_Process+0x4e>
 8003312:	e8df f003 	tbb	[pc, r3]
 8003316:	2904      	.short	0x2904
 8003318:	534a4231 	.word	0x534a4231
 800331c:	7667      	.short	0x7667
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 800331e:	2108      	movs	r1, #8
 8003320:	f000 fa37 	bl	8003792 <USBH_Get_DevDesc>
 8003324:	4605      	mov	r5, r0
 8003326:	2800      	cmp	r0, #0
 8003328:	d1bc      	bne.n	80032a4 <USBH_Process+0x4e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800332a:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800332c:	f894 2327 	ldrb.w	r2, [r4, #807]	; 0x327
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003330:	7063      	strb	r3, [r4, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8003332:	7921      	ldrb	r1, [r4, #4]
 8003334:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003338:	71a2      	strb	r2, [r4, #6]
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800333a:	9202      	str	r2, [sp, #8]
 800333c:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003340:	9200      	str	r2, [sp, #0]
 8003342:	9501      	str	r5, [sp, #4]
 8003344:	2280      	movs	r2, #128	; 0x80
 8003346:	4620      	mov	r0, r4
 8003348:	f000 fbc3 	bl	8003ad2 <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800334c:	79a2      	ldrb	r2, [r4, #6]
 800334e:	9202      	str	r2, [sp, #8]
 8003350:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003354:	9200      	str	r2, [sp, #0]
 8003356:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800335a:	7961      	ldrb	r1, [r4, #5]
 800335c:	9501      	str	r5, [sp, #4]
 800335e:	462a      	mov	r2, r5
 8003360:	4620      	mov	r0, r4
 8003362:	f000 fbb6 	bl	8003ad2 <USBH_OpenPipe>
 8003366:	e79d      	b.n	80032a4 <USBH_Process+0x4e>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8003368:	2112      	movs	r1, #18
 800336a:	f000 fa12 	bl	8003792 <USBH_Get_DevDesc>
 800336e:	2800      	cmp	r0, #0
 8003370:	d198      	bne.n	80032a4 <USBH_Process+0x4e>
      phost->EnumState = ENUM_SET_ADDR;
 8003372:	2302      	movs	r3, #2
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8003374:	7063      	strb	r3, [r4, #1]
 8003376:	e795      	b.n	80032a4 <USBH_Process+0x4e>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8003378:	2101      	movs	r1, #1
 800337a:	f000 fb21 	bl	80039c0 <USBH_SetAddress>
 800337e:	4605      	mov	r5, r0
 8003380:	2800      	cmp	r0, #0
 8003382:	d18f      	bne.n	80032a4 <USBH_Process+0x4e>
      USBH_Delay(2);
 8003384:	2002      	movs	r0, #2
 8003386:	f002 fceb 	bl	8005d60 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800338a:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 800338c:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 800338e:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003390:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8003394:	7921      	ldrb	r1, [r4, #4]
 8003396:	79a2      	ldrb	r2, [r4, #6]
 8003398:	e7cf      	b.n	800333a <USBH_Process+0xe4>
    if ( USBH_Get_CfgDesc(phost, 
 800339a:	2109      	movs	r1, #9
 800339c:	f000 fa52 	bl	8003844 <USBH_Get_CfgDesc>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	f47f af7f 	bne.w	80032a4 <USBH_Process+0x4e>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 80033a6:	2304      	movs	r3, #4
 80033a8:	e7e4      	b.n	8003374 <USBH_Process+0x11e>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 80033aa:	f8b0 1334 	ldrh.w	r1, [r0, #820]	; 0x334
 80033ae:	f000 fa49 	bl	8003844 <USBH_Get_CfgDesc>
 80033b2:	2800      	cmp	r0, #0
 80033b4:	f47f af76 	bne.w	80032a4 <USBH_Process+0x4e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 80033b8:	2305      	movs	r3, #5
 80033ba:	e7db      	b.n	8003374 <USBH_Process+0x11e>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 80033bc:	f890 132e 	ldrb.w	r1, [r0, #814]	; 0x32e
 80033c0:	b161      	cbz	r1, 80033dc <USBH_Process+0x186>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 80033c2:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80033c6:	23ff      	movs	r3, #255	; 0xff
 80033c8:	f000 fad3 	bl	8003972 <USBH_Get_StringDesc>
 80033cc:	4602      	mov	r2, r0
 80033ce:	2800      	cmp	r0, #0
 80033d0:	f47f af68 	bne.w	80032a4 <USBH_Process+0x4e>
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80033d4:	2306      	movs	r3, #6
 80033d6:	7063      	strb	r3, [r4, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 80033d8:	2105      	movs	r1, #5
 80033da:	e75f      	b.n	800329c <USBH_Process+0x46>
      }
    }
    else
    {
     USBH_UsrLog("Manufacturer : N/A");      
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 80033dc:	2306      	movs	r3, #6
      }
    }
    else
    {
      USBH_UsrLog("Product : N/A");
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 80033de:	7063      	strb	r3, [r4, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	e7f9      	b.n	80033d8 <USBH_Process+0x182>
    if (phost->device.DevDesc.iProduct != 0)
 80033e4:	f890 132f 	ldrb.w	r1, [r0, #815]	; 0x32f
 80033e8:	b149      	cbz	r1, 80033fe <USBH_Process+0x1a8>
      if ( USBH_Get_StringDesc(phost,
 80033ea:	23ff      	movs	r3, #255	; 0xff
 80033ec:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80033f0:	f000 fabf 	bl	8003972 <USBH_Get_StringDesc>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	f47f af55 	bne.w	80032a4 <USBH_Process+0x4e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 80033fa:	2307      	movs	r3, #7
 80033fc:	e7ba      	b.n	8003374 <USBH_Process+0x11e>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 80033fe:	2307      	movs	r3, #7
 8003400:	e7ed      	b.n	80033de <USBH_Process+0x188>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 8003402:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 8003406:	b189      	cbz	r1, 800342c <USBH_Process+0x1d6>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8003408:	23ff      	movs	r3, #255	; 0xff
 800340a:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800340e:	f000 fab0 	bl	8003972 <USBH_Get_StringDesc>
 8003412:	2800      	cmp	r0, #0
 8003414:	f47f af46 	bne.w	80032a4 <USBH_Process+0x4e>
      phost->device.current_interface = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 800341e:	f894 3331 	ldrb.w	r3, [r4, #817]	; 0x331
 8003422:	2b01      	cmp	r3, #1
 8003424:	d109      	bne.n	800343a <USBH_Process+0x1e4>
        phost->gState  = HOST_SET_CONFIGURATION;        
 8003426:	2308      	movs	r3, #8
        phost->gState  = HOST_CLASS;        
 8003428:	7023      	strb	r3, [r4, #0]
 800342a:	e73b      	b.n	80032a4 <USBH_Process+0x4e>
    else
    {
      USBH_UsrLog("Serial Number : N/A"); 
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800342c:	460a      	mov	r2, r1
 800342e:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003432:	2105      	movs	r1, #5
 8003434:	f000 fba6 	bl	8003b84 <osMessagePut>
 8003438:	e7ee      	b.n	8003418 <USBH_Process+0x1c2>
        phost->gState  = HOST_INPUT; 
 800343a:	2307      	movs	r3, #7
 800343c:	e7f4      	b.n	8003428 <USBH_Process+0x1d2>
      if(phost->pUser != NULL)
 800343e:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8003442:	2b00      	cmp	r3, #0
 8003444:	f43f af2e 	beq.w	80032a4 <USBH_Process+0x4e>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8003448:	2101      	movs	r1, #1
 800344a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800344c:	2308      	movs	r3, #8
        phost->gState  = HOST_ABORT_STATE;
 800344e:	7023      	strb	r3, [r4, #0]
 8003450:	e7c6      	b.n	80033e0 <USBH_Process+0x18a>
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8003452:	f890 1337 	ldrb.w	r1, [r0, #823]	; 0x337
 8003456:	f000 fac1 	bl	80039dc <USBH_SetCfg>
 800345a:	2800      	cmp	r0, #0
 800345c:	f47f af22 	bne.w	80032a4 <USBH_Process+0x4e>
      phost->gState  = HOST_CHECK_CLASS;
 8003460:	2309      	movs	r3, #9
 8003462:	e7e1      	b.n	8003428 <USBH_Process+0x1d2>
    if(phost->ClassNumber == 0)
 8003464:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0b9      	beq.n	80033e0 <USBH_Process+0x18a>
      phost->pActiveClass = NULL;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8003472:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
 8003476:	f890 2341 	ldrb.w	r2, [r0, #833]	; 0x341
 800347a:	7919      	ldrb	r1, [r3, #4]
 800347c:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 800347e:	bf08      	it	eq
 8003480:	f8c0 3374 	streq.w	r3, [r0, #884]	; 0x374
      if(phost->pActiveClass != NULL)
 8003484:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003488:	b153      	cbz	r3, 80034a0 <USBH_Process+0x24a>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4798      	blx	r3
 800348e:	b938      	cbnz	r0, 80034a0 <USBH_Process+0x24a>
          phost->gState  = HOST_CLASS_REQUEST; 
 8003490:	2306      	movs	r3, #6
 8003492:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8003494:	2103      	movs	r1, #3
 8003496:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800349a:	4620      	mov	r0, r4
 800349c:	4798      	blx	r3
 800349e:	e79f      	b.n	80033e0 <USBH_Process+0x18a>
        phost->gState  = HOST_ABORT_STATE;
 80034a0:	230c      	movs	r3, #12
 80034a2:	e7d4      	b.n	800344e <USBH_Process+0x1f8>
    if(phost->pActiveClass != NULL)
 80034a4:	f8d0 2374 	ldr.w	r2, [r0, #884]	; 0x374
 80034a8:	b152      	cbz	r2, 80034c0 <USBH_Process+0x26a>
      status = phost->pActiveClass->Requests(phost);
 80034aa:	6913      	ldr	r3, [r2, #16]
 80034ac:	4798      	blx	r3
 80034ae:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 80034b2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f47f aef4 	bne.w	80032a4 <USBH_Process+0x4e>
        phost->gState  = HOST_CLASS;        
 80034bc:	230a      	movs	r3, #10
 80034be:	e7b3      	b.n	8003428 <USBH_Process+0x1d2>
      phost->gState  = HOST_ABORT_STATE;
 80034c0:	230c      	movs	r3, #12
 80034c2:	7003      	strb	r3, [r0, #0]
 80034c4:	e788      	b.n	80033d8 <USBH_Process+0x182>
    if(phost->pActiveClass != NULL)
 80034c6:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f43f aeea 	beq.w	80032a4 <USBH_Process+0x4e>
      phost->pActiveClass->BgndProcess(phost);
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	4798      	blx	r3
 80034d4:	e6e6      	b.n	80032a4 <USBH_Process+0x4e>
    DeInitStateMachine(phost);  
 80034d6:	f7ff fe2a 	bl	800312e <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 80034da:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f43f aee0 	beq.w	80032a4 <USBH_Process+0x4e>
      phost->pActiveClass->DeInit(phost); 
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	4620      	mov	r0, r4
 80034e8:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 return USBH_OK;  
 80034f0:	e6d8      	b.n	80032a4 <USBH_Process+0x4e>

080034f2 <USBH_Process_OS>:
  * @brief  USB Host Thread task
  * @param  pvParameters not used
  * @retval None
  */
static void USBH_Process_OS(void const * argument)
{
 80034f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034f4:	4604      	mov	r4, r0
  osEvent event;
  
  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 80034f6:	f04f 32ff 	mov.w	r2, #4294967295
 80034fa:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 80034fe:	a801      	add	r0, sp, #4
 8003500:	f000 fb68 	bl	8003bd4 <osMessageGet>
    
    if( event.status == osEventMessage )
 8003504:	9b01      	ldr	r3, [sp, #4]
 8003506:	2b10      	cmp	r3, #16
 8003508:	d1f5      	bne.n	80034f6 <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fea3 	bl	8003256 <USBH_Process>
 8003510:	e7f1      	b.n	80034f6 <USBH_Process_OS+0x4>

08003512 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8003512:	f8c0 13b8 	str.w	r1, [r0, #952]	; 0x3b8
 8003516:	4770      	bx	lr

08003518 <USBH_LL_IncTimer>:
  phost->Timer ++;
 8003518:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 800351c:	3201      	adds	r2, #1
 800351e:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8003522:	7802      	ldrb	r2, [r0, #0]
 8003524:	2a0a      	cmp	r2, #10
 8003526:	d104      	bne.n	8003532 <USBH_LL_IncTimer+0x1a>
 8003528:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 800352c:	b10b      	cbz	r3, 8003532 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	4718      	bx	r3
 8003532:	4770      	bx	lr

08003534 <USBH_LL_Connect>:
  if(phost->gState == HOST_IDLE )
 8003534:	7803      	ldrb	r3, [r0, #0]
{
 8003536:	b510      	push	{r4, lr}
 8003538:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 800353a:	b97b      	cbnz	r3, 800355c <USBH_LL_Connect+0x28>
    phost->device.is_connected = 1;
 800353c:	2301      	movs	r3, #1
 800353e:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8003542:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8003546:	b10b      	cbz	r3, 800354c <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 8003548:	2104      	movs	r1, #4
 800354a:	4798      	blx	r3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2101      	movs	r1, #1
 8003550:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8003554:	f000 fb16 	bl	8003b84 <osMessagePut>
}
 8003558:	2000      	movs	r0, #0
 800355a:	bd10      	pop	{r4, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 800355c:	7803      	ldrb	r3, [r0, #0]
 800355e:	2b01      	cmp	r3, #1
    phost->gState = HOST_DEV_ATTACHED ;
 8003560:	bf04      	itt	eq
 8003562:	2302      	moveq	r3, #2
 8003564:	7003      	strbeq	r3, [r0, #0]
 8003566:	e7f1      	b.n	800354c <USBH_LL_Connect+0x18>

08003568 <USBH_LL_Disconnect>:
{
 8003568:	b510      	push	{r4, lr}
 800356a:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);  
 800356c:	f002 fb6a 	bl	8005c44 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8003570:	7921      	ldrb	r1, [r4, #4]
 8003572:	4620      	mov	r0, r4
 8003574:	f000 fad9 	bl	8003b2a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8003578:	7961      	ldrb	r1, [r4, #5]
 800357a:	4620      	mov	r0, r4
 800357c:	f000 fad5 	bl	8003b2a <USBH_FreePipe>
  phost->device.is_connected = 0; 
 8003580:	2300      	movs	r3, #0
 8003582:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 8003586:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800358a:	b113      	cbz	r3, 8003592 <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800358c:	2105      	movs	r1, #5
 800358e:	4620      	mov	r0, r4
 8003590:	4798      	blx	r3
  USBH_LL_Start(phost);
 8003592:	4620      	mov	r0, r4
 8003594:	f002 fb48 	bl	8005c28 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 8003598:	2303      	movs	r3, #3
 800359a:	7023      	strb	r3, [r4, #0]
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800359c:	2200      	movs	r2, #0
 800359e:	2101      	movs	r1, #1
 80035a0:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 80035a4:	f000 faee 	bl	8003b84 <osMessagePut>
}
 80035a8:	2000      	movs	r0, #0
 80035aa:	bd10      	pop	{r4, pc}

080035ac <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 80035ac:	b508      	push	{r3, lr}
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2102      	movs	r1, #2
 80035b2:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80035b6:	f000 fae5 	bl	8003b84 <osMessagePut>
  return USBH_OK;
}
 80035ba:	2000      	movs	r0, #0
 80035bc:	bd08      	pop	{r3, pc}

080035be <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 80035be:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 80035c0:	7885      	ldrb	r5, [r0, #2]
 80035c2:	2d01      	cmp	r5, #1
{
 80035c4:	4604      	mov	r4, r0
  switch (phost->RequestState)
 80035c6:	d003      	beq.n	80035d0 <USBH_CtlReq+0x12>
 80035c8:	2d02      	cmp	r5, #2
 80035ca:	d00d      	beq.n	80035e8 <USBH_CtlReq+0x2a>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80035cc:	2001      	movs	r0, #1
  return status;
 80035ce:	e04a      	b.n	8003666 <USBH_CtlReq+0xa8>
    phost->RequestState = CMD_WAIT;
 80035d0:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 80035d2:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 80035d4:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;  
 80035d6:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 80035d8:	7083      	strb	r3, [r0, #2]
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2103      	movs	r1, #3
 80035de:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 80035e2:	f000 facf 	bl	8003b84 <osMessagePut>
 80035e6:	e7f1      	b.n	80035cc <USBH_CtlReq+0xe>
  switch (phost->Control.state)
 80035e8:	7e03      	ldrb	r3, [r0, #24]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	2b0a      	cmp	r3, #10
 80035ee:	d8ed      	bhi.n	80035cc <USBH_CtlReq+0xe>
 80035f0:	e8df f003 	tbb	[pc, r3]
 80035f4:	2b210e06 	.word	0x2b210e06
 80035f8:	6f65473b 	.word	0x6f65473b
 80035fc:	9589      	.short	0x9589
 80035fe:	a0          	.byte	0xa0
 80035ff:	00          	.byte	0x00
    USBH_CtlSendSetup     (phost, 
 8003600:	7942      	ldrb	r2, [r0, #5]
 8003602:	f100 0110 	add.w	r1, r0, #16
 8003606:	f000 fa05 	bl	8003a14 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT; 
 800360a:	2302      	movs	r3, #2
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800360c:	7623      	strb	r3, [r4, #24]
 800360e:	e7dd      	b.n	80035cc <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8003610:	7941      	ldrb	r1, [r0, #5]
 8003612:	f002 fb85 	bl	8005d20 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003616:	2801      	cmp	r0, #1
 8003618:	f040 8088 	bne.w	800372c <USBH_CtlReq+0x16e>
      if (phost->Control.setup.b.wLength.w != 0 )
 800361c:	8ae2      	ldrh	r2, [r4, #22]
 800361e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8003622:	b122      	cbz	r2, 800362e <USBH_CtlReq+0x70>
        if (direction == USB_D2H)
 8003624:	2b00      	cmp	r3, #0
 8003626:	da3a      	bge.n	800369e <USBH_CtlReq+0xe0>
          phost->Control.state = CTRL_DATA_IN;
 8003628:	2303      	movs	r3, #3
      phost->Control.state = CTRL_STATUS_OUT;
 800362a:	7623      	strb	r3, [r4, #24]
 800362c:	e7d5      	b.n	80035da <USBH_CtlReq+0x1c>
        if (direction == USB_D2H)
 800362e:	2b00      	cmp	r3, #0
 8003630:	da2c      	bge.n	800368c <USBH_CtlReq+0xce>
      phost->Control.state = CTRL_STATUS_OUT;
 8003632:	2309      	movs	r3, #9
 8003634:	e7f9      	b.n	800362a <USBH_CtlReq+0x6c>
     phost->Control.timer = phost->Timer;
 8003636:	f8d0 33b8 	ldr.w	r3, [r0, #952]	; 0x3b8
 800363a:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 800363c:	8982      	ldrh	r2, [r0, #12]
 800363e:	7903      	ldrb	r3, [r0, #4]
 8003640:	6881      	ldr	r1, [r0, #8]
 8003642:	f000 fa0f 	bl	8003a64 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8003646:	2304      	movs	r3, #4
 8003648:	e7e0      	b.n	800360c <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800364a:	7901      	ldrb	r1, [r0, #4]
 800364c:	f002 fb68 	bl	8005d20 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003650:	2801      	cmp	r0, #1
 8003652:	d0ee      	beq.n	8003632 <USBH_CtlReq+0x74>
    if  (URB_Status == USBH_URB_STALL) 
 8003654:	2805      	cmp	r0, #5
 8003656:	d169      	bne.n	800372c <USBH_CtlReq+0x16e>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	2103      	movs	r1, #3
 800365c:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8003660:	f000 fa90 	bl	8003b84 <osMessagePut>
      status = USBH_NOT_SUPPORTED;
 8003664:	2003      	movs	r0, #3
}
 8003666:	b003      	add	sp, #12
 8003668:	bd30      	pop	{r4, r5, pc}
    USBH_CtlSendData (phost,
 800366a:	2501      	movs	r5, #1
 800366c:	7943      	ldrb	r3, [r0, #5]
 800366e:	8982      	ldrh	r2, [r0, #12]
 8003670:	9500      	str	r5, [sp, #0]
 8003672:	6881      	ldr	r1, [r0, #8]
 8003674:	f000 f9df 	bl	8003a36 <USBH_CtlSendData>
     phost->Control.timer = phost->Timer;
 8003678:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 800367c:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800367e:	2306      	movs	r3, #6
 8003680:	e7c4      	b.n	800360c <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8003682:	7941      	ldrb	r1, [r0, #5]
 8003684:	f002 fb4c 	bl	8005d20 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003688:	2801      	cmp	r0, #1
 800368a:	d101      	bne.n	8003690 <USBH_CtlReq+0xd2>
      phost->Control.state = CTRL_STATUS_IN;
 800368c:	2307      	movs	r3, #7
 800368e:	e7cc      	b.n	800362a <USBH_CtlReq+0x6c>
    else if  (URB_Status == USBH_URB_STALL) 
 8003690:	2805      	cmp	r0, #5
 8003692:	d102      	bne.n	800369a <USBH_CtlReq+0xdc>
      phost->Control.state = CTRL_STALLED; 
 8003694:	230c      	movs	r3, #12
 8003696:	7623      	strb	r3, [r4, #24]
 8003698:	e7de      	b.n	8003658 <USBH_CtlReq+0x9a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800369a:	2802      	cmp	r0, #2
 800369c:	d101      	bne.n	80036a2 <USBH_CtlReq+0xe4>
      phost->Control.state = CTRL_DATA_OUT;
 800369e:	2305      	movs	r3, #5
 80036a0:	e7c3      	b.n	800362a <USBH_CtlReq+0x6c>
    else if (URB_Status == USBH_URB_ERROR)
 80036a2:	2804      	cmp	r0, #4
 80036a4:	d192      	bne.n	80035cc <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 80036a6:	230b      	movs	r3, #11
 80036a8:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2103      	movs	r1, #3
 80036ae:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 80036b2:	f000 fa67 	bl	8003b84 <osMessagePut>
      phost->RequestState = CMD_SEND;
 80036b6:	2301      	movs	r3, #1
 80036b8:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 80036ba:	2002      	movs	r0, #2
 80036bc:	e7d3      	b.n	8003666 <USBH_CtlReq+0xa8>
    USBH_CtlReceiveData (phost,
 80036be:	2200      	movs	r2, #0
 80036c0:	7903      	ldrb	r3, [r0, #4]
 80036c2:	4611      	mov	r1, r2
 80036c4:	f000 f9ce 	bl	8003a64 <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 80036c8:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 80036cc:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80036ce:	2308      	movs	r3, #8
 80036d0:	e79c      	b.n	800360c <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 80036d2:	7901      	ldrb	r1, [r0, #4]
 80036d4:	f002 fb24 	bl	8005d20 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80036d8:	2801      	cmp	r0, #1
 80036da:	d10c      	bne.n	80036f6 <USBH_CtlReq+0x138>
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
    if  (URB_Status == USBH_URB_DONE)
    { 
      status = USBH_OK;      
      phost->Control.state = CTRL_COMPLETE; 
 80036dc:	230d      	movs	r3, #13
 80036de:	7623      	strb	r3, [r4, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80036e0:	2200      	movs	r2, #0
 80036e2:	2103      	movs	r1, #3
 80036e4:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 80036e8:	f000 fa4c 	bl	8003b84 <osMessagePut>
      phost->RequestState = CMD_SEND;
 80036ec:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 80036ee:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 80036f0:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 80036f2:	7620      	strb	r0, [r4, #24]
 80036f4:	e7b7      	b.n	8003666 <USBH_CtlReq+0xa8>
    else if (URB_Status == USBH_URB_ERROR)
 80036f6:	2804      	cmp	r0, #4
 80036f8:	d101      	bne.n	80036fe <USBH_CtlReq+0x140>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }      
    else if (URB_Status == USBH_URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR; 
 80036fa:	230b      	movs	r3, #11
 80036fc:	e795      	b.n	800362a <USBH_CtlReq+0x6c>
     else if(URB_Status == USBH_URB_STALL)
 80036fe:	2805      	cmp	r0, #5
 8003700:	f47f af64 	bne.w	80035cc <USBH_CtlReq+0xe>
 8003704:	e7a8      	b.n	8003658 <USBH_CtlReq+0x9a>
    USBH_CtlSendData (phost,
 8003706:	2200      	movs	r2, #0
 8003708:	2501      	movs	r5, #1
 800370a:	7943      	ldrb	r3, [r0, #5]
 800370c:	9500      	str	r5, [sp, #0]
 800370e:	4611      	mov	r1, r2
 8003710:	f000 f991 	bl	8003a36 <USBH_CtlSendData>
     phost->Control.timer = phost->Timer;
 8003714:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003718:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800371a:	230a      	movs	r3, #10
 800371c:	e776      	b.n	800360c <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 800371e:	7941      	ldrb	r1, [r0, #5]
 8003720:	f002 fafe 	bl	8005d20 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003724:	2801      	cmp	r0, #1
 8003726:	d0d9      	beq.n	80036dc <USBH_CtlReq+0x11e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003728:	2802      	cmp	r0, #2
 800372a:	d082      	beq.n	8003632 <USBH_CtlReq+0x74>
    else if (URB_Status == USBH_URB_ERROR)
 800372c:	2804      	cmp	r0, #4
 800372e:	f47f af4d 	bne.w	80035cc <USBH_CtlReq+0xe>
 8003732:	e7e2      	b.n	80036fa <USBH_CtlReq+0x13c>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8003734:	7e43      	ldrb	r3, [r0, #25]
 8003736:	3301      	adds	r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	7643      	strb	r3, [r0, #25]
 800373e:	d805      	bhi.n	800374c <USBH_CtlReq+0x18e>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8003740:	f002 fa80 	bl	8005c44 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8003744:	2001      	movs	r0, #1
 8003746:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8003748:	70a0      	strb	r0, [r4, #2]
 800374a:	e78c      	b.n	8003666 <USBH_CtlReq+0xa8>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800374c:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8003750:	2106      	movs	r1, #6
 8003752:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	7663      	strb	r3, [r4, #25]
 8003758:	e7ad      	b.n	80036b6 <USBH_CtlReq+0xf8>

0800375a <USBH_GetDescriptor>:
{ 
 800375a:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 800375c:	7884      	ldrb	r4, [r0, #2]
{ 
 800375e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8003762:	2c01      	cmp	r4, #1
 8003764:	d110      	bne.n	8003788 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8003766:	f061 047f 	orn	r4, r1, #127	; 0x7f
 800376a:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 800376c:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8003770:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8003774:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003776:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409;
 800377a:	bf0c      	ite	eq
 800377c:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0;
 8003780:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003782:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0;
 8003784:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length; 
 8003786:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff , length );     
 8003788:	462a      	mov	r2, r5
 800378a:	4619      	mov	r1, r3
}
 800378c:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff , length );     
 800378e:	f7ff bf16 	b.w	80035be <USBH_CtlReq>

08003792 <USBH_Get_DevDesc>:
{
 8003792:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8003794:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003798:	460d      	mov	r5, r1
 800379a:	9100      	str	r1, [sp, #0]
 800379c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a0:	2100      	movs	r1, #0
{
 80037a2:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80037a4:	f7ff ffd9 	bl	800375a <USBH_GetDescriptor>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d149      	bne.n	8003840 <USBH_Get_DevDesc+0xae>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80037ac:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80037b0:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80037b4:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 80037b8:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80037bc:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
 80037c0:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80037c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80037c8:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80037cc:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 80037d0:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80037d4:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 80037d8:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80037dc:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 80037e0:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  if (length > 8)
 80037e4:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80037e6:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 80037ea:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  if (length > 8)
 80037ee:	d927      	bls.n	8003840 <USBH_Get_DevDesc+0xae>
    dev_desc->idVendor           = LE16 (buf +  8);
 80037f0:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 80037f4:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 80037f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80037fc:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    dev_desc->idProduct          = LE16 (buf + 10);
 8003800:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
 8003804:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8003808:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800380c:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003810:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
 8003814:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8003818:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800381c:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8003820:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8003824:	f884 332e 	strb.w	r3, [r4, #814]	; 0x32e
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8003828:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800382c:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8003830:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003834:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8003838:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800383c:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
}
 8003840:	b003      	add	sp, #12
 8003842:	bd30      	pop	{r4, r5, pc}

08003844 <USBH_Get_CfgDesc>:
{
 8003844:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pData = phost->device.CfgDesc_Raw;
 8003848:	f100 051c 	add.w	r5, r0, #28
{
 800384c:	460f      	mov	r7, r1
  if((status = USBH_GetDescriptor(phost,
 800384e:	9100      	str	r1, [sp, #0]
 8003850:	462b      	mov	r3, r5
 8003852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003856:	2100      	movs	r1, #0
{
 8003858:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800385a:	f7ff ff7e 	bl	800375a <USBH_GetDescriptor>
 800385e:	bb68      	cbnz	r0, 80038bc <USBH_Get_CfgDesc+0x78>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8003860:	7f23      	ldrb	r3, [r4, #28]
 8003862:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8003866:	7f63      	ldrb	r3, [r4, #29]
 8003868:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800386c:	7fa6      	ldrb	r6, [r4, #30]
 800386e:	7fe3      	ldrb	r3, [r4, #31]
 8003870:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8003874:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003878:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800387c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003880:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8003884:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003888:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800388c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8003890:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003894:	b2b6      	uxth	r6, r6
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8003896:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800389a:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800389e:	2f09      	cmp	r7, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80038a0:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80038a4:	d90a      	bls.n	80038bc <USBH_Get_CfgDesc+0x78>
 80038a6:	4622      	mov	r2, r4
 80038a8:	462b      	mov	r3, r5
 80038aa:	4686      	mov	lr, r0
 80038ac:	2109      	movs	r1, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80038ae:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80038b2:	f1be 0f02 	cmp.w	lr, #2
 80038b6:	d001      	beq.n	80038bc <USBH_Get_CfgDesc+0x78>
 80038b8:	428e      	cmp	r6, r1
 80038ba:	d802      	bhi.n	80038c2 <USBH_Get_CfgDesc+0x7e>
}
 80038bc:	b002      	add	sp, #8
 80038be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80038c2:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80038c4:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80038c6:	4429      	add	r1, r5
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80038c8:	785d      	ldrb	r5, [r3, #1]
 80038ca:	2d04      	cmp	r5, #4
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80038cc:	b289      	uxth	r1, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80038ce:	d1f0      	bne.n	80038b2 <USBH_Get_CfgDesc+0x6e>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80038d0:	781d      	ldrb	r5, [r3, #0]
 80038d2:	f882 533c 	strb.w	r5, [r2, #828]	; 0x33c
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80038d6:	785d      	ldrb	r5, [r3, #1]
 80038d8:	f882 533d 	strb.w	r5, [r2, #829]	; 0x33d
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80038dc:	789d      	ldrb	r5, [r3, #2]
 80038de:	f882 533e 	strb.w	r5, [r2, #830]	; 0x33e
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80038e2:	78dd      	ldrb	r5, [r3, #3]
 80038e4:	f882 533f 	strb.w	r5, [r2, #831]	; 0x33f
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80038e8:	791d      	ldrb	r5, [r3, #4]
 80038ea:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80038ee:	795d      	ldrb	r5, [r3, #5]
 80038f0:	f882 5341 	strb.w	r5, [r2, #833]	; 0x341
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80038f4:	799d      	ldrb	r5, [r3, #6]
 80038f6:	f882 5342 	strb.w	r5, [r2, #834]	; 0x342
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80038fa:	79dd      	ldrb	r5, [r3, #7]
 80038fc:	f882 5343 	strb.w	r5, [r2, #835]	; 0x343
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8003900:	7a1d      	ldrb	r5, [r3, #8]
 8003902:	f882 5344 	strb.w	r5, [r2, #836]	; 0x344
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003906:	fb08 f90e 	mul.w	r9, r8, lr
        ep_ix = 0;
 800390a:	2500      	movs	r5, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800390c:	f892 7340 	ldrb.w	r7, [r2, #832]	; 0x340
 8003910:	42bd      	cmp	r5, r7
 8003912:	db03      	blt.n	800391c <USBH_Get_CfgDesc+0xd8>
 8003914:	f10e 0e01 	add.w	lr, lr, #1
 8003918:	321a      	adds	r2, #26
 800391a:	e7ca      	b.n	80038b2 <USBH_Get_CfgDesc+0x6e>
 800391c:	428e      	cmp	r6, r1
 800391e:	d9f9      	bls.n	8003914 <USBH_Get_CfgDesc+0xd0>
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8003920:	781f      	ldrb	r7, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8003922:	443b      	add	r3, r7
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8003924:	4439      	add	r1, r7
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8003926:	785f      	ldrb	r7, [r3, #1]
 8003928:	2f05      	cmp	r7, #5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800392a:	b289      	uxth	r1, r1
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 800392c:	d1ee      	bne.n	800390c <USBH_Get_CfgDesc+0xc8>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800392e:	1c6f      	adds	r7, r5, #1
 8003930:	eb09 05c7 	add.w	r5, r9, r7, lsl #3
 8003934:	4425      	add	r5, r4
 8003936:	f893 c000 	ldrb.w	ip, [r3]
 800393a:	f885 c33e 	strb.w	ip, [r5, #830]	; 0x33e
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800393e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8003942:	f885 c33f 	strb.w	ip, [r5, #831]	; 0x33f
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8003946:	f893 c002 	ldrb.w	ip, [r3, #2]
 800394a:	f885 c340 	strb.w	ip, [r5, #832]	; 0x340
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800394e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8003952:	f885 c341 	strb.w	ip, [r5, #833]	; 0x341
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8003956:	f893 a005 	ldrb.w	sl, [r3, #5]
 800395a:	f893 c004 	ldrb.w	ip, [r3, #4]
 800395e:	eb0c 2c0a 	add.w	ip, ip, sl, lsl #8
 8003962:	f8a5 c342 	strh.w	ip, [r5, #834]	; 0x342
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8003966:	f893 c006 	ldrb.w	ip, [r3, #6]
 800396a:	f885 c344 	strb.w	ip, [r5, #836]	; 0x344
            ep_ix++;
 800396e:	b27d      	sxtb	r5, r7
 8003970:	e7cc      	b.n	800390c <USBH_Get_CfgDesc+0xc8>

08003972 <USBH_Get_StringDesc>:
{
 8003972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8003974:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8003978:	4614      	mov	r4, r2
 800397a:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8003982:	462b      	mov	r3, r5
 8003984:	2100      	movs	r1, #0
{
 8003986:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8003988:	f7ff fee7 	bl	800375a <USBH_GetDescriptor>
 800398c:	b978      	cbnz	r0, 80039ae <USBH_Get_StringDesc+0x3c>
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 800398e:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8003992:	2b03      	cmp	r3, #3
 8003994:	d10b      	bne.n	80039ae <USBH_Get_StringDesc+0x3c>
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8003996:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800399a:	3b02      	subs	r3, #2
 800399c:	42bb      	cmp	r3, r7
 800399e:	bfa8      	it	ge
 80039a0:	463b      	movge	r3, r7
 80039a2:	b29b      	uxth	r3, r3
    for (idx = 0; idx < strlength; idx+=2 )
 80039a4:	4602      	mov	r2, r0
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d803      	bhi.n	80039b2 <USBH_Get_StringDesc+0x40>
    *pdest = 0; /* mark end of string */  
 80039aa:	2300      	movs	r3, #0
 80039ac:	7023      	strb	r3, [r4, #0]
}
 80039ae:	b003      	add	sp, #12
 80039b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80039b2:	18a9      	adds	r1, r5, r2
    for (idx = 0; idx < strlength; idx+=2 )
 80039b4:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 80039b6:	7889      	ldrb	r1, [r1, #2]
 80039b8:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0; idx < strlength; idx+=2 )
 80039bc:	b292      	uxth	r2, r2
 80039be:	e7f2      	b.n	80039a6 <USBH_Get_StringDesc+0x34>

080039c0 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 80039c0:	7883      	ldrb	r3, [r0, #2]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d106      	bne.n	80039d4 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80039c6:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80039c8:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80039ca:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80039cc:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80039ce:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80039d0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;
 80039d2:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );
 80039d4:	2200      	movs	r2, #0
 80039d6:	4611      	mov	r1, r2
 80039d8:	f7ff bdf1 	b.w	80035be <USBH_CtlReq>

080039dc <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 80039dc:	7883      	ldrb	r3, [r0, #2]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d106      	bne.n	80039f0 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80039e2:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80039e4:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80039e6:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80039e8:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80039ea:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80039ec:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0; 
 80039ee:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );      
 80039f0:	2200      	movs	r2, #0
 80039f2:	4611      	mov	r1, r2
 80039f4:	f7ff bde3 	b.w	80035be <USBH_CtlReq>

080039f8 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 80039f8:	7883      	ldrb	r3, [r0, #2]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d106      	bne.n	8003a0c <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 80039fe:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8003a00:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003a02:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8003a04:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003a06:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8003a08:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8003a0a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4611      	mov	r1, r2
 8003a10:	f7ff bdd5 	b.w	80035be <USBH_CtlReq>

08003a14 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8003a14:	b530      	push	{r4, r5, lr}
 8003a16:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a18:	2400      	movs	r4, #0
{
 8003a1a:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	9302      	str	r3, [sp, #8]
 8003a20:	9101      	str	r1, [sp, #4]
 8003a22:	9403      	str	r4, [sp, #12]
 8003a24:	9400      	str	r4, [sp, #0]
 8003a26:	4623      	mov	r3, r4
 8003a28:	4622      	mov	r2, r4
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f002 f95e 	bl	8005cec <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 8003a30:	4620      	mov	r0, r4
 8003a32:	b005      	add	sp, #20
 8003a34:	bd30      	pop	{r4, r5, pc}

08003a36 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8003a36:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003a38:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003a3c:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003a3e:	2d00      	cmp	r5, #0
{
 8003a40:	461c      	mov	r4, r3
 8003a42:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a46:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8003a48:	bf18      	it	ne
 8003a4a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a4c:	9303      	str	r3, [sp, #12]
 8003a4e:	2301      	movs	r3, #1
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2300      	movs	r3, #0
 8003a54:	9101      	str	r1, [sp, #4]
 8003a56:	461a      	mov	r2, r3
 8003a58:	4621      	mov	r1, r4
 8003a5a:	f002 f947 	bl	8005cec <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 8003a5e:	2000      	movs	r0, #0
 8003a60:	b005      	add	sp, #20
 8003a62:	bd30      	pop	{r4, r5, pc}

08003a64 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003a64:	b530      	push	{r4, r5, lr}
 8003a66:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a68:	2400      	movs	r4, #0
{
 8003a6a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a6c:	9202      	str	r2, [sp, #8]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	9101      	str	r1, [sp, #4]
 8003a72:	9403      	str	r4, [sp, #12]
 8003a74:	9200      	str	r2, [sp, #0]
 8003a76:	4623      	mov	r3, r4
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f002 f937 	bl	8005cec <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 8003a7e:	4620      	mov	r0, r4
 8003a80:	b005      	add	sp, #20
 8003a82:	bd30      	pop	{r4, r5, pc}

08003a84 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 8003a84:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003a86:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{ 
 8003a8a:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003a8c:	2d00      	cmp	r5, #0
{ 
 8003a8e:	461c      	mov	r4, r3
 8003a90:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a94:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8003a96:	bf18      	it	ne
 8003a98:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a9a:	9303      	str	r3, [sp, #12]
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	9101      	str	r1, [sp, #4]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	f002 f920 	bl	8005cec <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8003aac:	2000      	movs	r0, #0
 8003aae:	b005      	add	sp, #20
 8003ab0:	bd30      	pop	{r4, r5, pc}

08003ab2 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003ab2:	b530      	push	{r4, r5, lr}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003ab8:	2400      	movs	r4, #0
 8003aba:	9202      	str	r2, [sp, #8]
 8003abc:	2201      	movs	r2, #1
 8003abe:	9101      	str	r1, [sp, #4]
 8003ac0:	9403      	str	r4, [sp, #12]
 8003ac2:	9200      	str	r2, [sp, #0]
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	f002 f910 	bl	8005cec <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 8003acc:	4620      	mov	r0, r4
 8003ace:	b005      	add	sp, #20
 8003ad0:	bd30      	pop	{r4, r5, pc}

08003ad2 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8003ad2:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8003ad4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003ad8:	9402      	str	r4, [sp, #8]
 8003ada:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003ade:	9401      	str	r4, [sp, #4]
 8003ae0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003ae4:	9400      	str	r4, [sp, #0]
 8003ae6:	f002 f8db 	bl	8005ca0 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 8003aea:	2000      	movs	r0, #0
 8003aec:	b004      	add	sp, #16
 8003aee:	bd10      	pop	{r4, pc}

08003af0 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8003af0:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8003af2:	f002 f8ed 	bl	8005cd0 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 8003af6:	2000      	movs	r0, #0
 8003af8:	bd08      	pop	{r3, pc}

08003afa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8003afa:	b530      	push	{r4, r5, lr}
 8003afc:	2300      	movs	r3, #0
 8003afe:	f500 745f 	add.w	r4, r0, #892	; 0x37c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8003b02:	f854 5b04 	ldr.w	r5, [r4], #4
 8003b06:	042d      	lsls	r5, r5, #16
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	d408      	bmi.n	8003b1e <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8003b0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003b10:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 8003b14:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8003b16:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
}
 8003b1a:	b2d0      	uxtb	r0, r2
 8003b1c:	bd30      	pop	{r4, r5, pc}
 8003b1e:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 8003b20:	2b0b      	cmp	r3, #11
 8003b22:	d1ee      	bne.n	8003b02 <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 8003b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b28:	e7f7      	b.n	8003b1a <USBH_AllocPipe+0x20>

08003b2a <USBH_FreePipe>:
   if(idx < 11)
 8003b2a:	290a      	cmp	r1, #10
 8003b2c:	bf9f      	itttt	ls
 8003b2e:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 8003b32:	f8d0 337c 	ldrls.w	r3, [r0, #892]	; 0x37c
 8003b36:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8003b3a:	f8c0 337c 	strls.w	r3, [r0, #892]	; 0x37c
}
 8003b3e:	2000      	movs	r0, #0
 8003b40:	4770      	bx	lr

08003b42 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b42:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003b44:	f000 ff86 	bl	8004a54 <vTaskStartScheduler>
  
  return osOK;
}
 8003b48:	2000      	movs	r0, #0
 8003b4a:	bd08      	pop	{r3, pc}

08003b4c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b4c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b4e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8003b52:	8a02      	ldrh	r2, [r0, #16]
{
 8003b54:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b56:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8003b5a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8003b5c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003b5e:	bf14      	ite	ne
 8003b60:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b62:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b64:	a803      	add	r0, sp, #12
 8003b66:	9001      	str	r0, [sp, #4]
 8003b68:	9400      	str	r4, [sp, #0]
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	f000 fea2 	bl	80048b4 <xTaskCreate>
 8003b70:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b72:	bf0c      	ite	eq
 8003b74:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8003b76:	2000      	movne	r0, #0
}
 8003b78:	b005      	add	sp, #20
 8003b7a:	bd30      	pop	{r4, r5, pc}

08003b7c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	c803      	ldmia	r0, {r0, r1}
 8003b80:	f000 bbe8 	b.w	8004354 <xQueueGenericCreate>

08003b84 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8003b86:	2400      	movs	r4, #0
{
 8003b88:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003b8a:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8003b8c:	42a2      	cmp	r2, r4
 8003b8e:	bf08      	it	eq
 8003b90:	2201      	moveq	r2, #1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b92:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8003b96:	b1ab      	cbz	r3, 8003bc4 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003b98:	4623      	mov	r3, r4
 8003b9a:	aa03      	add	r2, sp, #12
 8003b9c:	a901      	add	r1, sp, #4
 8003b9e:	f000 fcb1 	bl	8004504 <xQueueGenericSendFromISR>
 8003ba2:	2801      	cmp	r0, #1
 8003ba4:	d002      	beq.n	8003bac <osMessagePut+0x28>
      return osErrorOS;
 8003ba6:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8003bac:	9b03      	ldr	r3, [sp, #12]
 8003bae:	b13b      	cbz	r3, 8003bc0 <osMessagePut+0x3c>
 8003bb0:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <osMessagePut+0x4c>)
 8003bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	f3bf 8f6f 	isb	sy
  return osOK;
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	e7f1      	b.n	8003ba8 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003bc4:	a901      	add	r1, sp, #4
 8003bc6:	f000 fbe7 	bl	8004398 <xQueueGenericSend>
 8003bca:	2801      	cmp	r0, #1
 8003bcc:	d1eb      	bne.n	8003ba6 <osMessagePut+0x22>
 8003bce:	e7f7      	b.n	8003bc0 <osMessagePut+0x3c>
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd6:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8003bd8:	2600      	movs	r6, #0
{
 8003bda:	4604      	mov	r4, r0
 8003bdc:	4617      	mov	r7, r2
 8003bde:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8003be0:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8003be2:	9602      	str	r6, [sp, #8]
 8003be4:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8003be6:	b911      	cbnz	r1, 8003bee <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8003be8:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	e017      	b.n	8003c1e <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8003bee:	9600      	str	r6, [sp, #0]
 8003bf0:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8003bf4:	b1d3      	cbz	r3, 8003c2c <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003bf6:	466a      	mov	r2, sp
 8003bf8:	a902      	add	r1, sp, #8
 8003bfa:	f000 fda9 	bl	8004750 <xQueueReceiveFromISR>
 8003bfe:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8003c00:	bf04      	itt	eq
 8003c02:	2310      	moveq	r3, #16
 8003c04:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8003c06:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8003c08:	bf18      	it	ne
 8003c0a:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8003c0c:	b13b      	cbz	r3, 8003c1e <osMessageGet+0x4a>
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <osMessageGet+0x70>)
 8003c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8003c1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003c26:	4620      	mov	r0, r4
 8003c28:	b005      	add	sp, #20
 8003c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003c2c:	a902      	add	r1, sp, #8
 8003c2e:	f000 fccb 	bl	80045c8 <xQueueGenericReceive>
 8003c32:	2801      	cmp	r0, #1
 8003c34:	d101      	bne.n	8003c3a <osMessageGet+0x66>
      event.status = osEventMessage;
 8003c36:	2310      	movs	r3, #16
 8003c38:	e7d7      	b.n	8003bea <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003c3a:	2f00      	cmp	r7, #0
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	2340      	movne	r3, #64	; 0x40
 8003c42:	e7d2      	b.n	8003bea <osMessageGet+0x16>
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003c48:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003c4a:	f001 f995 	bl	8004f78 <xTaskGetSchedulerState>
 8003c4e:	2801      	cmp	r0, #1
 8003c50:	d003      	beq.n	8003c5a <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003c56:	f000 b905 	b.w	8003e64 <xPortSysTickHandler>
 8003c5a:	bd08      	pop	{r3, pc}

08003c5c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c5c:	f100 0308 	add.w	r3, r0, #8
 8003c60:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c62:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c66:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c68:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c6a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c6c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c6e:	6003      	str	r3, [r0, #0]
 8003c70:	4770      	bx	lr

08003c72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	6103      	str	r3, [r0, #16]
 8003c76:	4770      	bx	lr

08003c78 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c78:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c7a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c84:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003c86:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c88:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	6003      	str	r3, [r0, #0]
 8003c8e:	4770      	bx	lr

08003c90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c90:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c92:	1c53      	adds	r3, r2, #1
{
 8003c94:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8003c96:	d10a      	bne.n	8003cae <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c98:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c9e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ca0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ca2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003ca4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ca6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003ca8:	3301      	adds	r3, #1
 8003caa:	6003      	str	r3, [r0, #0]
 8003cac:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cae:	f100 0308 	add.w	r3, r0, #8
 8003cb2:	685c      	ldr	r4, [r3, #4]
 8003cb4:	6825      	ldr	r5, [r4, #0]
 8003cb6:	42aa      	cmp	r2, r5
 8003cb8:	d3ef      	bcc.n	8003c9a <vListInsert+0xa>
 8003cba:	4623      	mov	r3, r4
 8003cbc:	e7f9      	b.n	8003cb2 <vListInsert+0x22>

08003cbe <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cbe:	6841      	ldr	r1, [r0, #4]
 8003cc0:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003cc2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cc4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cc6:	6882      	ldr	r2, [r0, #8]
 8003cc8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cce:	bf08      	it	eq
 8003cd0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	3801      	subs	r0, #1
 8003cda:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003cdc:	4770      	bx	lr
	...

08003ce0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <prvTaskExitError+0x2c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	d008      	beq.n	8003cfa <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	e7fe      	b.n	8003cf8 <prvTaskExitError+0x18>
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	e7fe      	b.n	8003d0a <prvTaskExitError+0x2a>
 8003d0c:	20000024 	.word	0x20000024

08003d10 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003d10:	4806      	ldr	r0, [pc, #24]	; (8003d2c <prvPortStartFirstTask+0x1c>)
 8003d12:	6800      	ldr	r0, [r0, #0]
 8003d14:	6800      	ldr	r0, [r0, #0]
 8003d16:	f380 8808 	msr	MSP, r0
 8003d1a:	b662      	cpsie	i
 8003d1c:	b661      	cpsie	f
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	df00      	svc	0
 8003d28:	bf00      	nop
 8003d2a:	0000      	.short	0x0000
 8003d2c:	e000ed08 	.word	0xe000ed08

08003d30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d40 <vPortEnableVFP+0x10>
 8003d34:	6801      	ldr	r1, [r0, #0]
 8003d36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d3a:	6001      	str	r1, [r0, #0]
 8003d3c:	4770      	bx	lr
 8003d3e:	0000      	.short	0x0000
 8003d40:	e000ed88 	.word	0xe000ed88

08003d44 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d48:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <pxPortInitialiseStack+0x28>)
 8003d4e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d52:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003d56:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d5a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d5e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003d62:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003d66:	3844      	subs	r0, #68	; 0x44
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	08003ce1 	.word	0x08003ce1

08003d70 <SVC_Handler>:
	__asm volatile (
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <pxCurrentTCBConst2>)
 8003d72:	6819      	ldr	r1, [r3, #0]
 8003d74:	6808      	ldr	r0, [r1, #0]
 8003d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7a:	f380 8809 	msr	PSP, r0
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f380 8811 	msr	BASEPRI, r0
 8003d8a:	4770      	bx	lr
 8003d8c:	f3af 8000 	nop.w

08003d90 <pxCurrentTCBConst2>:
 8003d90:	20003ccc 	.word	0x20003ccc

08003d94 <vPortEnterCritical>:
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <vPortEnterCritical+0x3c>)
 8003da6:	6813      	ldr	r3, [r2, #0]
 8003da8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003daa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003dac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003dae:	d10d      	bne.n	8003dcc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003db0:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <vPortEnterCritical+0x40>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003db8:	d008      	beq.n	8003dcc <vPortEnterCritical+0x38>
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	e7fe      	b.n	8003dca <vPortEnterCritical+0x36>
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000024 	.word	0x20000024
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003dd8:	4a08      	ldr	r2, [pc, #32]	; (8003dfc <vPortExitCritical+0x24>)
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	b943      	cbnz	r3, 8003df0 <vPortExitCritical+0x18>
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	e7fe      	b.n	8003dee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003df0:	3b01      	subs	r3, #1
 8003df2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003df4:	b90b      	cbnz	r3, 8003dfa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	4770      	bx	lr
 8003dfc:	20000024 	.word	0x20000024

08003e00 <PendSV_Handler>:
	__asm volatile
 8003e00:	f3ef 8009 	mrs	r0, PSP
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <pxCurrentTCBConst>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	f01e 0f10 	tst.w	lr, #16
 8003e10:	bf08      	it	eq
 8003e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1a:	6010      	str	r0, [r2, #0]
 8003e1c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e24:	f380 8811 	msr	BASEPRI, r0
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f000 ffbc 	bl	8004dac <vTaskSwitchContext>
 8003e34:	f04f 0000 	mov.w	r0, #0
 8003e38:	f380 8811 	msr	BASEPRI, r0
 8003e3c:	bc08      	pop	{r3}
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	6808      	ldr	r0, [r1, #0]
 8003e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e46:	f01e 0f10 	tst.w	lr, #16
 8003e4a:	bf08      	it	eq
 8003e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e50:	f380 8809 	msr	PSP, r0
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	f3af 8000 	nop.w

08003e60 <pxCurrentTCBConst>:
 8003e60:	20003ccc 	.word	0x20003ccc

08003e64 <xPortSysTickHandler>:
{
 8003e64:	b508      	push	{r3, lr}
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003e76:	f000 fe31 	bl	8004adc <xTaskIncrementTick>
 8003e7a:	b118      	cbz	r0, 8003e84 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <xPortSysTickHandler+0x28>)
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e82:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003e84:	2300      	movs	r3, #0
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	bd08      	pop	{r3, pc}
 8003e8c:	e000ed04 	.word	0xe000ed04

08003e90 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <vPortSetupTimerInterrupt+0x1c>)
 8003e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <vPortSetupTimerInterrupt+0x20>)
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <vPortSetupTimerInterrupt+0x24>)
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000028 	.word	0x20000028
 8003eb0:	e000e014 	.word	0xe000e014
 8003eb4:	e000e010 	.word	0xe000e010

08003eb8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <xPortStartScheduler+0xc8>)
 8003eba:	4a32      	ldr	r2, [pc, #200]	; (8003f84 <xPortStartScheduler+0xcc>)
{
 8003ebc:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ebe:	6819      	ldr	r1, [r3, #0]
 8003ec0:	4291      	cmp	r1, r2
 8003ec2:	d108      	bne.n	8003ed6 <xPortStartScheduler+0x1e>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	e7fe      	b.n	8003ed4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <xPortStartScheduler+0xd0>)
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d108      	bne.n	8003ef0 <xPortStartScheduler+0x38>
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	e7fe      	b.n	8003eee <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ef0:	4b26      	ldr	r3, [pc, #152]	; (8003f8c <xPortStartScheduler+0xd4>)
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ef8:	22ff      	movs	r2, #255	; 0xff
 8003efa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003efc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003efe:	4a24      	ldr	r2, [pc, #144]	; (8003f90 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f06:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003f0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f0e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f10:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <xPortStartScheduler+0xdc>)
 8003f12:	2207      	movs	r2, #7
 8003f14:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f16:	2100      	movs	r1, #0
 8003f18:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003f1c:	0600      	lsls	r0, r0, #24
 8003f1e:	f102 34ff 	add.w	r4, r2, #4294967295
 8003f22:	d423      	bmi.n	8003f6c <xPortStartScheduler+0xb4>
 8003f24:	b101      	cbz	r1, 8003f28 <xPortStartScheduler+0x70>
 8003f26:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f2c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003f30:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f32:	9b01      	ldr	r3, [sp, #4]
 8003f34:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <xPortStartScheduler+0xd4>)
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f3a:	4b17      	ldr	r3, [pc, #92]	; (8003f98 <xPortStartScheduler+0xe0>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003f42:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003f4a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003f4c:	f7ff ffa0 	bl	8003e90 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003f50:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <xPortStartScheduler+0xe4>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8003f56:	f7ff feeb 	bl	8003d30 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f5a:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <xPortStartScheduler+0xe8>)
 8003f5c:	6813      	ldr	r3, [r2, #0]
 8003f5e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f62:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003f64:	f7ff fed4 	bl	8003d10 <prvPortStartFirstTask>
	prvTaskExitError();
 8003f68:	f7ff feba 	bl	8003ce0 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f6c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003f70:	0052      	lsls	r2, r2, #1
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	f88d 2003 	strb.w	r2, [sp, #3]
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	e7cc      	b.n	8003f18 <xPortStartScheduler+0x60>
 8003f7e:	bf00      	nop
 8003f80:	e000ed00 	.word	0xe000ed00
 8003f84:	410fc271 	.word	0x410fc271
 8003f88:	410fc270 	.word	0x410fc270
 8003f8c:	e000e400 	.word	0xe000e400
 8003f90:	200000ac 	.word	0x200000ac
 8003f94:	200000b0 	.word	0x200000b0
 8003f98:	e000ed20 	.word	0xe000ed20
 8003f9c:	20000024 	.word	0x20000024
 8003fa0:	e000ef34 	.word	0xe000ef34

08003fa4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003fa4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d90e      	bls.n	8003fca <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fac:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <vPortValidateInterruptPriority+0x4c>)
 8003fae:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fb0:	4a10      	ldr	r2, [pc, #64]	; (8003ff4 <vPortValidateInterruptPriority+0x50>)
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d908      	bls.n	8003fca <vPortValidateInterruptPriority+0x26>
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	e7fe      	b.n	8003fc8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <vPortValidateInterruptPriority+0x54>)
 8003fcc:	4a0b      	ldr	r2, [pc, #44]	; (8003ffc <vPortValidateInterruptPriority+0x58>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d908      	bls.n	8003fec <vPortValidateInterruptPriority+0x48>
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	e7fe      	b.n	8003fea <vPortValidateInterruptPriority+0x46>
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	e000e3f0 	.word	0xe000e3f0
 8003ff4:	200000ac 	.word	0x200000ac
 8003ff8:	e000ed0c 	.word	0xe000ed0c
 8003ffc:	200000b0 	.word	0x200000b0

08004000 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004000:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004002:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <prvInsertBlockIntoFreeList+0x40>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4282      	cmp	r2, r0
 8004008:	d318      	bcc.n	800403c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800400a:	685c      	ldr	r4, [r3, #4]
 800400c:	1919      	adds	r1, r3, r4
 800400e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004010:	bf01      	itttt	eq
 8004012:	6841      	ldreq	r1, [r0, #4]
 8004014:	4618      	moveq	r0, r3
 8004016:	1909      	addeq	r1, r1, r4
 8004018:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800401a:	6844      	ldr	r4, [r0, #4]
 800401c:	1901      	adds	r1, r0, r4
 800401e:	428a      	cmp	r2, r1
 8004020:	d107      	bne.n	8004032 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004022:	4908      	ldr	r1, [pc, #32]	; (8004044 <prvInsertBlockIntoFreeList+0x44>)
 8004024:	6809      	ldr	r1, [r1, #0]
 8004026:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004028:	bf1f      	itttt	ne
 800402a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800402c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800402e:	1909      	addne	r1, r1, r4
 8004030:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004032:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004034:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004036:	bf18      	it	ne
 8004038:	6018      	strne	r0, [r3, #0]
 800403a:	bd10      	pop	{r4, pc}
 800403c:	4613      	mov	r3, r2
 800403e:	e7e1      	b.n	8004004 <prvInsertBlockIntoFreeList+0x4>
 8004040:	20003cc4 	.word	0x20003cc4
 8004044:	200000b4 	.word	0x200000b4

08004048 <pvPortMalloc>:
{
 8004048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800404c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800404e:	f000 fd3d 	bl	8004acc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004052:	493e      	ldr	r1, [pc, #248]	; (800414c <pvPortMalloc+0x104>)
 8004054:	4d3e      	ldr	r5, [pc, #248]	; (8004150 <pvPortMalloc+0x108>)
 8004056:	680b      	ldr	r3, [r1, #0]
 8004058:	bb0b      	cbnz	r3, 800409e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800405a:	4a3e      	ldr	r2, [pc, #248]	; (8004154 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800405c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800405e:	bf1f      	itttt	ne
 8004060:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004062:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004066:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800406a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800406c:	bf14      	ite	ne
 800406e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004070:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004074:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004076:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004078:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800407c:	4e36      	ldr	r6, [pc, #216]	; (8004158 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800407e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004080:	2000      	movs	r0, #0
 8004082:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004084:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8004086:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004088:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800408a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800408c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800408e:	4b33      	ldr	r3, [pc, #204]	; (800415c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004090:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004092:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004094:	4b32      	ldr	r3, [pc, #200]	; (8004160 <pvPortMalloc+0x118>)
 8004096:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004098:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800409c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800409e:	682f      	ldr	r7, [r5, #0]
 80040a0:	4227      	tst	r7, r4
 80040a2:	d116      	bne.n	80040d2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80040a4:	2c00      	cmp	r4, #0
 80040a6:	d041      	beq.n	800412c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80040a8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040ac:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040ae:	bf1c      	itt	ne
 80040b0:	f023 0307 	bicne.w	r3, r3, #7
 80040b4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040b6:	b163      	cbz	r3, 80040d2 <pvPortMalloc+0x8a>
 80040b8:	4a29      	ldr	r2, [pc, #164]	; (8004160 <pvPortMalloc+0x118>)
 80040ba:	6816      	ldr	r6, [r2, #0]
 80040bc:	42b3      	cmp	r3, r6
 80040be:	4690      	mov	r8, r2
 80040c0:	d807      	bhi.n	80040d2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80040c2:	4a25      	ldr	r2, [pc, #148]	; (8004158 <pvPortMalloc+0x110>)
 80040c4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040c6:	6868      	ldr	r0, [r5, #4]
 80040c8:	4283      	cmp	r3, r0
 80040ca:	d804      	bhi.n	80040d6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80040cc:	6809      	ldr	r1, [r1, #0]
 80040ce:	428d      	cmp	r5, r1
 80040d0:	d107      	bne.n	80040e2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80040d2:	2400      	movs	r4, #0
 80040d4:	e02a      	b.n	800412c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040d6:	682c      	ldr	r4, [r5, #0]
 80040d8:	2c00      	cmp	r4, #0
 80040da:	d0f7      	beq.n	80040cc <pvPortMalloc+0x84>
 80040dc:	462a      	mov	r2, r5
 80040de:	4625      	mov	r5, r4
 80040e0:	e7f1      	b.n	80040c6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040e2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040e4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040e6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040e8:	1ac2      	subs	r2, r0, r3
 80040ea:	2a10      	cmp	r2, #16
 80040ec:	d90f      	bls.n	800410e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040ee:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040f0:	0741      	lsls	r1, r0, #29
 80040f2:	d008      	beq.n	8004106 <pvPortMalloc+0xbe>
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	e7fe      	b.n	8004104 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004106:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004108:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800410a:	f7ff ff79 	bl	8004000 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800410e:	4913      	ldr	r1, [pc, #76]	; (800415c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004110:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004112:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004114:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004116:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004118:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800411a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800411e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004122:	bf38      	it	cc
 8004124:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004126:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004128:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800412a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800412c:	f000 fd68 	bl	8004c00 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004130:	0763      	lsls	r3, r4, #29
 8004132:	d008      	beq.n	8004146 <pvPortMalloc+0xfe>
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	e7fe      	b.n	8004144 <pvPortMalloc+0xfc>
}
 8004146:	4620      	mov	r0, r4
 8004148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800414c:	200000b4 	.word	0x200000b4
 8004150:	20003cb8 	.word	0x20003cb8
 8004154:	200000b8 	.word	0x200000b8
 8004158:	20003cc4 	.word	0x20003cc4
 800415c:	20003cc0 	.word	0x20003cc0
 8004160:	20003cbc 	.word	0x20003cbc

08004164 <vPortFree>:
{
 8004164:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004166:	4604      	mov	r4, r0
 8004168:	b370      	cbz	r0, 80041c8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800416a:	4a18      	ldr	r2, [pc, #96]	; (80041cc <vPortFree+0x68>)
 800416c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	4213      	tst	r3, r2
 8004174:	d108      	bne.n	8004188 <vPortFree+0x24>
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	e7fe      	b.n	8004186 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004188:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800418c:	b141      	cbz	r1, 80041a0 <vPortFree+0x3c>
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	e7fe      	b.n	800419e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041a0:	ea23 0302 	bic.w	r3, r3, r2
 80041a4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80041a8:	f000 fc90 	bl	8004acc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041ac:	4a08      	ldr	r2, [pc, #32]	; (80041d0 <vPortFree+0x6c>)
 80041ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80041b2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041b4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041b8:	440b      	add	r3, r1
 80041ba:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041bc:	f7ff ff20 	bl	8004000 <prvInsertBlockIntoFreeList>
}
 80041c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80041c4:	f000 bd1c 	b.w	8004c00 <xTaskResumeAll>
 80041c8:	bd10      	pop	{r4, pc}
 80041ca:	bf00      	nop
 80041cc:	20003cb8 	.word	0x20003cb8
 80041d0:	20003cbc 	.word	0x20003cbc

080041d4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041da:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80041dc:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041de:	b942      	cbnz	r2, 80041f2 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041e0:	6805      	ldr	r5, [r0, #0]
 80041e2:	b99d      	cbnz	r5, 800420c <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80041e4:	6840      	ldr	r0, [r0, #4]
 80041e6:	f000 ff1d 	bl	8005024 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80041ea:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80041ec:	3601      	adds	r6, #1
 80041ee:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80041f2:	b96d      	cbnz	r5, 8004210 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80041f4:	6880      	ldr	r0, [r0, #8]
 80041f6:	f001 fe1d 	bl	8005e34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041fa:	68a3      	ldr	r3, [r4, #8]
 80041fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041fe:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004200:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004202:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004204:	4293      	cmp	r3, r2
 8004206:	d301      	bcc.n	800420c <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800420c:	2000      	movs	r0, #0
 800420e:	e7ed      	b.n	80041ec <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004210:	68c0      	ldr	r0, [r0, #12]
 8004212:	f001 fe0f 	bl	8005e34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004218:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800421a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800421c:	425b      	negs	r3, r3
 800421e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004220:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004222:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004224:	bf3e      	ittt	cc
 8004226:	6862      	ldrcc	r2, [r4, #4]
 8004228:	189b      	addcc	r3, r3, r2
 800422a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800422c:	2d02      	cmp	r5, #2
 800422e:	d1ed      	bne.n	800420c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004230:	b10e      	cbz	r6, 8004236 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004232:	3e01      	subs	r6, #1
 8004234:	e7ea      	b.n	800420c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004236:	4630      	mov	r0, r6
 8004238:	e7d8      	b.n	80041ec <prvCopyDataToQueue+0x18>

0800423a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800423a:	4603      	mov	r3, r0
 800423c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800423e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004240:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004242:	b162      	cbz	r2, 800425e <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004244:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004246:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004248:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800424a:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800424c:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800424e:	bf24      	itt	cs
 8004250:	6819      	ldrcs	r1, [r3, #0]
 8004252:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004254:	68d9      	ldr	r1, [r3, #12]
	}
}
 8004256:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800425a:	f001 bdeb 	b.w	8005e34 <memcpy>
}
 800425e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004262:	4770      	bx	lr

08004264 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004268:	f7ff fd94 	bl	8003d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800426c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004270:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004274:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004276:	2d00      	cmp	r5, #0
 8004278:	dc14      	bgt.n	80042a4 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800427a:	23ff      	movs	r3, #255	; 0xff
 800427c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004280:	f7ff fdaa 	bl	8003dd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004284:	f7ff fd86 	bl	8003d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004288:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800428c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8004290:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004292:	2d00      	cmp	r5, #0
 8004294:	dc12      	bgt.n	80042bc <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004296:	23ff      	movs	r3, #255	; 0xff
 8004298:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800429c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80042a0:	f7ff bd9a 	b.w	8003dd8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0e7      	beq.n	800427a <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042aa:	4630      	mov	r0, r6
 80042ac:	f000 fdd2 	bl	8004e54 <xTaskRemoveFromEventList>
 80042b0:	b108      	cbz	r0, 80042b6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80042b2:	f000 fe5b 	bl	8004f6c <vTaskMissedYield>
 80042b6:	3d01      	subs	r5, #1
 80042b8:	b26d      	sxtb	r5, r5
 80042ba:	e7dc      	b.n	8004276 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042bc:	6923      	ldr	r3, [r4, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0e9      	beq.n	8004296 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c2:	4630      	mov	r0, r6
 80042c4:	f000 fdc6 	bl	8004e54 <xTaskRemoveFromEventList>
 80042c8:	b108      	cbz	r0, 80042ce <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80042ca:	f000 fe4f 	bl	8004f6c <vTaskMissedYield>
 80042ce:	3d01      	subs	r5, #1
 80042d0:	b26d      	sxtb	r5, r5
 80042d2:	e7de      	b.n	8004292 <prvUnlockQueue+0x2e>

080042d4 <xQueueGenericReset>:
{
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80042d8:	4604      	mov	r4, r0
 80042da:	b940      	cbnz	r0, 80042ee <xQueueGenericReset+0x1a>
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	e7fe      	b.n	80042ec <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80042ee:	f7ff fd51 	bl	8003d94 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80042f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80042f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042f6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042f8:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80042fa:	4343      	muls	r3, r0
 80042fc:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80042fe:	1a1b      	subs	r3, r3, r0
 8004300:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004302:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004304:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004306:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004308:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800430a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800430c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004310:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004314:	b995      	cbnz	r5, 800433c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004316:	6923      	ldr	r3, [r4, #16]
 8004318:	b163      	cbz	r3, 8004334 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800431a:	f104 0010 	add.w	r0, r4, #16
 800431e:	f000 fd99 	bl	8004e54 <xTaskRemoveFromEventList>
 8004322:	b138      	cbz	r0, 8004334 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <xQueueGenericReset+0x7c>)
 8004326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004334:	f7ff fd50 	bl	8003dd8 <vPortExitCritical>
}
 8004338:	2001      	movs	r0, #1
 800433a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800433c:	f104 0010 	add.w	r0, r4, #16
 8004340:	f7ff fc8c 	bl	8003c5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004344:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004348:	f7ff fc88 	bl	8003c5c <vListInitialise>
 800434c:	e7f2      	b.n	8004334 <xQueueGenericReset+0x60>
 800434e:	bf00      	nop
 8004350:	e000ed04 	.word	0xe000ed04

08004354 <xQueueGenericCreate>:
	{
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004358:	4606      	mov	r6, r0
 800435a:	b940      	cbnz	r0, 800436e <xQueueGenericCreate+0x1a>
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	e7fe      	b.n	800436c <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800436e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004370:	3048      	adds	r0, #72	; 0x48
 8004372:	f7ff fe69 	bl	8004048 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004376:	4604      	mov	r4, r0
 8004378:	b138      	cbz	r0, 800438a <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800437a:	b945      	cbnz	r5, 800438e <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800437c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800437e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004380:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004382:	2101      	movs	r1, #1
 8004384:	4620      	mov	r0, r4
 8004386:	f7ff ffa5 	bl	80042d4 <xQueueGenericReset>
	}
 800438a:	4620      	mov	r0, r4
 800438c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800438e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004392:	6003      	str	r3, [r0, #0]
 8004394:	e7f3      	b.n	800437e <xQueueGenericCreate+0x2a>
	...

08004398 <xQueueGenericSend>:
{
 8004398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800439c:	4689      	mov	r9, r1
 800439e:	9201      	str	r2, [sp, #4]
 80043a0:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80043a2:	4604      	mov	r4, r0
 80043a4:	b940      	cbnz	r0, 80043b8 <xQueueGenericSend+0x20>
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	e7fe      	b.n	80043b6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043b8:	2900      	cmp	r1, #0
 80043ba:	f040 8088 	bne.w	80044ce <xQueueGenericSend+0x136>
 80043be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8084 	beq.w	80044ce <xQueueGenericSend+0x136>
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	e7fe      	b.n	80043d6 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043d8:	9e01      	ldr	r6, [sp, #4]
 80043da:	2e00      	cmp	r6, #0
 80043dc:	f000 8082 	beq.w	80044e4 <xQueueGenericSend+0x14c>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	e7fe      	b.n	80043f0 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80043f2:	9d01      	ldr	r5, [sp, #4]
 80043f4:	b91d      	cbnz	r5, 80043fe <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 80043f6:	f7ff fcef 	bl	8003dd8 <vPortExitCritical>
			return errQUEUE_FULL;
 80043fa:	2000      	movs	r0, #0
 80043fc:	e058      	b.n	80044b0 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 80043fe:	b916      	cbnz	r6, 8004406 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8004400:	a802      	add	r0, sp, #8
 8004402:	f000 fd69 	bl	8004ed8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004406:	f7ff fce7 	bl	8003dd8 <vPortExitCritical>
		vTaskSuspendAll();
 800440a:	f000 fb5f 	bl	8004acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800440e:	f7ff fcc1 	bl	8003d94 <vPortEnterCritical>
 8004412:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004416:	2bff      	cmp	r3, #255	; 0xff
 8004418:	bf08      	it	eq
 800441a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800441e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004422:	2bff      	cmp	r3, #255	; 0xff
 8004424:	bf08      	it	eq
 8004426:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800442a:	f7ff fcd5 	bl	8003dd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800442e:	a901      	add	r1, sp, #4
 8004430:	a802      	add	r0, sp, #8
 8004432:	f000 fd61 	bl	8004ef8 <xTaskCheckForTimeOut>
 8004436:	2800      	cmp	r0, #0
 8004438:	d143      	bne.n	80044c2 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800443a:	f7ff fcab 	bl	8003d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800443e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004440:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004442:	f7ff fcc9 	bl	8003dd8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004446:	42ae      	cmp	r6, r5
 8004448:	d135      	bne.n	80044b6 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800444a:	9901      	ldr	r1, [sp, #4]
 800444c:	f104 0010 	add.w	r0, r4, #16
 8004450:	f000 fce6 	bl	8004e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004454:	4620      	mov	r0, r4
 8004456:	f7ff ff05 	bl	8004264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800445a:	f000 fbd1 	bl	8004c00 <xTaskResumeAll>
 800445e:	b938      	cbnz	r0, 8004470 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8004460:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004464:	f8ca 3000 	str.w	r3, [sl]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004472:	f7ff fc8f 	bl	8003d94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004476:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004478:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800447a:	429a      	cmp	r2, r3
 800447c:	d301      	bcc.n	8004482 <xQueueGenericSend+0xea>
 800447e:	2f02      	cmp	r7, #2
 8004480:	d1b7      	bne.n	80043f2 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004482:	463a      	mov	r2, r7
 8004484:	4649      	mov	r1, r9
 8004486:	4620      	mov	r0, r4
 8004488:	f7ff fea4 	bl	80041d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800448c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800448e:	b11b      	cbz	r3, 8004498 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004490:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004494:	f000 fcde 	bl	8004e54 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004498:	b138      	cbz	r0, 80044aa <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 800449a:	4b19      	ldr	r3, [pc, #100]	; (8004500 <xQueueGenericSend+0x168>)
 800449c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80044aa:	f7ff fc95 	bl	8003dd8 <vPortExitCritical>
				return pdPASS;
 80044ae:	2001      	movs	r0, #1
}
 80044b0:	b004      	add	sp, #16
 80044b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7ff fed4 	bl	8004264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044bc:	f000 fba0 	bl	8004c00 <xTaskResumeAll>
 80044c0:	e7d6      	b.n	8004470 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7ff fece 	bl	8004264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044c8:	f000 fb9a 	bl	8004c00 <xTaskResumeAll>
 80044cc:	e795      	b.n	80043fa <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044ce:	2f02      	cmp	r7, #2
 80044d0:	d102      	bne.n	80044d8 <xQueueGenericSend+0x140>
 80044d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d10a      	bne.n	80044ee <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044d8:	f000 fd4e 	bl	8004f78 <xTaskGetSchedulerState>
 80044dc:	2800      	cmp	r0, #0
 80044de:	f43f af7b 	beq.w	80043d8 <xQueueGenericSend+0x40>
 80044e2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80044e4:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80044e8:	f8df a014 	ldr.w	sl, [pc, #20]	; 8004500 <xQueueGenericSend+0x168>
 80044ec:	e7c1      	b.n	8004472 <xQueueGenericSend+0xda>
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	e7fe      	b.n	80044fe <xQueueGenericSend+0x166>
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <xQueueGenericSendFromISR>:
{
 8004504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004508:	4688      	mov	r8, r1
 800450a:	4691      	mov	r9, r2
 800450c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800450e:	4604      	mov	r4, r0
 8004510:	b940      	cbnz	r0, 8004524 <xQueueGenericSendFromISR+0x20>
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	e7fe      	b.n	8004522 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004524:	bb09      	cbnz	r1, 800456a <xQueueGenericSendFromISR+0x66>
 8004526:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004528:	b1fb      	cbz	r3, 800456a <xQueueGenericSendFromISR+0x66>
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	e7fe      	b.n	800453a <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800453c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004540:	f000 fc88 	bl	8004e54 <xTaskRemoveFromEventList>
 8004544:	2800      	cmp	r0, #0
 8004546:	d034      	beq.n	80045b2 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8004548:	f1b9 0f00 	cmp.w	r9, #0
 800454c:	d031      	beq.n	80045b2 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800454e:	2001      	movs	r0, #1
 8004550:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004554:	f386 8811 	msr	BASEPRI, r6
}
 8004558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800455c:	3501      	adds	r5, #1
 800455e:	b26d      	sxtb	r5, r5
 8004560:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004564:	e025      	b.n	80045b2 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8004566:	2000      	movs	r0, #0
 8004568:	e7f4      	b.n	8004554 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800456a:	2f02      	cmp	r7, #2
 800456c:	d102      	bne.n	8004574 <xQueueGenericSendFromISR+0x70>
 800456e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d120      	bne.n	80045b6 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004574:	f7ff fd16 	bl	8003fa4 <vPortValidateInterruptPriority>
	__asm volatile
 8004578:	f3ef 8611 	mrs	r6, BASEPRI
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800458c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800458e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004590:	429a      	cmp	r2, r3
 8004592:	d301      	bcc.n	8004598 <xQueueGenericSendFromISR+0x94>
 8004594:	2f02      	cmp	r7, #2
 8004596:	d1e6      	bne.n	8004566 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004598:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800459c:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800459e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045a0:	4641      	mov	r1, r8
 80045a2:	4620      	mov	r0, r4
 80045a4:	f7ff fe16 	bl	80041d4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80045a8:	1c6b      	adds	r3, r5, #1
 80045aa:	d1d7      	bne.n	800455c <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1c4      	bne.n	800453c <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 80045b2:	2001      	movs	r0, #1
 80045b4:	e7ce      	b.n	8004554 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	e7fe      	b.n	80045c6 <xQueueGenericSendFromISR+0xc2>

080045c8 <xQueueGenericReceive>:
{
 80045c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045cc:	4688      	mov	r8, r1
 80045ce:	9201      	str	r2, [sp, #4]
 80045d0:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 80045d2:	4604      	mov	r4, r0
 80045d4:	b940      	cbnz	r0, 80045e8 <xQueueGenericReceive+0x20>
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	e7fe      	b.n	80045e6 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045e8:	2900      	cmp	r1, #0
 80045ea:	f040 80a5 	bne.w	8004738 <xQueueGenericReceive+0x170>
 80045ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80a1 	beq.w	8004738 <xQueueGenericReceive+0x170>
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	e7fe      	b.n	8004606 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004608:	9e01      	ldr	r6, [sp, #4]
 800460a:	2e00      	cmp	r6, #0
 800460c:	f000 809a 	beq.w	8004744 <xQueueGenericReceive+0x17c>
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	e7fe      	b.n	8004620 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004622:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004624:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004626:	2b00      	cmp	r3, #0
 8004628:	d06d      	beq.n	8004706 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800462a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800462e:	e05f      	b.n	80046f0 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004630:	9d01      	ldr	r5, [sp, #4]
 8004632:	b91d      	cbnz	r5, 800463c <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8004634:	f7ff fbd0 	bl	8003dd8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004638:	4628      	mov	r0, r5
 800463a:	e067      	b.n	800470c <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 800463c:	b916      	cbnz	r6, 8004644 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 800463e:	a802      	add	r0, sp, #8
 8004640:	f000 fc4a 	bl	8004ed8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004644:	f7ff fbc8 	bl	8003dd8 <vPortExitCritical>
		vTaskSuspendAll();
 8004648:	f000 fa40 	bl	8004acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800464c:	f7ff fba2 	bl	8003d94 <vPortEnterCritical>
 8004650:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004654:	2bff      	cmp	r3, #255	; 0xff
 8004656:	bf08      	it	eq
 8004658:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800465c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004660:	2bff      	cmp	r3, #255	; 0xff
 8004662:	bf08      	it	eq
 8004664:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8004668:	f7ff fbb6 	bl	8003dd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800466c:	a901      	add	r1, sp, #4
 800466e:	a802      	add	r0, sp, #8
 8004670:	f000 fc42 	bl	8004ef8 <xTaskCheckForTimeOut>
 8004674:	2800      	cmp	r0, #0
 8004676:	d152      	bne.n	800471e <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8004678:	f7ff fb8c 	bl	8003d94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800467c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800467e:	f7ff fbab 	bl	8003dd8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004682:	2d00      	cmp	r5, #0
 8004684:	d145      	bne.n	8004712 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	b933      	cbnz	r3, 8004698 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800468a:	f7ff fb83 	bl	8003d94 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800468e:	6860      	ldr	r0, [r4, #4]
 8004690:	f000 fc82 	bl	8004f98 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8004694:	f7ff fba0 	bl	8003dd8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004698:	9901      	ldr	r1, [sp, #4]
 800469a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800469e:	f000 fbbf 	bl	8004e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046a2:	4620      	mov	r0, r4
 80046a4:	f7ff fdde 	bl	8004264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046a8:	f000 faaa 	bl	8004c00 <xTaskResumeAll>
 80046ac:	b938      	cbnz	r0, 80046be <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 80046ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046b2:	f8ca 3000 	str.w	r3, [sl]
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80046c0:	f7ff fb68 	bl	8003d94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046c4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	d0b2      	beq.n	8004630 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046ca:	4641      	mov	r1, r8
 80046cc:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80046ce:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046d0:	f7ff fdb3 	bl	800423a <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80046d4:	f1b9 0f00 	cmp.w	r9, #0
 80046d8:	d1a3      	bne.n	8004622 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046da:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80046dc:	3d01      	subs	r5, #1
 80046de:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046e0:	b913      	cbnz	r3, 80046e8 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80046e2:	f000 fcef 	bl	80050c4 <pvTaskIncrementMutexHeldCount>
 80046e6:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046e8:	6923      	ldr	r3, [r4, #16]
 80046ea:	b163      	cbz	r3, 8004706 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ec:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046f0:	f000 fbb0 	bl	8004e54 <xTaskRemoveFromEventList>
 80046f4:	b138      	cbz	r0, 8004706 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <xQueueGenericReceive+0x184>)
 80046f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004706:	f7ff fb67 	bl	8003dd8 <vPortExitCritical>
				return pdPASS;
 800470a:	2001      	movs	r0, #1
}
 800470c:	b004      	add	sp, #16
 800470e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004712:	4620      	mov	r0, r4
 8004714:	f7ff fda6 	bl	8004264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004718:	f000 fa72 	bl	8004c00 <xTaskResumeAll>
 800471c:	e7cf      	b.n	80046be <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 800471e:	4620      	mov	r0, r4
 8004720:	f7ff fda0 	bl	8004264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004724:	f000 fa6c 	bl	8004c00 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004728:	f7ff fb34 	bl	8003d94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800472c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800472e:	f7ff fb53 	bl	8003dd8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004732:	2d00      	cmp	r5, #0
 8004734:	d1c3      	bne.n	80046be <xQueueGenericReceive+0xf6>
 8004736:	e77f      	b.n	8004638 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004738:	f000 fc1e 	bl	8004f78 <xTaskGetSchedulerState>
 800473c:	2800      	cmp	r0, #0
 800473e:	f43f af63 	beq.w	8004608 <xQueueGenericReceive+0x40>
 8004742:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004744:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8004746:	f8df a004 	ldr.w	sl, [pc, #4]	; 800474c <xQueueGenericReceive+0x184>
 800474a:	e7b9      	b.n	80046c0 <xQueueGenericReceive+0xf8>
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <xQueueReceiveFromISR>:
{
 8004750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004754:	4689      	mov	r9, r1
 8004756:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8004758:	4605      	mov	r5, r0
 800475a:	b940      	cbnz	r0, 800476e <xQueueReceiveFromISR+0x1e>
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	e7fe      	b.n	800476c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800476e:	bb71      	cbnz	r1, 80047ce <xQueueReceiveFromISR+0x7e>
 8004770:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004772:	b363      	cbz	r3, 80047ce <xQueueReceiveFromISR+0x7e>
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	e7fe      	b.n	8004784 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004786:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800478a:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800478c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800478e:	4628      	mov	r0, r5
 8004790:	f7ff fd53 	bl	800423a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004794:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8004796:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004798:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800479a:	d113      	bne.n	80047c4 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800479c:	692b      	ldr	r3, [r5, #16]
 800479e:	b90b      	cbnz	r3, 80047a4 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 80047a0:	2001      	movs	r0, #1
 80047a2:	e00b      	b.n	80047bc <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a4:	f105 0010 	add.w	r0, r5, #16
 80047a8:	f000 fb54 	bl	8004e54 <xTaskRemoveFromEventList>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d0f7      	beq.n	80047a0 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 80047b0:	f1b8 0f00 	cmp.w	r8, #0
 80047b4:	d0f4      	beq.n	80047a0 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80047b6:	2001      	movs	r0, #1
 80047b8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80047bc:	f387 8811 	msr	BASEPRI, r7
}
 80047c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80047c4:	3601      	adds	r6, #1
 80047c6:	b276      	sxtb	r6, r6
 80047c8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80047cc:	e7e8      	b.n	80047a0 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ce:	f7ff fbe9 	bl	8003fa4 <vPortValidateInterruptPriority>
	__asm volatile
 80047d2:	f3ef 8711 	mrs	r7, BASEPRI
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047e6:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047e8:	2c00      	cmp	r4, #0
 80047ea:	d1cc      	bne.n	8004786 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 80047ec:	4620      	mov	r0, r4
 80047ee:	e7e5      	b.n	80047bc <xQueueReceiveFromISR+0x6c>

080047f0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047f0:	4a06      	ldr	r2, [pc, #24]	; (800480c <prvResetNextTaskUnblockTime+0x1c>)
 80047f2:	6813      	ldr	r3, [r2, #0]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <prvResetNextTaskUnblockTime+0x20>)
 80047f8:	b919      	cbnz	r1, 8004802 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047fa:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004806:	68d2      	ldr	r2, [r2, #12]
 8004808:	6852      	ldr	r2, [r2, #4]
 800480a:	e7f8      	b.n	80047fe <prvResetNextTaskUnblockTime+0xe>
 800480c:	20003cd0 	.word	0x20003cd0
 8004810:	20003da8 	.word	0x20003da8

08004814 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004816:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004818:	4e1b      	ldr	r6, [pc, #108]	; (8004888 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800481a:	681d      	ldr	r5, [r3, #0]
{
 800481c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800481e:	6830      	ldr	r0, [r6, #0]
 8004820:	3004      	adds	r0, #4
{
 8004822:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004824:	f7ff fa4b 	bl	8003cbe <uxListRemove>
 8004828:	4633      	mov	r3, r6
 800482a:	b940      	cbnz	r0, 800483e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800482c:	6831      	ldr	r1, [r6, #0]
 800482e:	4e17      	ldr	r6, [pc, #92]	; (800488c <prvAddCurrentTaskToDelayedList+0x78>)
 8004830:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004832:	6832      	ldr	r2, [r6, #0]
 8004834:	2001      	movs	r0, #1
 8004836:	4088      	lsls	r0, r1
 8004838:	ea22 0200 	bic.w	r2, r2, r0
 800483c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800483e:	1c62      	adds	r2, r4, #1
 8004840:	d107      	bne.n	8004852 <prvAddCurrentTaskToDelayedList+0x3e>
 8004842:	b137      	cbz	r7, 8004852 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	4812      	ldr	r0, [pc, #72]	; (8004890 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004848:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800484a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800484e:	f7ff ba13 	b.w	8003c78 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004852:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004854:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8004856:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004858:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800485a:	d907      	bls.n	800486c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800485c:	4a0d      	ldr	r2, [pc, #52]	; (8004894 <prvAddCurrentTaskToDelayedList+0x80>)
 800485e:	6810      	ldr	r0, [r2, #0]
 8004860:	6819      	ldr	r1, [r3, #0]
}
 8004862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004866:	3104      	adds	r1, #4
 8004868:	f7ff ba12 	b.w	8003c90 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486c:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <prvAddCurrentTaskToDelayedList+0x84>)
 800486e:	6810      	ldr	r0, [r2, #0]
 8004870:	6819      	ldr	r1, [r3, #0]
 8004872:	3104      	adds	r1, #4
 8004874:	f7ff fa0c 	bl	8003c90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004878:	4b08      	ldr	r3, [pc, #32]	; (800489c <prvAddCurrentTaskToDelayedList+0x88>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800487e:	bf38      	it	cc
 8004880:	601c      	strcc	r4, [r3, #0]
 8004882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004884:	20003df0 	.word	0x20003df0
 8004888:	20003ccc 	.word	0x20003ccc
 800488c:	20003d78 	.word	0x20003d78
 8004890:	20003dc8 	.word	0x20003dc8
 8004894:	20003cd4 	.word	0x20003cd4
 8004898:	20003cd0 	.word	0x20003cd0
 800489c:	20003da8 	.word	0x20003da8

080048a0 <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	e7fe      	b.n	80048b0 <prvTaskIsTaskSuspended.part.0+0x10>
	...

080048b4 <xTaskCreate>:
	{
 80048b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80048bc:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048be:	4650      	mov	r0, sl
	{
 80048c0:	460f      	mov	r7, r1
 80048c2:	4699      	mov	r9, r3
 80048c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c6:	f7ff fbbf 	bl	8004048 <pvPortMalloc>
			if( pxStack != NULL )
 80048ca:	4605      	mov	r5, r0
 80048cc:	2800      	cmp	r0, #0
 80048ce:	f000 8096 	beq.w	80049fe <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048d2:	2054      	movs	r0, #84	; 0x54
 80048d4:	f7ff fbb8 	bl	8004048 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80048d8:	4604      	mov	r4, r0
 80048da:	2800      	cmp	r0, #0
 80048dc:	f000 808c 	beq.w	80049f8 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80048e0:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80048e4:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80048e6:	4455      	add	r5, sl
 80048e8:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80048ea:	f025 0a07 	bic.w	sl, r5, #7
 80048ee:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80048f2:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048f4:	7859      	ldrb	r1, [r3, #1]
 80048f6:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80048fa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80048fe:	b109      	cbz	r1, 8004904 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004900:	42bb      	cmp	r3, r7
 8004902:	d1f7      	bne.n	80048f4 <xTaskCreate+0x40>
 8004904:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004906:	2d06      	cmp	r5, #6
 8004908:	bf28      	it	cs
 800490a:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800490c:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004910:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8004912:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004914:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004916:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004918:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800491c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004920:	f7ff f9a7 	bl	8003c72 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004924:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004928:	f104 0018 	add.w	r0, r4, #24
 800492c:	f7ff f9a1 	bl	8003c72 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004930:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004934:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004936:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004938:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800493a:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800493e:	464a      	mov	r2, r9
 8004940:	4641      	mov	r1, r8
 8004942:	4650      	mov	r0, sl
 8004944:	f7ff f9fe 	bl	8003d44 <pxPortInitialiseStack>
 8004948:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800494a:	b106      	cbz	r6, 800494e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800494c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800494e:	f7ff fa21 	bl	8003d94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004952:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8004954:	4e32      	ldr	r6, [pc, #200]	; (8004a20 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004a4c <xTaskCreate+0x198>
 800495c:	3201      	adds	r2, #1
 800495e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004960:	6835      	ldr	r5, [r6, #0]
 8004962:	2d00      	cmp	r5, #0
 8004964:	d14e      	bne.n	8004a04 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8004966:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d11d      	bne.n	80049aa <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800496e:	eb08 0005 	add.w	r0, r8, r5
 8004972:	3514      	adds	r5, #20
 8004974:	f7ff f972 	bl	8003c5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004978:	2d8c      	cmp	r5, #140	; 0x8c
 800497a:	d1f8      	bne.n	800496e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 800497c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004a50 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8004980:	4d28      	ldr	r5, [pc, #160]	; (8004a24 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8004982:	4648      	mov	r0, r9
 8004984:	f7ff f96a 	bl	8003c5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004988:	4628      	mov	r0, r5
 800498a:	f7ff f967 	bl	8003c5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800498e:	4826      	ldr	r0, [pc, #152]	; (8004a28 <xTaskCreate+0x174>)
 8004990:	f7ff f964 	bl	8003c5c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004994:	4825      	ldr	r0, [pc, #148]	; (8004a2c <xTaskCreate+0x178>)
 8004996:	f7ff f961 	bl	8003c5c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800499a:	4825      	ldr	r0, [pc, #148]	; (8004a30 <xTaskCreate+0x17c>)
 800499c:	f7ff f95e 	bl	8003c5c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <xTaskCreate+0x180>)
 80049a2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <xTaskCreate+0x184>)
 80049a8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80049aa:	4a24      	ldr	r2, [pc, #144]	; (8004a3c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80049ac:	4924      	ldr	r1, [pc, #144]	; (8004a40 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80049ae:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80049b0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80049b2:	3301      	adds	r3, #1
 80049b4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80049b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049b8:	2501      	movs	r5, #1
 80049ba:	fa05 f302 	lsl.w	r3, r5, r2
 80049be:	4303      	orrs	r3, r0
 80049c0:	2014      	movs	r0, #20
 80049c2:	600b      	str	r3, [r1, #0]
 80049c4:	fb00 8002 	mla	r0, r0, r2, r8
 80049c8:	4639      	mov	r1, r7
 80049ca:	f7ff f955 	bl	8003c78 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80049ce:	f7ff fa03 	bl	8003dd8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80049d2:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <xTaskCreate+0x190>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	b163      	cbz	r3, 80049f2 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049d8:	6833      	ldr	r3, [r6, #0]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049de:	429a      	cmp	r2, r3
 80049e0:	d207      	bcs.n	80049f2 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80049e2:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <xTaskCreate+0x194>)
 80049e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	f3bf 8f6f 	isb	sy
	}
 80049f2:	4628      	mov	r0, r5
 80049f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80049f8:	4628      	mov	r0, r5
 80049fa:	f7ff fbb3 	bl	8004164 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049fe:	f04f 35ff 	mov.w	r5, #4294967295
 8004a02:	e7f6      	b.n	80049f2 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <xTaskCreate+0x190>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1ce      	bne.n	80049aa <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a0c:	6833      	ldr	r3, [r6, #0]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a12:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004a14:	bf98      	it	ls
 8004a16:	6034      	strls	r4, [r6, #0]
 8004a18:	e7c7      	b.n	80049aa <xTaskCreate+0xf6>
 8004a1a:	bf00      	nop
 8004a1c:	20003d64 	.word	0x20003d64
 8004a20:	20003ccc 	.word	0x20003ccc
 8004a24:	20003d90 	.word	0x20003d90
 8004a28:	20003db0 	.word	0x20003db0
 8004a2c:	20003ddc 	.word	0x20003ddc
 8004a30:	20003dc8 	.word	0x20003dc8
 8004a34:	20003cd0 	.word	0x20003cd0
 8004a38:	20003cd4 	.word	0x20003cd4
 8004a3c:	20003d74 	.word	0x20003d74
 8004a40:	20003d78 	.word	0x20003d78
 8004a44:	20003dc4 	.word	0x20003dc4
 8004a48:	e000ed04 	.word	0xe000ed04
 8004a4c:	20003cd8 	.word	0x20003cd8
 8004a50:	20003d7c 	.word	0x20003d7c

08004a54 <vTaskStartScheduler>:
{
 8004a54:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8004a56:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <vTaskStartScheduler+0x60>)
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	2400      	movs	r4, #0
 8004a5c:	9400      	str	r4, [sp, #0]
 8004a5e:	4623      	mov	r3, r4
 8004a60:	2280      	movs	r2, #128	; 0x80
 8004a62:	4915      	ldr	r1, [pc, #84]	; (8004ab8 <vTaskStartScheduler+0x64>)
 8004a64:	4815      	ldr	r0, [pc, #84]	; (8004abc <vTaskStartScheduler+0x68>)
 8004a66:	f7ff ff25 	bl	80048b4 <xTaskCreate>
	if( xReturn == pdPASS )
 8004a6a:	2801      	cmp	r0, #1
 8004a6c:	d114      	bne.n	8004a98 <vTaskStartScheduler+0x44>
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a7e:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <vTaskStartScheduler+0x6c>)
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <vTaskStartScheduler+0x70>)
 8004a88:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <vTaskStartScheduler+0x74>)
 8004a8c:	601c      	str	r4, [r3, #0]
}
 8004a8e:	b002      	add	sp, #8
 8004a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004a94:	f7ff ba10 	b.w	8003eb8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d108      	bne.n	8004aae <vTaskStartScheduler+0x5a>
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	e7fe      	b.n	8004aac <vTaskStartScheduler+0x58>
}
 8004aae:	b002      	add	sp, #8
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20003da4 	.word	0x20003da4
 8004ab8:	08006d6c 	.word	0x08006d6c
 8004abc:	08004d39 	.word	0x08004d39
 8004ac0:	20003da8 	.word	0x20003da8
 8004ac4:	20003dc4 	.word	0x20003dc4
 8004ac8:	20003df0 	.word	0x20003df0

08004acc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004acc:	4a02      	ldr	r2, [pc, #8]	; (8004ad8 <vTaskSuspendAll+0xc>)
 8004ace:	6813      	ldr	r3, [r2, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20003d70 	.word	0x20003d70

08004adc <xTaskIncrementTick>:
{
 8004adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae0:	4b3c      	ldr	r3, [pc, #240]	; (8004bd4 <xTaskIncrementTick+0xf8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d153      	bne.n	8004b90 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8004ae8:	4b3b      	ldr	r3, [pc, #236]	; (8004bd8 <xTaskIncrementTick+0xfc>)
 8004aea:	681c      	ldr	r4, [r3, #0]
 8004aec:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004aee:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004af0:	b9bc      	cbnz	r4, 8004b22 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004af2:	4b3a      	ldr	r3, [pc, #232]	; (8004bdc <xTaskIncrementTick+0x100>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	b142      	cbz	r2, 8004b0c <xTaskIncrementTick+0x30>
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	e7fe      	b.n	8004b0a <xTaskIncrementTick+0x2e>
 8004b0c:	4a34      	ldr	r2, [pc, #208]	; (8004be0 <xTaskIncrementTick+0x104>)
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	6810      	ldr	r0, [r2, #0]
 8004b12:	6018      	str	r0, [r3, #0]
 8004b14:	6011      	str	r1, [r2, #0]
 8004b16:	4a33      	ldr	r2, [pc, #204]	; (8004be4 <xTaskIncrementTick+0x108>)
 8004b18:	6813      	ldr	r3, [r2, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	f7ff fe67 	bl	80047f0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b22:	4d31      	ldr	r5, [pc, #196]	; (8004be8 <xTaskIncrementTick+0x10c>)
 8004b24:	4f31      	ldr	r7, [pc, #196]	; (8004bec <xTaskIncrementTick+0x110>)
 8004b26:	682b      	ldr	r3, [r5, #0]
 8004b28:	429c      	cmp	r4, r3
 8004b2a:	f04f 0b00 	mov.w	fp, #0
 8004b2e:	d33e      	bcc.n	8004bae <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b30:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004bdc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8004b34:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004bfc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b38:	f8d8 2000 	ldr.w	r2, [r8]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	bb72      	cbnz	r2, 8004b9e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b40:	f04f 32ff 	mov.w	r2, #4294967295
 8004b44:	602a      	str	r2, [r5, #0]
					break;
 8004b46:	e032      	b.n	8004bae <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b48:	f106 0a04 	add.w	sl, r6, #4
 8004b4c:	4650      	mov	r0, sl
 8004b4e:	f7ff f8b6 	bl	8003cbe <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b52:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004b54:	b119      	cbz	r1, 8004b5e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b56:	f106 0018 	add.w	r0, r6, #24
 8004b5a:	f7ff f8b0 	bl	8003cbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b5e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004b60:	f8d9 3000 	ldr.w	r3, [r9]
 8004b64:	2201      	movs	r2, #1
 8004b66:	fa02 f100 	lsl.w	r1, r2, r0
 8004b6a:	4319      	orrs	r1, r3
 8004b6c:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <xTaskIncrementTick+0x114>)
 8004b6e:	f8c9 1000 	str.w	r1, [r9]
 8004b72:	f04f 0e14 	mov.w	lr, #20
 8004b76:	4651      	mov	r1, sl
 8004b78:	fb0e 3000 	mla	r0, lr, r0, r3
 8004b7c:	f7ff f87c 	bl	8003c78 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b80:	6838      	ldr	r0, [r7, #0]
 8004b82:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004b84:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004b86:	4291      	cmp	r1, r2
 8004b88:	bf28      	it	cs
 8004b8a:	f04f 0b01 	movcs.w	fp, #1
 8004b8e:	e7d3      	b.n	8004b38 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8004b90:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <xTaskIncrementTick+0x118>)
 8004b92:	6813      	ldr	r3, [r2, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004b98:	f04f 0b00 	mov.w	fp, #0
 8004b9c:	e011      	b.n	8004bc2 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b9e:	f8d8 2000 	ldr.w	r2, [r8]
 8004ba2:	68d2      	ldr	r2, [r2, #12]
 8004ba4:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ba6:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004ba8:	428c      	cmp	r4, r1
 8004baa:	d2cd      	bcs.n	8004b48 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8004bac:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <xTaskIncrementTick+0x114>)
 8004bb2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004bb4:	2214      	movs	r2, #20
 8004bb6:	434a      	muls	r2, r1
 8004bb8:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004bba:	2a02      	cmp	r2, #2
 8004bbc:	bf28      	it	cs
 8004bbe:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004bc2:	4a0d      	ldr	r2, [pc, #52]	; (8004bf8 <xTaskIncrementTick+0x11c>)
 8004bc4:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004bc6:	2a00      	cmp	r2, #0
 8004bc8:	bf18      	it	ne
 8004bca:	f04f 0b01 	movne.w	fp, #1
}
 8004bce:	4658      	mov	r0, fp
 8004bd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd4:	20003d70 	.word	0x20003d70
 8004bd8:	20003df0 	.word	0x20003df0
 8004bdc:	20003cd0 	.word	0x20003cd0
 8004be0:	20003cd4 	.word	0x20003cd4
 8004be4:	20003dac 	.word	0x20003dac
 8004be8:	20003da8 	.word	0x20003da8
 8004bec:	20003ccc 	.word	0x20003ccc
 8004bf0:	20003cd8 	.word	0x20003cd8
 8004bf4:	20003d6c 	.word	0x20003d6c
 8004bf8:	20003df4 	.word	0x20003df4
 8004bfc:	20003d78 	.word	0x20003d78

08004c00 <xTaskResumeAll>:
{
 8004c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004c04:	4c31      	ldr	r4, [pc, #196]	; (8004ccc <xTaskResumeAll+0xcc>)
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	b943      	cbnz	r3, 8004c1c <xTaskResumeAll+0x1c>
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	e7fe      	b.n	8004c1a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004c1c:	f7ff f8ba 	bl	8003d94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c26:	6824      	ldr	r4, [r4, #0]
 8004c28:	b12c      	cbz	r4, 8004c36 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004c2a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004c2c:	f7ff f8d4 	bl	8003dd8 <vPortExitCritical>
}
 8004c30:	4620      	mov	r0, r4
 8004c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c36:	4b26      	ldr	r3, [pc, #152]	; (8004cd0 <xTaskResumeAll+0xd0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f5      	beq.n	8004c2a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c3e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004ce8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8004c42:	4f24      	ldr	r7, [pc, #144]	; (8004cd4 <xTaskResumeAll+0xd4>)
 8004c44:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004cec <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c48:	f8d9 3000 	ldr.w	r3, [r9]
 8004c4c:	b9e3      	cbnz	r3, 8004c88 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004c4e:	b10c      	cbz	r4, 8004c54 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004c50:	f7ff fdce 	bl	80047f0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c54:	4d20      	ldr	r5, [pc, #128]	; (8004cd8 <xTaskResumeAll+0xd8>)
 8004c56:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c58:	b144      	cbz	r4, 8004c6c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8004c5a:	4e20      	ldr	r6, [pc, #128]	; (8004cdc <xTaskResumeAll+0xdc>)
 8004c5c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004c5e:	f7ff ff3d 	bl	8004adc <xTaskIncrementTick>
 8004c62:	b100      	cbz	r0, 8004c66 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8004c64:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c66:	3c01      	subs	r4, #1
 8004c68:	d1f9      	bne.n	8004c5e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8004c6a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <xTaskResumeAll+0xdc>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0da      	beq.n	8004c2a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004c74:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <xTaskResumeAll+0xe0>)
 8004c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004c84:	2401      	movs	r4, #1
 8004c86:	e7d1      	b.n	8004c2c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c88:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004c8c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c8e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c90:	f104 0018 	add.w	r0, r4, #24
 8004c94:	f7ff f813 	bl	8003cbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f7ff f810 	bl	8003cbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	2501      	movs	r5, #1
 8004ca4:	fa05 f302 	lsl.w	r3, r5, r2
 8004ca8:	2014      	movs	r0, #20
 8004caa:	430b      	orrs	r3, r1
 8004cac:	fb00 8002 	mla	r0, r0, r2, r8
 8004cb0:	4631      	mov	r1, r6
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	f7fe ffe0 	bl	8003c78 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <xTaskResumeAll+0xe4>)
 8004cba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004cc2:	bf24      	itt	cs
 8004cc4:	4b05      	ldrcs	r3, [pc, #20]	; (8004cdc <xTaskResumeAll+0xdc>)
 8004cc6:	601d      	strcs	r5, [r3, #0]
 8004cc8:	e7be      	b.n	8004c48 <xTaskResumeAll+0x48>
 8004cca:	bf00      	nop
 8004ccc:	20003d70 	.word	0x20003d70
 8004cd0:	20003d64 	.word	0x20003d64
 8004cd4:	20003d78 	.word	0x20003d78
 8004cd8:	20003d6c 	.word	0x20003d6c
 8004cdc:	20003df4 	.word	0x20003df4
 8004ce0:	e000ed04 	.word	0xe000ed04
 8004ce4:	20003ccc 	.word	0x20003ccc
 8004ce8:	20003db0 	.word	0x20003db0
 8004cec:	20003cd8 	.word	0x20003cd8

08004cf0 <vTaskDelay>:
	{
 8004cf0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004cf2:	b940      	cbnz	r0, 8004d06 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <vTaskDelay+0x40>)
 8004cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <vTaskDelay+0x44>)
 8004d08:	6819      	ldr	r1, [r3, #0]
 8004d0a:	b141      	cbz	r1, 8004d1e <vTaskDelay+0x2e>
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	e7fe      	b.n	8004d1c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004d1e:	f7ff fed5 	bl	8004acc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d22:	f7ff fd77 	bl	8004814 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004d26:	f7ff ff6b 	bl	8004c00 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d0e2      	beq.n	8004cf4 <vTaskDelay+0x4>
 8004d2e:	bd08      	pop	{r3, pc}
 8004d30:	e000ed04 	.word	0xe000ed04
 8004d34:	20003d70 	.word	0x20003d70

08004d38 <prvIdleTask>:
{
 8004d38:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004d3a:	4e17      	ldr	r6, [pc, #92]	; (8004d98 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d3c:	4c17      	ldr	r4, [pc, #92]	; (8004d9c <prvIdleTask+0x64>)
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	b963      	cbnz	r3, 8004d5c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d42:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <prvIdleTask+0x68>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d9f8      	bls.n	8004d3c <prvIdleTask+0x4>
				taskYIELD();
 8004d4a:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <prvIdleTask+0x6c>)
 8004d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	e7ef      	b.n	8004d3c <prvIdleTask+0x4>
			vTaskSuspendAll();
 8004d5c:	f7ff feb6 	bl	8004acc <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004d60:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8004d62:	f7ff ff4d 	bl	8004c00 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	d0e9      	beq.n	8004d3e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8004d6a:	f7ff f813 	bl	8003d94 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d6e:	68f3      	ldr	r3, [r6, #12]
 8004d70:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d72:	1d28      	adds	r0, r5, #4
 8004d74:	f7fe ffa3 	bl	8003cbe <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004d78:	4a0b      	ldr	r2, [pc, #44]	; (8004da8 <prvIdleTask+0x70>)
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8004d86:	f7ff f827 	bl	8003dd8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8004d8a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004d8c:	f7ff f9ea 	bl	8004164 <vPortFree>
			vPortFree( pxTCB );
 8004d90:	4628      	mov	r0, r5
 8004d92:	f7ff f9e7 	bl	8004164 <vPortFree>
 8004d96:	e7d2      	b.n	8004d3e <prvIdleTask+0x6>
 8004d98:	20003ddc 	.word	0x20003ddc
 8004d9c:	20003d68 	.word	0x20003d68
 8004da0:	20003cd8 	.word	0x20003cd8
 8004da4:	e000ed04 	.word	0xe000ed04
 8004da8:	20003d64 	.word	0x20003d64

08004dac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dac:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <vTaskSwitchContext+0x60>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <vTaskSwitchContext+0x64>)
{
 8004db2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004db4:	b112      	cbz	r2, 8004dbc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004db6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004dbc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <vTaskSwitchContext+0x68>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004dc2:	fab3 f383 	clz	r3, r3
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f1c3 031f 	rsb	r3, r3, #31
 8004dcc:	2214      	movs	r2, #20
 8004dce:	4912      	ldr	r1, [pc, #72]	; (8004e18 <vTaskSwitchContext+0x6c>)
 8004dd0:	435a      	muls	r2, r3
 8004dd2:	1888      	adds	r0, r1, r2
 8004dd4:	588c      	ldr	r4, [r1, r2]
 8004dd6:	b944      	cbnz	r4, 8004dea <vTaskSwitchContext+0x3e>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	e7fe      	b.n	8004de8 <vTaskSwitchContext+0x3c>
 8004dea:	6844      	ldr	r4, [r0, #4]
 8004dec:	3208      	adds	r2, #8
 8004dee:	6864      	ldr	r4, [r4, #4]
 8004df0:	6044      	str	r4, [r0, #4]
 8004df2:	440a      	add	r2, r1
 8004df4:	4294      	cmp	r4, r2
 8004df6:	bf04      	itt	eq
 8004df8:	6862      	ldreq	r2, [r4, #4]
 8004dfa:	6042      	streq	r2, [r0, #4]
 8004dfc:	2214      	movs	r2, #20
 8004dfe:	fb02 1303 	mla	r3, r2, r3, r1
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <vTaskSwitchContext+0x70>)
 8004e08:	e7d6      	b.n	8004db8 <vTaskSwitchContext+0xc>
 8004e0a:	bf00      	nop
 8004e0c:	20003d70 	.word	0x20003d70
 8004e10:	20003df4 	.word	0x20003df4
 8004e14:	20003d78 	.word	0x20003d78
 8004e18:	20003cd8 	.word	0x20003cd8
 8004e1c:	20003ccc 	.word	0x20003ccc

08004e20 <vTaskPlaceOnEventList>:
{
 8004e20:	b510      	push	{r4, lr}
 8004e22:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004e24:	b940      	cbnz	r0, 8004e38 <vTaskPlaceOnEventList+0x18>
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	e7fe      	b.n	8004e36 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <vTaskPlaceOnEventList+0x30>)
 8004e3a:	6819      	ldr	r1, [r3, #0]
 8004e3c:	3118      	adds	r1, #24
 8004e3e:	f7fe ff27 	bl	8003c90 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e42:	4620      	mov	r0, r4
 8004e44:	2101      	movs	r1, #1
}
 8004e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e4a:	f7ff bce3 	b.w	8004814 <prvAddCurrentTaskToDelayedList>
 8004e4e:	bf00      	nop
 8004e50:	20003ccc 	.word	0x20003ccc

08004e54 <xTaskRemoveFromEventList>:
{
 8004e54:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e56:	68c3      	ldr	r3, [r0, #12]
 8004e58:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004e5a:	b944      	cbnz	r4, 8004e6e <xTaskRemoveFromEventList+0x1a>
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	e7fe      	b.n	8004e6c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e6e:	f104 0518 	add.w	r5, r4, #24
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7fe ff23 	bl	8003cbe <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e78:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <xTaskRemoveFromEventList+0x6c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	b9e3      	cbnz	r3, 8004eb8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e7e:	1d25      	adds	r5, r4, #4
 8004e80:	4628      	mov	r0, r5
 8004e82:	f7fe ff1c 	bl	8003cbe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e86:	490f      	ldr	r1, [pc, #60]	; (8004ec4 <xTaskRemoveFromEventList+0x70>)
 8004e88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e8a:	6808      	ldr	r0, [r1, #0]
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4093      	lsls	r3, r2
 8004e90:	4303      	orrs	r3, r0
 8004e92:	600b      	str	r3, [r1, #0]
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <xTaskRemoveFromEventList+0x74>)
 8004e96:	2014      	movs	r0, #20
 8004e98:	4629      	mov	r1, r5
 8004e9a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e9e:	f7fe feeb 	bl	8003c78 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <xTaskRemoveFromEventList+0x78>)
 8004ea4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004eac:	bf83      	ittte	hi
 8004eae:	4b08      	ldrhi	r3, [pc, #32]	; (8004ed0 <xTaskRemoveFromEventList+0x7c>)
 8004eb0:	2001      	movhi	r0, #1
 8004eb2:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8004eb4:	2000      	movls	r0, #0
}
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4806      	ldr	r0, [pc, #24]	; (8004ed4 <xTaskRemoveFromEventList+0x80>)
 8004ebc:	e7ef      	b.n	8004e9e <xTaskRemoveFromEventList+0x4a>
 8004ebe:	bf00      	nop
 8004ec0:	20003d70 	.word	0x20003d70
 8004ec4:	20003d78 	.word	0x20003d78
 8004ec8:	20003cd8 	.word	0x20003cd8
 8004ecc:	20003ccc 	.word	0x20003ccc
 8004ed0:	20003df4 	.word	0x20003df4
 8004ed4:	20003db0 	.word	0x20003db0

08004ed8 <vTaskSetTimeOutState>:
{
 8004ed8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8004eda:	b908      	cbnz	r0, 8004ee0 <vTaskSetTimeOutState+0x8>
 8004edc:	f7ff fce0 	bl	80048a0 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ee0:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <vTaskSetTimeOutState+0x18>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ee6:	4b03      	ldr	r3, [pc, #12]	; (8004ef4 <vTaskSetTimeOutState+0x1c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6043      	str	r3, [r0, #4]
 8004eec:	bd08      	pop	{r3, pc}
 8004eee:	bf00      	nop
 8004ef0:	20003dac 	.word	0x20003dac
 8004ef4:	20003df0 	.word	0x20003df0

08004ef8 <xTaskCheckForTimeOut>:
{
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8004efc:	4604      	mov	r4, r0
 8004efe:	b940      	cbnz	r0, 8004f12 <xTaskCheckForTimeOut+0x1a>
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	e7fe      	b.n	8004f10 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8004f12:	b941      	cbnz	r1, 8004f26 <xTaskCheckForTimeOut+0x2e>
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	e7fe      	b.n	8004f24 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8004f26:	f7fe ff35 	bl	8003d94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <xTaskCheckForTimeOut+0x6c>)
 8004f2c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004f2e:	682b      	ldr	r3, [r5, #0]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	d010      	beq.n	8004f56 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f34:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <xTaskCheckForTimeOut+0x70>)
 8004f36:	6820      	ldr	r0, [r4, #0]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	4290      	cmp	r0, r2
 8004f3c:	6862      	ldr	r2, [r4, #4]
 8004f3e:	d001      	beq.n	8004f44 <xTaskCheckForTimeOut+0x4c>
 8004f40:	4291      	cmp	r1, r2
 8004f42:	d20d      	bcs.n	8004f60 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f44:	1a88      	subs	r0, r1, r2
 8004f46:	4283      	cmp	r3, r0
 8004f48:	d90a      	bls.n	8004f60 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004f4a:	1a5b      	subs	r3, r3, r1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7ff ffc1 	bl	8004ed8 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8004f56:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004f58:	f7fe ff3e 	bl	8003dd8 <vPortExitCritical>
}
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8004f60:	2401      	movs	r4, #1
 8004f62:	e7f9      	b.n	8004f58 <xTaskCheckForTimeOut+0x60>
 8004f64:	20003df0 	.word	0x20003df0
 8004f68:	20003dac 	.word	0x20003dac

08004f6c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004f6c:	4b01      	ldr	r3, [pc, #4]	; (8004f74 <vTaskMissedYield+0x8>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	4770      	bx	lr
 8004f74:	20003df4 	.word	0x20003df4

08004f78 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <xTaskGetSchedulerState+0x18>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	b133      	cbz	r3, 8004f8c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <xTaskGetSchedulerState+0x1c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f84:	bf0c      	ite	eq
 8004f86:	2002      	moveq	r0, #2
 8004f88:	2000      	movne	r0, #0
 8004f8a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f8c:	2001      	movs	r0, #1
	}
 8004f8e:	4770      	bx	lr
 8004f90:	20003dc4 	.word	0x20003dc4
 8004f94:	20003d70 	.word	0x20003d70

08004f98 <vTaskPriorityInherit>:
	{
 8004f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d038      	beq.n	8005014 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004fa2:	4d1d      	ldr	r5, [pc, #116]	; (8005018 <vTaskPriorityInherit+0x80>)
 8004fa4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004fa6:	682a      	ldr	r2, [r5, #0]
 8004fa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d232      	bcs.n	8005014 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fae:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004fb0:	4e1a      	ldr	r6, [pc, #104]	; (800501c <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fb2:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb4:	bfa1      	itttt	ge
 8004fb6:	682a      	ldrge	r2, [r5, #0]
 8004fb8:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8004fba:	f1c2 0207 	rsbge	r2, r2, #7
 8004fbe:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004fc0:	2714      	movs	r7, #20
 8004fc2:	6942      	ldr	r2, [r0, #20]
 8004fc4:	fb07 6303 	mla	r3, r7, r3, r6
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d120      	bne.n	800500e <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fcc:	f100 0804 	add.w	r8, r0, #4
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	f7fe fe74 	bl	8003cbe <uxListRemove>
 8004fd6:	4a12      	ldr	r2, [pc, #72]	; (8005020 <vTaskPriorityInherit+0x88>)
 8004fd8:	b948      	cbnz	r0, 8004fee <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004fda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004fdc:	4347      	muls	r7, r0
 8004fde:	59f3      	ldr	r3, [r6, r7]
 8004fe0:	b92b      	cbnz	r3, 8004fee <vTaskPriorityInherit+0x56>
 8004fe2:	6813      	ldr	r3, [r2, #0]
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	4081      	lsls	r1, r0
 8004fe8:	ea23 0301 	bic.w	r3, r3, r1
 8004fec:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fee:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8004ff0:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ff2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004ff4:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4083      	lsls	r3, r0
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	2314      	movs	r3, #20
 8005000:	4641      	mov	r1, r8
 8005002:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8005006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 800500a:	f7fe be35 	b.w	8003c78 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800500e:	682b      	ldr	r3, [r5, #0]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005018:	20003ccc 	.word	0x20003ccc
 800501c:	20003cd8 	.word	0x20003cd8
 8005020:	20003d78 	.word	0x20003d78

08005024 <xTaskPriorityDisinherit>:
	{
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005026:	4604      	mov	r4, r0
 8005028:	b908      	cbnz	r0, 800502e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800502a:	2000      	movs	r0, #0
 800502c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800502e:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <xTaskPriorityDisinherit+0x94>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4298      	cmp	r0, r3
 8005034:	d008      	beq.n	8005048 <xTaskPriorityDisinherit+0x24>
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	e7fe      	b.n	8005046 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005048:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800504a:	b943      	cbnz	r3, 800505e <xTaskPriorityDisinherit+0x3a>
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	e7fe      	b.n	800505c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800505e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005060:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8005062:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005064:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8005066:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005068:	d0df      	beq.n	800502a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1dd      	bne.n	800502a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800506e:	1d05      	adds	r5, r0, #4
 8005070:	4628      	mov	r0, r5
 8005072:	f7fe fe24 	bl	8003cbe <uxListRemove>
 8005076:	4e11      	ldr	r6, [pc, #68]	; (80050bc <xTaskPriorityDisinherit+0x98>)
 8005078:	4a11      	ldr	r2, [pc, #68]	; (80050c0 <xTaskPriorityDisinherit+0x9c>)
 800507a:	b950      	cbnz	r0, 8005092 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800507c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800507e:	2114      	movs	r1, #20
 8005080:	4379      	muls	r1, r7
 8005082:	5873      	ldr	r3, [r6, r1]
 8005084:	b92b      	cbnz	r3, 8005092 <xTaskPriorityDisinherit+0x6e>
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	2001      	movs	r0, #1
 800508a:	40b8      	lsls	r0, r7
 800508c:	ea23 0300 	bic.w	r3, r3, r0
 8005090:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005092:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005094:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005096:	f1c3 0107 	rsb	r1, r3, #7
 800509a:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800509c:	6811      	ldr	r1, [r2, #0]
 800509e:	2401      	movs	r4, #1
 80050a0:	fa04 f003 	lsl.w	r0, r4, r3
 80050a4:	4308      	orrs	r0, r1
 80050a6:	6010      	str	r0, [r2, #0]
 80050a8:	2014      	movs	r0, #20
 80050aa:	fb00 6003 	mla	r0, r0, r3, r6
 80050ae:	4629      	mov	r1, r5
 80050b0:	f7fe fde2 	bl	8003c78 <vListInsertEnd>
					xReturn = pdTRUE;
 80050b4:	4620      	mov	r0, r4
	}
 80050b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b8:	20003ccc 	.word	0x20003ccc
 80050bc:	20003cd8 	.word	0x20003cd8
 80050c0:	20003d78 	.word	0x20003d78

080050c4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <pvTaskIncrementMutexHeldCount+0x14>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	b11a      	cbz	r2, 80050d2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80050ca:	6819      	ldr	r1, [r3, #0]
 80050cc:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80050ce:	3201      	adds	r2, #1
 80050d0:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80050d2:	6818      	ldr	r0, [r3, #0]
	}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20003ccc 	.word	0x20003ccc

080050dc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80050dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050de:	b089      	sub	sp, #36	; 0x24
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80050e0:	f000 fd1e 	bl	8005b20 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  uint8_t good_id[MFRC522_MAX_LEN]  = { 215, 133, 10, 133, 221, 0, 0, 0};
 80050e4:	2210      	movs	r2, #16
 80050e6:	2100      	movs	r1, #0
 80050e8:	4668      	mov	r0, sp
 80050ea:	f000 feae 	bl	8005e4a <memset>
 80050ee:	23d7      	movs	r3, #215	; 0xd7
 80050f0:	f88d 3000 	strb.w	r3, [sp]
 80050f4:	2385      	movs	r3, #133	; 0x85
 80050f6:	f88d 3001 	strb.w	r3, [sp, #1]
 80050fa:	f88d 3003 	strb.w	r3, [sp, #3]
 80050fe:	23dd      	movs	r3, #221	; 0xdd
 8005100:	220a      	movs	r2, #10
 8005102:	f88d 3004 	strb.w	r3, [sp, #4]

  uint8_t		str[MFRC522_MAX_LEN];
  uint8_t		lastID[4];
  int i;

  for(int k = 0; k < MFRC522_MAX_LEN; ++k) {
 8005106:	2300      	movs	r3, #0
  uint8_t good_id[MFRC522_MAX_LEN]  = { 215, 133, 10, 133, 221, 0, 0, 0};
 8005108:	f88d 2002 	strb.w	r2, [sp, #2]
	  str[k] = 0;
 800510c:	ac04      	add	r4, sp, #16
 800510e:	461a      	mov	r2, r3
 8005110:	551a      	strb	r2, [r3, r4]
  for(int k = 0; k < MFRC522_MAX_LEN; ++k) {
 8005112:	3301      	adds	r3, #1
 8005114:	2b10      	cmp	r3, #16
 8005116:	d1fb      	bne.n	8005110 <StartDefaultTask+0x34>
	printf("\n");*/

  for(;;)
  {

	  printf("wersja: %u\n", MFRC522_ReadRegister(MFRC522_REG_VERSION));
 8005118:	4e20      	ldr	r6, [pc, #128]	; (800519c <StartDefaultTask+0xc0>)
					vTaskDelay(1000);
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

				}else{
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800511a:	4d21      	ldr	r5, [pc, #132]	; (80051a0 <StartDefaultTask+0xc4>)
					printf("gud\n");
 800511c:	4f21      	ldr	r7, [pc, #132]	; (80051a4 <StartDefaultTask+0xc8>)
	  printf("wersja: %u\n", MFRC522_ReadRegister(MFRC522_REG_VERSION));
 800511e:	2037      	movs	r0, #55	; 0x37
 8005120:	f000 fa1d 	bl	800555e <MFRC522_ReadRegister>
 8005124:	4601      	mov	r1, r0
 8005126:	4630      	mov	r0, r6
 8005128:	f000 ff44 	bl	8005fb4 <iprintf>
	  if (!MFRC522_Request(PICC_REQIDL, str)) {
 800512c:	4621      	mov	r1, r4
 800512e:	2026      	movs	r0, #38	; 0x26
 8005130:	f000 facf 	bl	80056d2 <MFRC522_Request>
 8005134:	bb08      	cbnz	r0, 800517a <StartDefaultTask+0x9e>
		  if (!MFRC522_Anticoll(str)) {
 8005136:	4620      	mov	r0, r4
 8005138:	f000 fae7 	bl	800570a <MFRC522_Anticoll>
 800513c:	b9e8      	cbnz	r0, 800517a <StartDefaultTask+0x9e>
				if (MFRC522_Compare(str, good_id) == MI_OK) {
 800513e:	4669      	mov	r1, sp
 8005140:	4620      	mov	r0, r4
 8005142:	f000 fa13 	bl	800556c <MFRC522_Compare>
 8005146:	b9e0      	cbnz	r0, 8005182 <StartDefaultTask+0xa6>
					printf("gud\n");
 8005148:	4638      	mov	r0, r7
 800514a:	f000 ffa7 	bl	800609c <puts>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800514e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005152:	4628      	mov	r0, r5
 8005154:	f7fb fbbd 	bl	80008d2 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8005158:	2102      	movs	r1, #2
 800515a:	4813      	ldr	r0, [pc, #76]	; (80051a8 <StartDefaultTask+0xcc>)
 800515c:	f7fb fbb9 	bl	80008d2 <HAL_GPIO_TogglePin>
					vTaskDelay(1000);
 8005160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005164:	f7ff fdc4 	bl	8004cf0 <vTaskDelay>
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8005168:	2102      	movs	r1, #2
 800516a:	480f      	ldr	r0, [pc, #60]	; (80051a8 <StartDefaultTask+0xcc>)
 800516c:	f7fb fbb1 	bl	80008d2 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8005170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
					vTaskDelay(1000);
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8005174:	4628      	mov	r0, r5
 8005176:	f7fb fbac 	bl	80008d2 <HAL_GPIO_TogglePin>
				}
			}
	  }
	  vTaskDelay(200);
 800517a:	20c8      	movs	r0, #200	; 0xc8
 800517c:	f7ff fdb8 	bl	8004cf0 <vTaskDelay>
	  printf("wersja: %u\n", MFRC522_ReadRegister(MFRC522_REG_VERSION));
 8005180:	e7cd      	b.n	800511e <StartDefaultTask+0x42>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8005182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005186:	4628      	mov	r0, r5
 8005188:	f7fb fba3 	bl	80008d2 <HAL_GPIO_TogglePin>
					vTaskDelay(1000);
 800518c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005190:	f7ff fdae 	bl	8004cf0 <vTaskDelay>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8005194:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005198:	e7ec      	b.n	8005174 <StartDefaultTask+0x98>
 800519a:	bf00      	nop
 800519c:	08006d71 	.word	0x08006d71
 80051a0:	40020c00 	.word	0x40020c00
 80051a4:	08006d7d 	.word	0x08006d7d
 80051a8:	40020000 	.word	0x40020000

080051ac <SystemClock_Config>:
{
 80051ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ae:	b09b      	sub	sp, #108	; 0x6c
  __HAL_RCC_PWR_CLK_ENABLE();
 80051b0:	4b2c      	ldr	r3, [pc, #176]	; (8005264 <SystemClock_Config+0xb8>)
 80051b2:	2100      	movs	r1, #0
 80051b4:	9101      	str	r1, [sp, #4]
 80051b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051c8:	4b27      	ldr	r3, [pc, #156]	; (8005268 <SystemClock_Config+0xbc>)
 80051ca:	9102      	str	r1, [sp, #8]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051e2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051e8:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 192;
 80051ea:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLM = 4;
 80051ec:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051ee:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051f0:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 192;
 80051f2:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051f4:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80051f6:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051f8:	970e      	str	r7, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051fa:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = 4;
 80051fc:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80051fe:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005200:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005202:	f7fc fa67 	bl	80016d4 <HAL_RCC_OscConfig>
 8005206:	b100      	cbz	r0, 800520a <SystemClock_Config+0x5e>
 8005208:	e7fe      	b.n	8005208 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800520a:	260f      	movs	r6, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800520c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800520e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005212:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005214:	2103      	movs	r1, #3
 8005216:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005218:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800521a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800521c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800521e:	f7fc fc09 	bl	8001a34 <HAL_RCC_ClockConfig>
 8005222:	b100      	cbz	r0, 8005226 <SystemClock_Config+0x7a>
 8005224:	e7fe      	b.n	8005224 <SystemClock_Config+0x78>
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8005226:	23c8      	movs	r3, #200	; 0xc8
 8005228:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800522a:	a808      	add	r0, sp, #32
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800522c:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800522e:	950b      	str	r5, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8005230:	9708      	str	r7, [sp, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8005232:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005234:	f7fc fcdc 	bl	8001bf0 <HAL_RCCEx_PeriphCLKConfig>
 8005238:	4605      	mov	r5, r0
 800523a:	b100      	cbz	r0, 800523e <SystemClock_Config+0x92>
 800523c:	e7fe      	b.n	800523c <SystemClock_Config+0x90>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800523e:	f7fc fc93 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8005242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005246:	fbb0 f0f3 	udiv	r0, r0, r3
 800524a:	f7fb fa33 	bl	80006b4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800524e:	4620      	mov	r0, r4
 8005250:	f7fb fa46 	bl	80006e0 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8005254:	462a      	mov	r2, r5
 8005256:	4631      	mov	r1, r6
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	f7fb f9ea 	bl	8000634 <HAL_NVIC_SetPriority>
}
 8005260:	b01b      	add	sp, #108	; 0x6c
 8005262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005264:	40023800 	.word	0x40023800
 8005268:	40007000 	.word	0x40007000

0800526c <main>:
{
 800526c:	b500      	push	{lr}
 800526e:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005270:	2400      	movs	r4, #0
  HAL_Init();
 8005272:	f7fb f98d 	bl	8000590 <HAL_Init>
  SystemClock_Config();
 8005276:	f7ff ff99 	bl	80051ac <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800527a:	4b7f      	ldr	r3, [pc, #508]	; (8005478 <main+0x20c>)
 800527c:	9401      	str	r4, [sp, #4]
 800527e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8005280:	487e      	ldr	r0, [pc, #504]	; (800547c <main+0x210>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005282:	4e7f      	ldr	r6, [pc, #508]	; (8005480 <main+0x214>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005284:	f042 0210 	orr.w	r2, r2, #16
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
 800528a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528c:	f002 0210 	and.w	r2, r2, #16
 8005290:	9201      	str	r2, [sp, #4]
 8005292:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005294:	9402      	str	r4, [sp, #8]
 8005296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005298:	f042 0204 	orr.w	r2, r2, #4
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
 800529e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a0:	f002 0204 	and.w	r2, r2, #4
 80052a4:	9202      	str	r2, [sp, #8]
 80052a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80052a8:	9403      	str	r4, [sp, #12]
 80052aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30
 80052b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80052b8:	9203      	str	r2, [sp, #12]
 80052ba:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052bc:	9404      	str	r4, [sp, #16]
 80052be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
 80052c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c8:	f002 0201 	and.w	r2, r2, #1
 80052cc:	9204      	str	r2, [sp, #16]
 80052ce:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052d0:	9405      	str	r4, [sp, #20]
 80052d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d4:	f042 0202 	orr.w	r2, r2, #2
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
 80052da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052dc:	f002 0202 	and.w	r2, r2, #2
 80052e0:	9205      	str	r2, [sp, #20]
 80052e2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052e4:	9406      	str	r4, [sp, #24]
 80052e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e8:	f042 0208 	orr.w	r2, r2, #8
 80052ec:	631a      	str	r2, [r3, #48]	; 0x30
 80052ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80052f6:	4622      	mov	r2, r4
 80052f8:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052fa:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80052fc:	f7fb fae4 	bl	80008c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8005300:	4622      	mov	r2, r4
 8005302:	2101      	movs	r1, #1
 8005304:	485f      	ldr	r0, [pc, #380]	; (8005484 <main+0x218>)
 8005306:	f7fb fadf 	bl	80008c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800530a:	4622      	mov	r2, r4
 800530c:	2112      	movs	r1, #18
 800530e:	485e      	ldr	r0, [pc, #376]	; (8005488 <main+0x21c>)
 8005310:	f7fb fada 	bl	80008c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8005314:	4622      	mov	r2, r4
 8005316:	f24f 0110 	movw	r1, #61456	; 0xf010
 800531a:	485c      	ldr	r0, [pc, #368]	; (800548c <main+0x220>)
 800531c:	f7fb fad4 	bl	80008c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005320:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005322:	a907      	add	r1, sp, #28
 8005324:	4855      	ldr	r0, [pc, #340]	; (800547c <main+0x210>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005326:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005328:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800532a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800532e:	f7fb f9f5 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005332:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005334:	a907      	add	r1, sp, #28
 8005336:	4851      	ldr	r0, [pc, #324]	; (800547c <main+0x210>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005338:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800533a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005340:	f7fb f9ec 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1;
 8005344:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005346:	a907      	add	r1, sp, #28
 8005348:	484c      	ldr	r0, [pc, #304]	; (800547c <main+0x210>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_1;
 800534a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800534c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005350:	f7fb f9e4 	bl	800071c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005354:	a907      	add	r1, sp, #28
 8005356:	484b      	ldr	r0, [pc, #300]	; (8005484 <main+0x218>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005358:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800535a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800535e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005360:	f7fb f9dc 	bl	800071c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005364:	a907      	add	r1, sp, #28
 8005366:	4848      	ldr	r0, [pc, #288]	; (8005488 <main+0x21c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005368:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800536a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536e:	f7fb f9d5 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8005372:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005374:	a907      	add	r1, sp, #28
 8005376:	4844      	ldr	r0, [pc, #272]	; (8005488 <main+0x21c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8005378:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800537a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800537c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800537e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005380:	f7fb f9cc 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8005384:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005388:	a907      	add	r1, sp, #28
 800538a:	4840      	ldr	r0, [pc, #256]	; (800548c <main+0x220>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800538c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800538e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005390:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005392:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005394:	f7fb f9c2 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8005398:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539c:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800539e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053a0:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80053a2:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053a4:	4837      	ldr	r0, [pc, #220]	; (8005484 <main+0x218>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80053a8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053aa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ac:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053ae:	f7fb f9b5 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80053b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80053b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b8:	2303      	movs	r3, #3
 80053ba:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053bc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053be:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053c0:	4831      	ldr	r0, [pc, #196]	; (8005488 <main+0x21c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053c4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053c8:	f7fb f9a8 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80053cc:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053ce:	482f      	ldr	r0, [pc, #188]	; (800548c <main+0x220>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80053d0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053d2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053d4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d6:	9409      	str	r4, [sp, #36]	; 0x24
  hi2c1.Init.ClockSpeed = 100000;
 80053d8:	4e2d      	ldr	r6, [pc, #180]	; (8005490 <main+0x224>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053da:	f7fb f99f 	bl	800071c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80053de:	482d      	ldr	r0, [pc, #180]	; (8005494 <main+0x228>)
  hi2c1.Init.ClockSpeed = 100000;
 80053e0:	4b2d      	ldr	r3, [pc, #180]	; (8005498 <main+0x22c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80053e2:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80053e4:	e880 0048 	stmia.w	r0, {r3, r6}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80053ec:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053ee:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053f0:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80053f2:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053f4:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053f6:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053f8:	f7fb feb8 	bl	800116c <HAL_I2C_Init>
 80053fc:	b100      	cbz	r0, 8005400 <main+0x194>
 80053fe:	e7fe      	b.n	80053fe <main+0x192>
  hi2s2.Instance = SPI2;
 8005400:	4b26      	ldr	r3, [pc, #152]	; (800549c <main+0x230>)
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8005402:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <main+0x234>)
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8005404:	6098      	str	r0, [r3, #8]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8005406:	f44f 7400 	mov.w	r4, #512	; 0x200
 800540a:	e883 0014 	stmia.w	r3, {r2, r4}
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800540e:	60d8      	str	r0, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005410:	6118      	str	r0, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8005412:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <main+0x238>)
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8005414:	6198      	str	r0, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8005416:	61d8      	str	r0, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005418:	4618      	mov	r0, r3
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800541a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800541c:	621d      	str	r5, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800541e:	f7fb ff17 	bl	8001250 <HAL_I2S_Init>
 8005422:	b100      	cbz	r0, 8005426 <main+0x1ba>
 8005424:	e7fe      	b.n	8005424 <main+0x1b8>
  hspi1.Instance = SPI1;
 8005426:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <main+0x23c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005428:	4920      	ldr	r1, [pc, #128]	; (80054ac <main+0x240>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800542a:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800542c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005430:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005434:	2228      	movs	r2, #40	; 0x28
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005436:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005438:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800543a:	6158      	str	r0, [r3, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800543c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800543e:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005440:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005442:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005444:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005446:	4618      	mov	r0, r3
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005448:	619c      	str	r4, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 800544a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800544c:	f7fc fcf5 	bl	8001e3a <HAL_SPI_Init>
 8005450:	4606      	mov	r6, r0
 8005452:	b100      	cbz	r0, 8005456 <main+0x1ea>
 8005454:	e7fe      	b.n	8005454 <main+0x1e8>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005456:	4d16      	ldr	r5, [pc, #88]	; (80054b0 <main+0x244>)
  MFRC522_Init();
 8005458:	f000 f98c 	bl	8005774 <MFRC522_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800545c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800545e:	ac07      	add	r4, sp, #28
 8005460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005462:	682b      	ldr	r3, [r5, #0]
 8005464:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005466:	4631      	mov	r1, r6
 8005468:	a807      	add	r0, sp, #28
 800546a:	f7fe fb6f 	bl	8003b4c <osThreadCreate>
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <main+0x248>)
 8005470:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8005472:	f7fe fb66 	bl	8003b42 <osKernelStart>
 8005476:	e7fe      	b.n	8005476 <main+0x20a>
 8005478:	40023800 	.word	0x40023800
 800547c:	40021000 	.word	0x40021000
 8005480:	10110000 	.word	0x10110000
 8005484:	40020800 	.word	0x40020800
 8005488:	40020000 	.word	0x40020000
 800548c:	40020c00 	.word	0x40020c00
 8005490:	000186a0 	.word	0x000186a0
 8005494:	20003e10 	.word	0x20003e10
 8005498:	40005400 	.word	0x40005400
 800549c:	20003ebc 	.word	0x20003ebc
 80054a0:	40003800 	.word	0x40003800
 80054a4:	00017700 	.word	0x00017700
 80054a8:	20003e64 	.word	0x20003e64
 80054ac:	40013000 	.word	0x40013000
 80054b0:	08006d48 	.word	0x08006d48
 80054b4:	20003e0c 	.word	0x20003e0c

080054b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80054b8:	6802      	ldr	r2, [r0, #0]
 80054ba:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80054bc:	429a      	cmp	r2, r3
 80054be:	d101      	bne.n	80054c4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80054c0:	f7fb b880 	b.w	80005c4 <HAL_IncTick>
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000

080054cc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80054cc:	e7fe      	b.n	80054cc <_Error_Handler>
	...

080054d0 <SPI1SendByte>:
#include "rc522.h"

extern SPI_HandleTypeDef hspi1;


uint8_t SPI1SendByte(uint8_t data) {
 80054d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
	HAL_StatusTypeDef x = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 80054d2:	230a      	movs	r3, #10
	writeCommand[0] = data;
 80054d4:	f88d 0008 	strb.w	r0, [sp, #8]
	HAL_StatusTypeDef x = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	aa03      	add	r2, sp, #12
 80054dc:	2301      	movs	r3, #1
 80054de:	a902      	add	r1, sp, #8
 80054e0:	4803      	ldr	r0, [pc, #12]	; (80054f0 <SPI1SendByte+0x20>)
 80054e2:	f7fc fce7 	bl	8001eb4 <HAL_SPI_TransmitReceive>
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 80054e6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80054ea:	b005      	add	sp, #20
 80054ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80054f0:	20003e64 	.word	0x20003e64

080054f4 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 80054f4:	b570      	push	{r4, r5, r6, lr}
	cs_reset();
 80054f6:	4c0a      	ldr	r4, [pc, #40]	; (8005520 <SPI1_WriteReg+0x2c>)
 80054f8:	2200      	movs	r2, #0
void SPI1_WriteReg(uint8_t address, uint8_t value) {
 80054fa:	4606      	mov	r6, r0
 80054fc:	460d      	mov	r5, r1
	cs_reset();
 80054fe:	4620      	mov	r0, r4
 8005500:	2110      	movs	r1, #16
 8005502:	f7fb f9e1 	bl	80008c8 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8005506:	4630      	mov	r0, r6
 8005508:	f7ff ffe2 	bl	80054d0 <SPI1SendByte>
	SPI1SendByte(value);
 800550c:	4628      	mov	r0, r5
 800550e:	f7ff ffdf 	bl	80054d0 <SPI1SendByte>
	cs_set();
 8005512:	4620      	mov	r0, r4
 8005514:	2201      	movs	r2, #1
 8005516:	2110      	movs	r1, #16
}
 8005518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cs_set();
 800551c:	f7fb b9d4 	b.w	80008c8 <HAL_GPIO_WritePin>
 8005520:	40020000 	.word	0x40020000

08005524 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8005524:	b538      	push	{r3, r4, r5, lr}
	uint8_t	val;

	cs_reset();
 8005526:	4c0a      	ldr	r4, [pc, #40]	; (8005550 <SPI1_ReadReg+0x2c>)
 8005528:	2200      	movs	r2, #0
 800552a:	2110      	movs	r1, #16
uint8_t SPI1_ReadReg(uint8_t address) {
 800552c:	4605      	mov	r5, r0
	cs_reset();
 800552e:	4620      	mov	r0, r4
 8005530:	f7fb f9ca 	bl	80008c8 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8005534:	4628      	mov	r0, r5
 8005536:	f7ff ffcb 	bl	80054d0 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800553a:	2000      	movs	r0, #0
 800553c:	f7ff ffc8 	bl	80054d0 <SPI1SendByte>
	cs_set();
 8005540:	2201      	movs	r2, #1
	val = SPI1SendByte(0x00);
 8005542:	4605      	mov	r5, r0
	cs_set();
 8005544:	2110      	movs	r1, #16
 8005546:	4620      	mov	r0, r4
 8005548:	f7fb f9be 	bl	80008c8 <HAL_GPIO_WritePin>
	return val;
}
 800554c:	4628      	mov	r0, r5
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	40020000 	.word	0x40020000

08005554 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8005554:	0040      	lsls	r0, r0, #1
 	SPI1_WriteReg(addr, val);
 8005556:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 800555a:	f7ff bfcb 	b.w	80054f4 <SPI1_WriteReg>

0800555e <MFRC522_ReadRegister>:
}

uint8_t MFRC522_ReadRegister(uint8_t addr) {
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 800555e:	0040      	lsls	r0, r0, #1
 8005560:	f000 007e 	and.w	r0, r0, #126	; 0x7e
	val = SPI1_ReadReg(addr);
 8005564:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8005568:	f7ff bfdc 	b.w	8005524 <SPI1_ReadReg>

0800556c <MFRC522_Compare>:
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
	MFRC522_Halt();																					// Command card into hibernation
	return status;
}

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 800556c:	b510      	push	{r4, lr}
 800556e:	1e43      	subs	r3, r0, #1
 8005570:	3901      	subs	r1, #1
 8005572:	3004      	adds	r0, #4
	uint8_t i;
	for (i = 0; i < 5; i++) {
		if (CardID[i] != CompareID[i]) return MI_ERR;
 8005574:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8005578:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800557c:	4294      	cmp	r4, r2
 800557e:	d103      	bne.n	8005588 <MFRC522_Compare+0x1c>
	for (i = 0; i < 5; i++) {
 8005580:	4283      	cmp	r3, r0
 8005582:	d1f7      	bne.n	8005574 <MFRC522_Compare+0x8>
	}
	return MI_OK;
 8005584:	2000      	movs	r0, #0
 8005586:	bd10      	pop	{r4, pc}
		if (CardID[i] != CompareID[i]) return MI_ERR;
 8005588:	2002      	movs	r0, #2
}
 800558a:	bd10      	pop	{r4, pc}

0800558c <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4605      	mov	r5, r0
 8005590:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8005592:	f7ff ffe4 	bl	800555e <MFRC522_ReadRegister>
 8005596:	ea40 0104 	orr.w	r1, r0, r4
 800559a:	b2c9      	uxtb	r1, r1
 800559c:	4628      	mov	r0, r5
}
 800559e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80055a2:	f7ff bfd7 	b.w	8005554 <MFRC522_WriteRegister>

080055a6 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80055a6:	b538      	push	{r3, r4, r5, lr}
 80055a8:	4605      	mov	r5, r0
 80055aa:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 80055ac:	f7ff ffd7 	bl	800555e <MFRC522_ReadRegister>
 80055b0:	ea20 0104 	bic.w	r1, r0, r4
 80055b4:	b2c9      	uxtb	r1, r1
 80055b6:	4628      	mov	r0, r5
}
 80055b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 80055bc:	f7ff bfca 	b.w	8005554 <MFRC522_WriteRegister>

080055c0 <MFRC522_ToCard>:
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
	return status;
}

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80055c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80055c4:	280c      	cmp	r0, #12
uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80055c6:	4681      	mov	r9, r0
 80055c8:	460f      	mov	r7, r1
 80055ca:	4692      	mov	sl, r2
 80055cc:	461e      	mov	r6, r3
 80055ce:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	switch (command) {
 80055d2:	d03e      	beq.n	8005652 <MFRC522_ToCard+0x92>
 80055d4:	280e      	cmp	r0, #14
 80055d6:	d03f      	beq.n	8005658 <MFRC522_ToCard+0x98>
	uint8_t waitIRq = 0x00;
 80055d8:	2500      	movs	r5, #0
	uint8_t irqEn = 0x00;
 80055da:	462c      	mov	r4, r5
 	SPI1_WriteReg(addr, val);
 80055dc:	f044 0180 	orr.w	r1, r4, #128	; 0x80
 80055e0:	2004      	movs	r0, #4
 80055e2:	f7ff ff87 	bl	80054f4 <SPI1_WriteReg>
		default:
		break;
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80055e6:	2180      	movs	r1, #128	; 0x80
 80055e8:	2004      	movs	r0, #4
 80055ea:	f7ff ffdc 	bl	80055a6 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80055ee:	2180      	movs	r1, #128	; 0x80
 80055f0:	200a      	movs	r0, #10
 80055f2:	f7ff ffcb 	bl	800558c <MFRC522_SetBitMask>
 	SPI1_WriteReg(addr, val);
 80055f6:	2100      	movs	r1, #0
 80055f8:	2002      	movs	r0, #2
 80055fa:	f7ff ff7b 	bl	80054f4 <SPI1_WriteReg>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80055fe:	46bb      	mov	fp, r7
 8005600:	fa1f fa8a 	uxth.w	sl, sl
 8005604:	ebab 0307 	sub.w	r3, fp, r7
 8005608:	b29b      	uxth	r3, r3
 800560a:	459a      	cmp	sl, r3
 800560c:	d827      	bhi.n	800565e <MFRC522_ToCard+0x9e>
 	SPI1_WriteReg(addr, val);
 800560e:	4649      	mov	r1, r9
 8005610:	2002      	movs	r0, #2
 8005612:	f7ff ff6f 	bl	80054f4 <SPI1_WriteReg>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 8005616:	f1b9 0f0c 	cmp.w	r9, #12
 800561a:	d103      	bne.n	8005624 <MFRC522_ToCard+0x64>
 800561c:	2180      	movs	r1, #128	; 0x80
 800561e:	200d      	movs	r0, #13
 8005620:	f7ff ffb4 	bl	800558c <MFRC522_SetBitMask>
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8005624:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8005628:	f045 0a01 	orr.w	sl, r5, #1
	val = SPI1_ReadReg(addr);
 800562c:	2088      	movs	r0, #136	; 0x88
 800562e:	f7ff ff79 	bl	8005524 <SPI1_ReadReg>
		i--;
 8005632:	3f01      	subs	r7, #1
 8005634:	b2bf      	uxth	r7, r7
	val = SPI1_ReadReg(addr);
 8005636:	4605      	mov	r5, r0
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8005638:	b117      	cbz	r7, 8005640 <MFRC522_ToCard+0x80>
 800563a:	ea10 0f0a 	tst.w	r0, sl
 800563e:	d0f5      	beq.n	800562c <MFRC522_ToCard+0x6c>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	200d      	movs	r0, #13
 8005644:	f7ff ffaf 	bl	80055a6 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8005648:	b97f      	cbnz	r7, 800566a <MFRC522_ToCard+0xaa>
	uint8_t status = MI_ERR;
 800564a:	2502      	movs	r5, #2
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
			}
		} else status = MI_ERR;
	}
	return status;
}
 800564c:	4628      	mov	r0, r5
 800564e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			waitIRq = 0x30;
 8005652:	2530      	movs	r5, #48	; 0x30
			irqEn = 0x77;
 8005654:	2477      	movs	r4, #119	; 0x77
			break;
 8005656:	e7c1      	b.n	80055dc <MFRC522_ToCard+0x1c>
			waitIRq = 0x10;
 8005658:	2510      	movs	r5, #16
			irqEn = 0x12;
 800565a:	2412      	movs	r4, #18
 800565c:	e7be      	b.n	80055dc <MFRC522_ToCard+0x1c>
 	SPI1_WriteReg(addr, val);
 800565e:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8005662:	2012      	movs	r0, #18
 8005664:	f7ff ff46 	bl	80054f4 <SPI1_WriteReg>
 8005668:	e7cc      	b.n	8005604 <MFRC522_ToCard+0x44>
	val = SPI1_ReadReg(addr);
 800566a:	208c      	movs	r0, #140	; 0x8c
 800566c:	f7ff ff5a 	bl	8005524 <SPI1_ReadReg>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8005670:	f010 0f1b 	tst.w	r0, #27
 8005674:	d1e9      	bne.n	800564a <MFRC522_ToCard+0x8a>
			status = MI_OK;
 8005676:	f004 0401 	and.w	r4, r4, #1
			if (command == PCD_TRANSCEIVE) {
 800567a:	f1b9 0f0c 	cmp.w	r9, #12
			status = MI_OK;
 800567e:	ea05 0504 	and.w	r5, r5, r4
			if (command == PCD_TRANSCEIVE) {
 8005682:	d1e3      	bne.n	800564c <MFRC522_ToCard+0x8c>
	val = SPI1_ReadReg(addr);
 8005684:	2094      	movs	r0, #148	; 0x94
 8005686:	f7ff ff4d 	bl	8005524 <SPI1_ReadReg>
 800568a:	4604      	mov	r4, r0
 800568c:	2098      	movs	r0, #152	; 0x98
 800568e:	f7ff ff49 	bl	8005524 <SPI1_ReadReg>
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8005692:	f010 0007 	ands.w	r0, r0, #7
 8005696:	bf1b      	ittet	ne
 8005698:	f104 33ff 	addne.w	r3, r4, #4294967295
 800569c:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
 80056a0:	00e3      	lsleq	r3, r4, #3
 80056a2:	f8a8 0000 	strhne.w	r0, [r8]
 80056a6:	bf08      	it	eq
 80056a8:	f8a8 3000 	strheq.w	r3, [r8]
				if (n == 0) n = 1;
 80056ac:	b17c      	cbz	r4, 80056ce <MFRC522_ToCard+0x10e>
 80056ae:	2c10      	cmp	r4, #16
 80056b0:	bf28      	it	cs
 80056b2:	2410      	movcs	r4, #16
 80056b4:	b2e4      	uxtb	r4, r4
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 80056b6:	4637      	mov	r7, r6
 80056b8:	b2a4      	uxth	r4, r4
 80056ba:	1bbb      	subs	r3, r7, r6
 80056bc:	b29b      	uxth	r3, r3
 80056be:	429c      	cmp	r4, r3
 80056c0:	d9c4      	bls.n	800564c <MFRC522_ToCard+0x8c>
	val = SPI1_ReadReg(addr);
 80056c2:	2092      	movs	r0, #146	; 0x92
 80056c4:	f7ff ff2e 	bl	8005524 <SPI1_ReadReg>
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 80056c8:	f807 0b01 	strb.w	r0, [r7], #1
 80056cc:	e7f5      	b.n	80056ba <MFRC522_ToCard+0xfa>
				if (n == 0) n = 1;
 80056ce:	2401      	movs	r4, #1
 80056d0:	e7f1      	b.n	80056b6 <MFRC522_ToCard+0xf6>

080056d2 <MFRC522_Request>:
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80056d2:	b530      	push	{r4, r5, lr}
 80056d4:	460c      	mov	r4, r1
 80056d6:	b085      	sub	sp, #20
 80056d8:	4605      	mov	r5, r0
 	SPI1_WriteReg(addr, val);
 80056da:	2107      	movs	r1, #7
 80056dc:	201a      	movs	r0, #26
 80056de:	f7ff ff09 	bl	80054f4 <SPI1_WriteReg>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80056e2:	f10d 030e 	add.w	r3, sp, #14
 80056e6:	9300      	str	r3, [sp, #0]
	TagType[0] = reqMode;
 80056e8:	7025      	strb	r5, [r4, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80056ea:	4623      	mov	r3, r4
 80056ec:	2201      	movs	r2, #1
 80056ee:	4621      	mov	r1, r4
 80056f0:	200c      	movs	r0, #12
 80056f2:	f7ff ff65 	bl	80055c0 <MFRC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 80056f6:	b930      	cbnz	r0, 8005706 <MFRC522_Request+0x34>
 80056f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	bf18      	it	ne
 8005700:	2002      	movne	r0, #2
}
 8005702:	b005      	add	sp, #20
 8005704:	bd30      	pop	{r4, r5, pc}
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8005706:	2002      	movs	r0, #2
 8005708:	e7fb      	b.n	8005702 <MFRC522_Request+0x30>

0800570a <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800570a:	b530      	push	{r4, r5, lr}
 	SPI1_WriteReg(addr, val);
 800570c:	2100      	movs	r1, #0
uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800570e:	4604      	mov	r4, r0
 8005710:	b085      	sub	sp, #20
 	SPI1_WriteReg(addr, val);
 8005712:	201a      	movs	r0, #26
 8005714:	f7ff feee 	bl	80054f4 <SPI1_WriteReg>
	uint8_t i;
	uint8_t serNumCheck = 0;
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
	serNum[0] = PICC_ANTICOLL;
 8005718:	2393      	movs	r3, #147	; 0x93
 800571a:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20;
 800571c:	2320      	movs	r3, #32
 800571e:	7063      	strb	r3, [r4, #1]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8005720:	f10d 030e 	add.w	r3, sp, #14
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	2202      	movs	r2, #2
 8005728:	4623      	mov	r3, r4
 800572a:	4621      	mov	r1, r4
 800572c:	200c      	movs	r0, #12
 800572e:	f7ff ff47 	bl	80055c0 <MFRC522_ToCard>
	if (status == MI_OK) {
 8005732:	b960      	cbnz	r0, 800574e <MFRC522_Anticoll+0x44>
 8005734:	1e62      	subs	r2, r4, #1
 8005736:	1ce1      	adds	r1, r4, #3
 8005738:	4603      	mov	r3, r0
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800573a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800573e:	428a      	cmp	r2, r1
 8005740:	ea83 0305 	eor.w	r3, r3, r5
 8005744:	d1f9      	bne.n	800573a <MFRC522_Anticoll+0x30>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8005746:	7922      	ldrb	r2, [r4, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	bf18      	it	ne
 800574c:	2002      	movne	r0, #2
	}
	return status;
}
 800574e:	b005      	add	sp, #20
 8005750:	bd30      	pop	{r4, r5, pc}

08005752 <MFRC522_Reset>:
 	SPI1_WriteReg(addr, val);
 8005752:	210f      	movs	r1, #15
 8005754:	2002      	movs	r0, #2
 8005756:	f7ff becd 	b.w	80054f4 <SPI1_WriteReg>

0800575a <MFRC522_AntennaOn>:

void MFRC522_Reset(void) {
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
}

void MFRC522_AntennaOn(void) {
 800575a:	b508      	push	{r3, lr}
	val = SPI1_ReadReg(addr);
 800575c:	20a8      	movs	r0, #168	; 0xa8
 800575e:	f7ff fee1 	bl	8005524 <SPI1_ReadReg>
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8005762:	0783      	lsls	r3, r0, #30
 8005764:	d105      	bne.n	8005772 <MFRC522_AntennaOn+0x18>
 8005766:	2103      	movs	r1, #3
 8005768:	2014      	movs	r0, #20
}
 800576a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800576e:	f7ff bf0d 	b.w	800558c <MFRC522_SetBitMask>
 8005772:	bd08      	pop	{r3, pc}

08005774 <MFRC522_Init>:
void MFRC522_Init(void) {
 8005774:	b508      	push	{r3, lr}
	MFRC522_Reset();
 8005776:	f7ff ffec 	bl	8005752 <MFRC522_Reset>
 	SPI1_WriteReg(addr, val);
 800577a:	218d      	movs	r1, #141	; 0x8d
 800577c:	2054      	movs	r0, #84	; 0x54
 800577e:	f7ff feb9 	bl	80054f4 <SPI1_WriteReg>
 8005782:	213e      	movs	r1, #62	; 0x3e
 8005784:	2056      	movs	r0, #86	; 0x56
 8005786:	f7ff feb5 	bl	80054f4 <SPI1_WriteReg>
 800578a:	211e      	movs	r1, #30
 800578c:	205a      	movs	r0, #90	; 0x5a
 800578e:	f7ff feb1 	bl	80054f4 <SPI1_WriteReg>
 8005792:	2100      	movs	r1, #0
 8005794:	2058      	movs	r0, #88	; 0x58
 8005796:	f7ff fead 	bl	80054f4 <SPI1_WriteReg>
 800579a:	2170      	movs	r1, #112	; 0x70
 800579c:	204c      	movs	r0, #76	; 0x4c
 800579e:	f7ff fea9 	bl	80054f4 <SPI1_WriteReg>
 80057a2:	2140      	movs	r1, #64	; 0x40
 80057a4:	202a      	movs	r0, #42	; 0x2a
 80057a6:	f7ff fea5 	bl	80054f4 <SPI1_WriteReg>
 80057aa:	213d      	movs	r1, #61	; 0x3d
 80057ac:	2022      	movs	r0, #34	; 0x22
 80057ae:	f7ff fea1 	bl	80054f4 <SPI1_WriteReg>
}
 80057b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MFRC522_AntennaOn();																		// Open the antenna
 80057b6:	f7ff bfd0 	b.w	800575a <MFRC522_AntennaOn>
	...

080057bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057bc:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057be:	4b22      	ldr	r3, [pc, #136]	; (8005848 <HAL_MspInit+0x8c>)
 80057c0:	2400      	movs	r4, #0
 80057c2:	9400      	str	r4, [sp, #0]
 80057c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ca:	645a      	str	r2, [r3, #68]	; 0x44
 80057cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80057d2:	9200      	str	r2, [sp, #0]
 80057d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057d6:	9401      	str	r4, [sp, #4]
 80057d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057de:	641a      	str	r2, [r3, #64]	; 0x40
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057e8:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80057ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057ec:	f7fa ff10 	bl	8000610 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80057f0:	4622      	mov	r2, r4
 80057f2:	4621      	mov	r1, r4
 80057f4:	f06f 000b 	mvn.w	r0, #11
 80057f8:	f7fa ff1c 	bl	8000634 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80057fc:	4622      	mov	r2, r4
 80057fe:	4621      	mov	r1, r4
 8005800:	f06f 000a 	mvn.w	r0, #10
 8005804:	f7fa ff16 	bl	8000634 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005808:	4622      	mov	r2, r4
 800580a:	4621      	mov	r1, r4
 800580c:	f06f 0009 	mvn.w	r0, #9
 8005810:	f7fa ff10 	bl	8000634 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005814:	4622      	mov	r2, r4
 8005816:	4621      	mov	r1, r4
 8005818:	f06f 0004 	mvn.w	r0, #4
 800581c:	f7fa ff0a 	bl	8000634 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005820:	4622      	mov	r2, r4
 8005822:	4621      	mov	r1, r4
 8005824:	f06f 0003 	mvn.w	r0, #3
 8005828:	f7fa ff04 	bl	8000634 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800582c:	4622      	mov	r2, r4
 800582e:	210f      	movs	r1, #15
 8005830:	f06f 0001 	mvn.w	r0, #1
 8005834:	f7fa fefe 	bl	8000634 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8005838:	4622      	mov	r2, r4
 800583a:	210f      	movs	r1, #15
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	f7fa fef8 	bl	8000634 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005844:	b002      	add	sp, #8
 8005846:	bd10      	pop	{r4, pc}
 8005848:	40023800 	.word	0x40023800

0800584c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800584c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800584e:	6802      	ldr	r2, [r0, #0]
 8005850:	4b10      	ldr	r3, [pc, #64]	; (8005894 <HAL_I2C_MspInit+0x48>)
 8005852:	429a      	cmp	r2, r3
 8005854:	d11b      	bne.n	800588e <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005856:	f44f 7310 	mov.w	r3, #576	; 0x240
 800585a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800585c:	2312      	movs	r3, #18
 800585e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005860:	2301      	movs	r3, #1
 8005862:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005864:	2303      	movs	r3, #3
 8005866:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005868:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800586a:	eb0d 0103 	add.w	r1, sp, r3
 800586e:	480a      	ldr	r0, [pc, #40]	; (8005898 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005870:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005872:	f7fa ff53 	bl	800071c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005876:	2300      	movs	r3, #0
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	4b08      	ldr	r3, [pc, #32]	; (800589c <HAL_I2C_MspInit+0x50>)
 800587c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800587e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005882:	641a      	str	r2, [r3, #64]	; 0x40
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800588e:	b007      	add	sp, #28
 8005890:	f85d fb04 	ldr.w	pc, [sp], #4
 8005894:	40005400 	.word	0x40005400
 8005898:	40020400 	.word	0x40020400
 800589c:	40023800 	.word	0x40023800

080058a0 <HAL_I2S_MspInit>:
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80058a0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2s->Instance==SPI2)
 80058a2:	6802      	ldr	r2, [r0, #0]
 80058a4:	4b1a      	ldr	r3, [pc, #104]	; (8005910 <HAL_I2S_MspInit+0x70>)
 80058a6:	429a      	cmp	r2, r3
{
 80058a8:	b086      	sub	sp, #24
  if(hi2s->Instance==SPI2)
 80058aa:	d12e      	bne.n	800590a <HAL_I2S_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80058ac:	2400      	movs	r4, #0
 80058ae:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80058b2:	9400      	str	r4, [sp, #0]
 80058b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058b6:	4817      	ldr	r0, [pc, #92]	; (8005914 <HAL_I2S_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80058b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c0:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI2_CLK_ENABLE();
 80058c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ca:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80058cc:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ce:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80058d0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058d2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80058d4:	2306      	movs	r3, #6
 80058d6:	9305      	str	r3, [sp, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80058d8:	2605      	movs	r6, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058da:	9502      	str	r5, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058dc:	f7fa ff1e 	bl	800071c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80058e0:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058e2:	a901      	add	r1, sp, #4
 80058e4:	480b      	ldr	r0, [pc, #44]	; (8005914 <HAL_I2S_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80058e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058e8:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ea:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ec:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80058ee:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058f0:	f7fa ff14 	bl	800071c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80058f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058f8:	a901      	add	r1, sp, #4
 80058fa:	4807      	ldr	r0, [pc, #28]	; (8005918 <HAL_I2S_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80058fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058fe:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005900:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005902:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005904:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005906:	f7fa ff09 	bl	800071c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800590a:	b006      	add	sp, #24
 800590c:	bd70      	pop	{r4, r5, r6, pc}
 800590e:	bf00      	nop
 8005910:	40003800 	.word	0x40003800
 8005914:	40020800 	.word	0x40020800
 8005918:	40020400 	.word	0x40020400

0800591c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800591c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800591e:	6802      	ldr	r2, [r0, #0]
 8005920:	4b13      	ldr	r3, [pc, #76]	; (8005970 <HAL_SPI_MspInit+0x54>)
 8005922:	429a      	cmp	r2, r3
{
 8005924:	b087      	sub	sp, #28
  if(hspi->Instance==SPI1)
 8005926:	d121      	bne.n	800596c <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005928:	2400      	movs	r4, #0
 800592a:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800592e:	9400      	str	r4, [sp, #0]
 8005930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005932:	4810      	ldr	r0, [pc, #64]	; (8005974 <HAL_SPI_MspInit+0x58>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005938:	645a      	str	r2, [r3, #68]	; 0x44
 800593a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800593e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005946:	23e0      	movs	r3, #224	; 0xe0
 8005948:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800594a:	2302      	movs	r3, #2
 800594c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800594e:	2505      	movs	r5, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005950:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005952:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005954:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005956:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005958:	f7fa fee0 	bl	800071c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800595c:	2023      	movs	r0, #35	; 0x23
 800595e:	4622      	mov	r2, r4
 8005960:	4629      	mov	r1, r5
 8005962:	f7fa fe67 	bl	8000634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005966:	2023      	movs	r0, #35	; 0x23
 8005968:	f7fa fe98 	bl	800069c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800596c:	b007      	add	sp, #28
 800596e:	bd30      	pop	{r4, r5, pc}
 8005970:	40013000 	.word	0x40013000
 8005974:	40020000 	.word	0x40020000

08005978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005978:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800597a:	4601      	mov	r1, r0
{
 800597c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800597e:	2200      	movs	r2, #0
 8005980:	2019      	movs	r0, #25
 8005982:	f7fa fe57 	bl	8000634 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005986:	2019      	movs	r0, #25
 8005988:	f7fa fe88 	bl	800069c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800598c:	2500      	movs	r5, #0
 800598e:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <HAL_InitTick+0x68>)
 8005990:	9502      	str	r5, [sp, #8]
 8005992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005994:	4c13      	ldr	r4, [pc, #76]	; (80059e4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	645a      	str	r2, [r3, #68]	; 0x44
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80059a4:	a901      	add	r1, sp, #4
 80059a6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80059a8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80059aa:	f7fc f903 	bl	8001bb4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80059ae:	f7fc f8f1 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80059b2:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <HAL_InitTick+0x70>)
 80059b4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80059b6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80059ba:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80059bc:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <HAL_InitTick+0x74>)
 80059be:	fbb0 f0f3 	udiv	r0, r0, r3
 80059c2:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80059c4:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80059c6:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80059c8:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059ca:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80059cc:	f7fc fcea 	bl	80023a4 <HAL_TIM_Base_Init>
 80059d0:	b920      	cbnz	r0, 80059dc <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80059d2:	4620      	mov	r0, r4
 80059d4:	f7fc fbe9 	bl	80021aa <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80059d8:	b009      	add	sp, #36	; 0x24
 80059da:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80059dc:	2001      	movs	r0, #1
 80059de:	e7fb      	b.n	80059d8 <HAL_InitTick+0x60>
 80059e0:	40023800 	.word	0x40023800
 80059e4:	20003f04 	.word	0x20003f04
 80059e8:	40010000 	.word	0x40010000
 80059ec:	000f4240 	.word	0x000f4240

080059f0 <NMI_Handler>:
 80059f0:	4770      	bx	lr

080059f2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80059f2:	e7fe      	b.n	80059f2 <HardFault_Handler>

080059f4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80059f4:	e7fe      	b.n	80059f4 <MemManage_Handler>

080059f6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80059f6:	e7fe      	b.n	80059f6 <BusFault_Handler>

080059f8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80059f8:	e7fe      	b.n	80059f8 <UsageFault_Handler>

080059fa <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80059fa:	4770      	bx	lr

080059fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80059fc:	f7fe b924 	b.w	8003c48 <osSystickHandler>

08005a00 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a00:	4801      	ldr	r0, [pc, #4]	; (8005a08 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8005a02:	f7fc bbe1 	b.w	80021c8 <HAL_TIM_IRQHandler>
 8005a06:	bf00      	nop
 8005a08:	20003f04 	.word	0x20003f04

08005a0c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005a0c:	4801      	ldr	r0, [pc, #4]	; (8005a14 <SPI1_IRQHandler+0x8>)
 8005a0e:	f7fc bb4f 	b.w	80020b0 <HAL_SPI_IRQHandler>
 8005a12:	bf00      	nop
 8005a14:	20003e64 	.word	0x20003e64

08005a18 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005a18:	4801      	ldr	r0, [pc, #4]	; (8005a20 <OTG_FS_IRQHandler+0x8>)
 8005a1a:	f7fb b85d 	b.w	8000ad8 <HAL_HCD_IRQHandler>
 8005a1e:	bf00      	nop
 8005a20:	20004310 	.word	0x20004310

08005a24 <_write>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8005a24:	b510      	push	{r4, lr}
	int i=0;
	for(i=0 ; i<len ; i++)
 8005a26:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005a28:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	db01      	blt.n	8005a34 <_write+0x10>
		ITM_SendChar((*ptr++));
	return len;
}
 8005a30:	4610      	mov	r0, r2
 8005a32:	bd10      	pop	{r4, pc}
 8005a34:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8005a38:	07c0      	lsls	r0, r0, #31
 8005a3a:	d503      	bpl.n	8005a44 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005a3c:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005a40:	07c0      	lsls	r0, r0, #31
 8005a42:	d402      	bmi.n	8005a4a <_write+0x26>
	for(i=0 ; i<len ; i++)
 8005a44:	3301      	adds	r3, #1
 8005a46:	e7f1      	b.n	8005a2c <_write+0x8>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8005a48:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d0fb      	beq.n	8005a48 <_write+0x24>
		ITM_SendChar((*ptr++));
 8005a50:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005a52:	7020      	strb	r0, [r4, #0]
 8005a54:	e7f6      	b.n	8005a44 <_write+0x20>
	...

08005a58 <_sbrk>:
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <_sbrk+0x2c>)
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8005a5a:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <_sbrk+0x30>)
 8005a5c:	490b      	ldr	r1, [pc, #44]	; (8005a8c <_sbrk+0x34>)
{
 8005a5e:	b510      	push	{r4, lr}
  if (heap_end == 0)
 8005a60:	681c      	ldr	r4, [r3, #0]
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8005a62:	4411      	add	r1, r2
  if (heap_end == 0)
 8005a64:	b904      	cbnz	r4, 8005a68 <_sbrk+0x10>
    heap_end = &end;
 8005a66:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 8005a68:	681a      	ldr	r2, [r3, #0]
  if (heap_end + incr > max_heap)
 8005a6a:	4410      	add	r0, r2
 8005a6c:	4281      	cmp	r1, r0
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8005a6e:	bf37      	itett	cc
 8005a70:	4b07      	ldrcc	r3, [pc, #28]	; (8005a90 <_sbrk+0x38>)
    return (caddr_t) -1;
  }

  heap_end += incr;
 8005a72:	6018      	strcs	r0, [r3, #0]
    errno = ENOMEM;
 8005a74:	220c      	movcc	r2, #12
    return (caddr_t) -1;
 8005a76:	f04f 30ff 	movcc.w	r0, #4294967295
    errno = ENOMEM;
 8005a7a:	bf34      	ite	cc
 8005a7c:	601a      	strcc	r2, [r3, #0]

  return (caddr_t) prev_heap_end;
 8005a7e:	4610      	movcs	r0, r2
}
 8005a80:	bd10      	pop	{r4, pc}
 8005a82:	bf00      	nop
 8005a84:	20003df8 	.word	0x20003df8
 8005a88:	200045ac 	.word	0x200045ac
 8005a8c:	00000200 	.word	0x00000200
 8005a90:	200045a8 	.word	0x200045a8

08005a94 <_close>:

int _close(int32_t file)
{
  return -1;
}
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295
 8005a98:	4770      	bx	lr

08005a9a <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
  st->st_mode = S_IFCHR;
 8005a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a9e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	4770      	bx	lr

08005aa4 <_isatty>:

int _isatty(int32_t file)
{
  return 1;
}
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	4770      	bx	lr

08005aa8 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
  return 0;
}
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4770      	bx	lr

08005aac <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
  return 0;
}
 8005aac:	2000      	movs	r0, #0
 8005aae:	4770      	bx	lr

08005ab0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ab0:	490f      	ldr	r1, [pc, #60]	; (8005af0 <SystemInit+0x40>)
 8005ab2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005ab6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <SystemInit+0x44>)
 8005ac0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005ac2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005ac4:	f042 0201 	orr.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005aca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005ad2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005ad8:	4a07      	ldr	r2, [pc, #28]	; (8005af8 <SystemInit+0x48>)
 8005ada:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005ae4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ae6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aea:	608b      	str	r3, [r1, #8]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000ed00 	.word	0xe000ed00
 8005af4:	40023800 	.word	0x40023800
 8005af8:	24003010 	.word	0x24003010

08005afc <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8005afc:	2904      	cmp	r1, #4
 8005afe:	d00a      	beq.n	8005b16 <USBH_UserProcess+0x1a>
 8005b00:	2905      	cmp	r1, #5
 8005b02:	d004      	beq.n	8005b0e <USBH_UserProcess+0x12>
 8005b04:	2902      	cmp	r1, #2
 8005b06:	d105      	bne.n	8005b14 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8005b08:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <USBH_UserProcess+0x20>)
 8005b0a:	7019      	strb	r1, [r3, #0]
  break;
 8005b0c:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8005b0e:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8005b10:	4b02      	ldr	r3, [pc, #8]	; (8005b1c <USBH_UserProcess+0x20>)
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	4770      	bx	lr
 8005b16:	2201      	movs	r2, #1
 8005b18:	e7fa      	b.n	8005b10 <USBH_UserProcess+0x14>
 8005b1a:	bf00      	nop
 8005b1c:	20003dfc 	.word	0x20003dfc

08005b20 <MX_USB_HOST_Init>:
{
 8005b20:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8005b22:	4c07      	ldr	r4, [pc, #28]	; (8005b40 <MX_USB_HOST_Init+0x20>)
 8005b24:	4907      	ldr	r1, [pc, #28]	; (8005b44 <MX_USB_HOST_Init+0x24>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f7fd fb23 	bl	8003174 <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS);
 8005b2e:	4620      	mov	r0, r4
 8005b30:	4905      	ldr	r1, [pc, #20]	; (8005b48 <MX_USB_HOST_Init+0x28>)
 8005b32:	f7fd fb53 	bl	80031dc <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 8005b36:	4620      	mov	r0, r4
}
 8005b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 8005b3c:	f7fd bb81 	b.w	8003242 <USBH_Start>
 8005b40:	20003f40 	.word	0x20003f40
 8005b44:	08005afd 	.word	0x08005afd
 8005b48:	20000004 	.word	0x20000004

08005b4c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8005b4c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8005b4e:	6803      	ldr	r3, [r0, #0]
 8005b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8005b54:	b086      	sub	sp, #24
  if(hcdHandle->Instance==USB_OTG_FS)
 8005b56:	d125      	bne.n	8005ba4 <HAL_HCD_MspInit+0x58>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005b58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005b5c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b5e:	2302      	movs	r3, #2
 8005b60:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b62:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b64:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b68:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005b6a:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b6c:	480e      	ldr	r0, [pc, #56]	; (8005ba8 <HAL_HCD_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005b6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b70:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b72:	f7fa fdd3 	bl	800071c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <HAL_HCD_MspInit+0x60>)
 8005b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b7e:	635a      	str	r2, [r3, #52]	; 0x34
 8005b80:	9400      	str	r4, [sp, #0]
 8005b82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b90:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8005b92:	2043      	movs	r0, #67	; 0x43
 8005b94:	4622      	mov	r2, r4
 8005b96:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005b98:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8005b9a:	f7fa fd4b 	bl	8000634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005b9e:	2043      	movs	r0, #67	; 0x43
 8005ba0:	f7fa fd7c 	bl	800069c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005ba4:	b006      	add	sp, #24
 8005ba6:	bd10      	pop	{r4, pc}
 8005ba8:	40020000 	.word	0x40020000
 8005bac:	40023800 	.word	0x40023800

08005bb0 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8005bb0:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8005bb4:	f7fd bcb0 	b.w	8003518 <USBH_LL_IncTimer>

08005bb8 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8005bb8:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8005bbc:	f7fd bcba 	b.w	8003534 <USBH_LL_Connect>

08005bc0 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8005bc0:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8005bc4:	f7fd bcd0 	b.w	8003568 <USBH_LL_Disconnect>

08005bc8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8005bc8:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8005bcc:	f7fd bcee 	b.w	80035ac <USBH_LL_NotifyURBChange>

08005bd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8005bd0:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8005bd2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8005bd6:	2b01      	cmp	r3, #1
{
 8005bd8:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8005bda:	d11e      	bne.n	8005c1a <USBH_LL_Init+0x4a>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005bdc:	4810      	ldr	r0, [pc, #64]	; (8005c20 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;
 8005bde:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005be2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005be6:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8005be8:	2308      	movs	r3, #8
 8005bea:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005bec:	2303      	movs	r3, #3
 8005bee:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005bf0:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005bf2:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8005bf4:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005bf8:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005bfa:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005bfc:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005bfe:	f7fa feaf 	bl	8000960 <HAL_HCD_Init>
 8005c02:	b118      	cbz	r0, 8005c0c <USBH_LL_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005c04:	21d9      	movs	r1, #217	; 0xd9
 8005c06:	4807      	ldr	r0, [pc, #28]	; (8005c24 <USBH_LL_Init+0x54>)
 8005c08:	f7ff fc60 	bl	80054cc <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8005c0c:	4804      	ldr	r0, [pc, #16]	; (8005c20 <USBH_LL_Init+0x50>)
 8005c0e:	f7fb faa7 	bl	8001160 <HAL_HCD_GetCurrentFrame>
 8005c12:	4601      	mov	r1, r0
 8005c14:	4620      	mov	r0, r4
 8005c16:	f7fd fc7c 	bl	8003512 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	bf00      	nop
 8005c20:	20004310 	.word	0x20004310
 8005c24:	08006dac 	.word	0x08006dac

08005c28 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005c28:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8005c2a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005c2e:	f7fb fa61 	bl	80010f4 <HAL_HCD_Start>
 8005c32:	2803      	cmp	r0, #3
 8005c34:	bf9a      	itte	ls
 8005c36:	4b02      	ldrls	r3, [pc, #8]	; (8005c40 <USBH_LL_Start+0x18>)
 8005c38:	5c18      	ldrbls	r0, [r3, r0]
 8005c3a:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8005c3c:	bd08      	pop	{r3, pc}
 8005c3e:	bf00      	nop
 8005c40:	08006da8 	.word	0x08006da8

08005c44 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005c44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8005c46:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005c4a:	f7fb fa69 	bl	8001120 <HAL_HCD_Stop>
 8005c4e:	2803      	cmp	r0, #3
 8005c50:	bf9a      	itte	ls
 8005c52:	4b02      	ldrls	r3, [pc, #8]	; (8005c5c <USBH_LL_Stop+0x18>)
 8005c54:	5c18      	ldrbls	r0, [r3, r0]
 8005c56:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8005c58:	bd08      	pop	{r3, pc}
 8005c5a:	bf00      	nop
 8005c5c:	08006da8 	.word	0x08006da8

08005c60 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8005c60:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8005c62:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005c66:	f7fb fa7e 	bl	8001166 <HAL_HCD_GetCurrentSpeed>
 8005c6a:	2802      	cmp	r0, #2
 8005c6c:	bf9a      	itte	ls
 8005c6e:	4b02      	ldrls	r3, [pc, #8]	; (8005c78 <USBH_LL_GetSpeed+0x18>)
 8005c70:	5c18      	ldrbls	r0, [r3, r0]
 8005c72:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8005c74:	bd08      	pop	{r3, pc}
 8005c76:	bf00      	nop
 8005c78:	08006da5 	.word	0x08006da5

08005c7c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8005c7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8005c7e:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005c82:	f7fb fa5f 	bl	8001144 <HAL_HCD_ResetPort>
 8005c86:	2803      	cmp	r0, #3
 8005c88:	bf9a      	itte	ls
 8005c8a:	4b02      	ldrls	r3, [pc, #8]	; (8005c94 <USBH_LL_ResetPort+0x18>)
 8005c8c:	5c18      	ldrbls	r0, [r3, r0]
 8005c8e:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8005c90:	bd08      	pop	{r3, pc}
 8005c92:	bf00      	nop
 8005c94:	08006da8 	.word	0x08006da8

08005c98 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8005c98:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005c9c:	f7fb ba5b 	b.w	8001156 <HAL_HCD_HC_GetXferCount>

08005ca0 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005ca2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005ca6:	9402      	str	r4, [sp, #8]
 8005ca8:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8005cac:	9401      	str	r4, [sp, #4]
 8005cae:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005cb2:	9400      	str	r4, [sp, #0]
 8005cb4:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005cb8:	f7fa fe0f 	bl	80008da <HAL_HCD_HC_Init>
 8005cbc:	2803      	cmp	r0, #3
 8005cbe:	bf9a      	itte	ls
 8005cc0:	4b02      	ldrls	r3, [pc, #8]	; (8005ccc <USBH_LL_OpenPipe+0x2c>)
 8005cc2:	5c18      	ldrbls	r0, [r3, r0]
 8005cc4:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8005cc6:	b004      	add	sp, #16
 8005cc8:	bd10      	pop	{r4, pc}
 8005cca:	bf00      	nop
 8005ccc:	08006da8 	.word	0x08006da8

08005cd0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005cd0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8005cd2:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005cd6:	f7fa fe31 	bl	800093c <HAL_HCD_HC_Halt>
 8005cda:	2803      	cmp	r0, #3
 8005cdc:	bf9a      	itte	ls
 8005cde:	4b02      	ldrls	r3, [pc, #8]	; (8005ce8 <USBH_LL_ClosePipe+0x18>)
 8005ce0:	5c18      	ldrbls	r0, [r3, r0]
 8005ce2:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8005ce4:	bd08      	pop	{r3, pc}
 8005ce6:	bf00      	nop
 8005ce8:	08006da8 	.word	0x08006da8

08005cec <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005cee:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8005cf2:	9403      	str	r4, [sp, #12]
 8005cf4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005cf8:	9402      	str	r4, [sp, #8]
 8005cfa:	9c07      	ldr	r4, [sp, #28]
 8005cfc:	9401      	str	r4, [sp, #4]
 8005cfe:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005d02:	9400      	str	r4, [sp, #0]
 8005d04:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005d08:	f7fa fe66 	bl	80009d8 <HAL_HCD_HC_SubmitRequest>
 8005d0c:	2803      	cmp	r0, #3
 8005d0e:	bf9a      	itte	ls
 8005d10:	4b02      	ldrls	r3, [pc, #8]	; (8005d1c <USBH_LL_SubmitURB+0x30>)
 8005d12:	5c18      	ldrbls	r0, [r3, r0]
 8005d14:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8005d16:	b004      	add	sp, #16
 8005d18:	bd10      	pop	{r4, pc}
 8005d1a:	bf00      	nop
 8005d1c:	08006da8 	.word	0x08006da8

08005d20 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8005d20:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005d24:	f7fb ba11 	b.w	800114a <HAL_HCD_HC_GetURBState>

08005d28 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8005d28:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8005d2a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d102      	bne.n	8005d38 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8005d32:	4608      	mov	r0, r1
 8005d34:	f000 f816 	bl	8005d64 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8005d38:	20c8      	movs	r0, #200	; 0xc8
 8005d3a:	f7fa fc55 	bl	80005e8 <HAL_Delay>
  return USBH_OK;
}
 8005d3e:	2000      	movs	r0, #0
 8005d40:	bd08      	pop	{r3, pc}

08005d42 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8005d42:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0

  if(pHandle->hc[pipe].ep_is_in)
 8005d46:	2328      	movs	r3, #40	; 0x28
 8005d48:	fb03 0101 	mla	r1, r3, r1, r0
 8005d4c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8005d50:	b11b      	cbz	r3, 8005d5a <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8005d52:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8005d56:	2000      	movs	r0, #0
 8005d58:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8005d5a:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8005d5e:	e7fa      	b.n	8005d56 <USBH_LL_SetToggle+0x14>

08005d60 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8005d60:	f7fa bc42 	b.w	80005e8 <HAL_Delay>

08005d64 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8005d64:	fab0 f280 	clz	r2, r0
 8005d68:	0952      	lsrs	r2, r2, #5
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	4801      	ldr	r0, [pc, #4]	; (8005d74 <MX_DriverVbusFS+0x10>)
 8005d6e:	f7fa bdab 	b.w	80008c8 <HAL_GPIO_WritePin>
 8005d72:	bf00      	nop
 8005d74:	40020800 	.word	0x40020800

08005d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005db0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d7e:	e003      	b.n	8005d88 <LoopCopyDataInit>

08005d80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005d80:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005d82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005d84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005d86:	3104      	adds	r1, #4

08005d88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005d88:	480b      	ldr	r0, [pc, #44]	; (8005db8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005d8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005d8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005d90:	d3f6      	bcc.n	8005d80 <CopyDataInit>
  ldr  r2, =_sbss
 8005d92:	4a0b      	ldr	r2, [pc, #44]	; (8005dc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005d94:	e002      	b.n	8005d9c <LoopFillZerobss>

08005d96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005d96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005d98:	f842 3b04 	str.w	r3, [r2], #4

08005d9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005d9c:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005d9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005da0:	d3f9      	bcc.n	8005d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005da2:	f7ff fe85 	bl	8005ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005da6:	f000 f811 	bl	8005dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005daa:	f7ff fa5f 	bl	800526c <main>
  bx  lr    
 8005dae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005db0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005db4:	08006e68 	.word	0x08006e68
  ldr  r0, =_sdata
 8005db8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005dbc:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8005dc0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8005dc4:	200045ac 	.word	0x200045ac

08005dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dc8:	e7fe      	b.n	8005dc8 <ADC_IRQHandler>
	...

08005dcc <__libc_init_array>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	4e0d      	ldr	r6, [pc, #52]	; (8005e04 <__libc_init_array+0x38>)
 8005dd0:	4c0d      	ldr	r4, [pc, #52]	; (8005e08 <__libc_init_array+0x3c>)
 8005dd2:	1ba4      	subs	r4, r4, r6
 8005dd4:	10a4      	asrs	r4, r4, #2
 8005dd6:	2500      	movs	r5, #0
 8005dd8:	42a5      	cmp	r5, r4
 8005dda:	d109      	bne.n	8005df0 <__libc_init_array+0x24>
 8005ddc:	4e0b      	ldr	r6, [pc, #44]	; (8005e0c <__libc_init_array+0x40>)
 8005dde:	4c0c      	ldr	r4, [pc, #48]	; (8005e10 <__libc_init_array+0x44>)
 8005de0:	f000 ff98 	bl	8006d14 <_init>
 8005de4:	1ba4      	subs	r4, r4, r6
 8005de6:	10a4      	asrs	r4, r4, #2
 8005de8:	2500      	movs	r5, #0
 8005dea:	42a5      	cmp	r5, r4
 8005dec:	d105      	bne.n	8005dfa <__libc_init_array+0x2e>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005df4:	4798      	blx	r3
 8005df6:	3501      	adds	r5, #1
 8005df8:	e7ee      	b.n	8005dd8 <__libc_init_array+0xc>
 8005dfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dfe:	4798      	blx	r3
 8005e00:	3501      	adds	r5, #1
 8005e02:	e7f2      	b.n	8005dea <__libc_init_array+0x1e>
 8005e04:	08006e60 	.word	0x08006e60
 8005e08:	08006e60 	.word	0x08006e60
 8005e0c:	08006e60 	.word	0x08006e60
 8005e10:	08006e64 	.word	0x08006e64

08005e14 <malloc>:
 8005e14:	4b02      	ldr	r3, [pc, #8]	; (8005e20 <malloc+0xc>)
 8005e16:	4601      	mov	r1, r0
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	f000 b86d 	b.w	8005ef8 <_malloc_r>
 8005e1e:	bf00      	nop
 8005e20:	2000002c 	.word	0x2000002c

08005e24 <free>:
 8005e24:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <free+0xc>)
 8005e26:	4601      	mov	r1, r0
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	f000 b817 	b.w	8005e5c <_free_r>
 8005e2e:	bf00      	nop
 8005e30:	2000002c 	.word	0x2000002c

08005e34 <memcpy>:
 8005e34:	b510      	push	{r4, lr}
 8005e36:	1e43      	subs	r3, r0, #1
 8005e38:	440a      	add	r2, r1
 8005e3a:	4291      	cmp	r1, r2
 8005e3c:	d100      	bne.n	8005e40 <memcpy+0xc>
 8005e3e:	bd10      	pop	{r4, pc}
 8005e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e48:	e7f7      	b.n	8005e3a <memcpy+0x6>

08005e4a <memset>:
 8005e4a:	4402      	add	r2, r0
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d100      	bne.n	8005e54 <memset+0xa>
 8005e52:	4770      	bx	lr
 8005e54:	f803 1b01 	strb.w	r1, [r3], #1
 8005e58:	e7f9      	b.n	8005e4e <memset+0x4>
	...

08005e5c <_free_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4605      	mov	r5, r0
 8005e60:	2900      	cmp	r1, #0
 8005e62:	d045      	beq.n	8005ef0 <_free_r+0x94>
 8005e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e68:	1f0c      	subs	r4, r1, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bfb8      	it	lt
 8005e6e:	18e4      	addlt	r4, r4, r3
 8005e70:	f000 fbcc 	bl	800660c <__malloc_lock>
 8005e74:	4a1f      	ldr	r2, [pc, #124]	; (8005ef4 <_free_r+0x98>)
 8005e76:	6813      	ldr	r3, [r2, #0]
 8005e78:	4610      	mov	r0, r2
 8005e7a:	b933      	cbnz	r3, 8005e8a <_free_r+0x2e>
 8005e7c:	6063      	str	r3, [r4, #4]
 8005e7e:	6014      	str	r4, [r2, #0]
 8005e80:	4628      	mov	r0, r5
 8005e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e86:	f000 bbc2 	b.w	800660e <__malloc_unlock>
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	d90c      	bls.n	8005ea8 <_free_r+0x4c>
 8005e8e:	6821      	ldr	r1, [r4, #0]
 8005e90:	1862      	adds	r2, r4, r1
 8005e92:	4293      	cmp	r3, r2
 8005e94:	bf04      	itt	eq
 8005e96:	681a      	ldreq	r2, [r3, #0]
 8005e98:	685b      	ldreq	r3, [r3, #4]
 8005e9a:	6063      	str	r3, [r4, #4]
 8005e9c:	bf04      	itt	eq
 8005e9e:	1852      	addeq	r2, r2, r1
 8005ea0:	6022      	streq	r2, [r4, #0]
 8005ea2:	6004      	str	r4, [r0, #0]
 8005ea4:	e7ec      	b.n	8005e80 <_free_r+0x24>
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	b10a      	cbz	r2, 8005eb0 <_free_r+0x54>
 8005eac:	42a2      	cmp	r2, r4
 8005eae:	d9fa      	bls.n	8005ea6 <_free_r+0x4a>
 8005eb0:	6819      	ldr	r1, [r3, #0]
 8005eb2:	1858      	adds	r0, r3, r1
 8005eb4:	42a0      	cmp	r0, r4
 8005eb6:	d10b      	bne.n	8005ed0 <_free_r+0x74>
 8005eb8:	6820      	ldr	r0, [r4, #0]
 8005eba:	4401      	add	r1, r0
 8005ebc:	1858      	adds	r0, r3, r1
 8005ebe:	4282      	cmp	r2, r0
 8005ec0:	6019      	str	r1, [r3, #0]
 8005ec2:	d1dd      	bne.n	8005e80 <_free_r+0x24>
 8005ec4:	6810      	ldr	r0, [r2, #0]
 8005ec6:	6852      	ldr	r2, [r2, #4]
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	4401      	add	r1, r0
 8005ecc:	6019      	str	r1, [r3, #0]
 8005ece:	e7d7      	b.n	8005e80 <_free_r+0x24>
 8005ed0:	d902      	bls.n	8005ed8 <_free_r+0x7c>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	602b      	str	r3, [r5, #0]
 8005ed6:	e7d3      	b.n	8005e80 <_free_r+0x24>
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	1821      	adds	r1, r4, r0
 8005edc:	428a      	cmp	r2, r1
 8005ede:	bf04      	itt	eq
 8005ee0:	6811      	ldreq	r1, [r2, #0]
 8005ee2:	6852      	ldreq	r2, [r2, #4]
 8005ee4:	6062      	str	r2, [r4, #4]
 8005ee6:	bf04      	itt	eq
 8005ee8:	1809      	addeq	r1, r1, r0
 8005eea:	6021      	streq	r1, [r4, #0]
 8005eec:	605c      	str	r4, [r3, #4]
 8005eee:	e7c7      	b.n	8005e80 <_free_r+0x24>
 8005ef0:	bd38      	pop	{r3, r4, r5, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20003e00 	.word	0x20003e00

08005ef8 <_malloc_r>:
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	1ccd      	adds	r5, r1, #3
 8005efc:	f025 0503 	bic.w	r5, r5, #3
 8005f00:	3508      	adds	r5, #8
 8005f02:	2d0c      	cmp	r5, #12
 8005f04:	bf38      	it	cc
 8005f06:	250c      	movcc	r5, #12
 8005f08:	2d00      	cmp	r5, #0
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	db01      	blt.n	8005f12 <_malloc_r+0x1a>
 8005f0e:	42a9      	cmp	r1, r5
 8005f10:	d903      	bls.n	8005f1a <_malloc_r+0x22>
 8005f12:	230c      	movs	r3, #12
 8005f14:	6033      	str	r3, [r6, #0]
 8005f16:	2000      	movs	r0, #0
 8005f18:	bd70      	pop	{r4, r5, r6, pc}
 8005f1a:	f000 fb77 	bl	800660c <__malloc_lock>
 8005f1e:	4a23      	ldr	r2, [pc, #140]	; (8005fac <_malloc_r+0xb4>)
 8005f20:	6814      	ldr	r4, [r2, #0]
 8005f22:	4621      	mov	r1, r4
 8005f24:	b991      	cbnz	r1, 8005f4c <_malloc_r+0x54>
 8005f26:	4c22      	ldr	r4, [pc, #136]	; (8005fb0 <_malloc_r+0xb8>)
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	b91b      	cbnz	r3, 8005f34 <_malloc_r+0x3c>
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f000 f8bd 	bl	80060ac <_sbrk_r>
 8005f32:	6020      	str	r0, [r4, #0]
 8005f34:	4629      	mov	r1, r5
 8005f36:	4630      	mov	r0, r6
 8005f38:	f000 f8b8 	bl	80060ac <_sbrk_r>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d126      	bne.n	8005f8e <_malloc_r+0x96>
 8005f40:	230c      	movs	r3, #12
 8005f42:	6033      	str	r3, [r6, #0]
 8005f44:	4630      	mov	r0, r6
 8005f46:	f000 fb62 	bl	800660e <__malloc_unlock>
 8005f4a:	e7e4      	b.n	8005f16 <_malloc_r+0x1e>
 8005f4c:	680b      	ldr	r3, [r1, #0]
 8005f4e:	1b5b      	subs	r3, r3, r5
 8005f50:	d41a      	bmi.n	8005f88 <_malloc_r+0x90>
 8005f52:	2b0b      	cmp	r3, #11
 8005f54:	d90f      	bls.n	8005f76 <_malloc_r+0x7e>
 8005f56:	600b      	str	r3, [r1, #0]
 8005f58:	50cd      	str	r5, [r1, r3]
 8005f5a:	18cc      	adds	r4, r1, r3
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f000 fb56 	bl	800660e <__malloc_unlock>
 8005f62:	f104 000b 	add.w	r0, r4, #11
 8005f66:	1d23      	adds	r3, r4, #4
 8005f68:	f020 0007 	bic.w	r0, r0, #7
 8005f6c:	1ac3      	subs	r3, r0, r3
 8005f6e:	d01b      	beq.n	8005fa8 <_malloc_r+0xb0>
 8005f70:	425a      	negs	r2, r3
 8005f72:	50e2      	str	r2, [r4, r3]
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
 8005f76:	428c      	cmp	r4, r1
 8005f78:	bf0d      	iteet	eq
 8005f7a:	6863      	ldreq	r3, [r4, #4]
 8005f7c:	684b      	ldrne	r3, [r1, #4]
 8005f7e:	6063      	strne	r3, [r4, #4]
 8005f80:	6013      	streq	r3, [r2, #0]
 8005f82:	bf18      	it	ne
 8005f84:	460c      	movne	r4, r1
 8005f86:	e7e9      	b.n	8005f5c <_malloc_r+0x64>
 8005f88:	460c      	mov	r4, r1
 8005f8a:	6849      	ldr	r1, [r1, #4]
 8005f8c:	e7ca      	b.n	8005f24 <_malloc_r+0x2c>
 8005f8e:	1cc4      	adds	r4, r0, #3
 8005f90:	f024 0403 	bic.w	r4, r4, #3
 8005f94:	42a0      	cmp	r0, r4
 8005f96:	d005      	beq.n	8005fa4 <_malloc_r+0xac>
 8005f98:	1a21      	subs	r1, r4, r0
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f000 f886 	bl	80060ac <_sbrk_r>
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d0cd      	beq.n	8005f40 <_malloc_r+0x48>
 8005fa4:	6025      	str	r5, [r4, #0]
 8005fa6:	e7d9      	b.n	8005f5c <_malloc_r+0x64>
 8005fa8:	bd70      	pop	{r4, r5, r6, pc}
 8005faa:	bf00      	nop
 8005fac:	20003e00 	.word	0x20003e00
 8005fb0:	20003e04 	.word	0x20003e04

08005fb4 <iprintf>:
 8005fb4:	b40f      	push	{r0, r1, r2, r3}
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <iprintf+0x2c>)
 8005fb8:	b513      	push	{r0, r1, r4, lr}
 8005fba:	681c      	ldr	r4, [r3, #0]
 8005fbc:	b124      	cbz	r4, 8005fc8 <iprintf+0x14>
 8005fbe:	69a3      	ldr	r3, [r4, #24]
 8005fc0:	b913      	cbnz	r3, 8005fc8 <iprintf+0x14>
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 fa34 	bl	8006430 <__sinit>
 8005fc8:	ab05      	add	r3, sp, #20
 8005fca:	9a04      	ldr	r2, [sp, #16]
 8005fcc:	68a1      	ldr	r1, [r4, #8]
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 fb47 	bl	8006664 <_vfiprintf_r>
 8005fd6:	b002      	add	sp, #8
 8005fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fdc:	b004      	add	sp, #16
 8005fde:	4770      	bx	lr
 8005fe0:	2000002c 	.word	0x2000002c

08005fe4 <_puts_r>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	460e      	mov	r6, r1
 8005fe8:	4605      	mov	r5, r0
 8005fea:	b118      	cbz	r0, 8005ff4 <_puts_r+0x10>
 8005fec:	6983      	ldr	r3, [r0, #24]
 8005fee:	b90b      	cbnz	r3, 8005ff4 <_puts_r+0x10>
 8005ff0:	f000 fa1e 	bl	8006430 <__sinit>
 8005ff4:	69ab      	ldr	r3, [r5, #24]
 8005ff6:	68ac      	ldr	r4, [r5, #8]
 8005ff8:	b913      	cbnz	r3, 8006000 <_puts_r+0x1c>
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 fa18 	bl	8006430 <__sinit>
 8006000:	4b23      	ldr	r3, [pc, #140]	; (8006090 <_puts_r+0xac>)
 8006002:	429c      	cmp	r4, r3
 8006004:	d117      	bne.n	8006036 <_puts_r+0x52>
 8006006:	686c      	ldr	r4, [r5, #4]
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	071b      	lsls	r3, r3, #28
 800600c:	d51d      	bpl.n	800604a <_puts_r+0x66>
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	b1db      	cbz	r3, 800604a <_puts_r+0x66>
 8006012:	3e01      	subs	r6, #1
 8006014:	68a3      	ldr	r3, [r4, #8]
 8006016:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800601a:	3b01      	subs	r3, #1
 800601c:	60a3      	str	r3, [r4, #8]
 800601e:	b9e9      	cbnz	r1, 800605c <_puts_r+0x78>
 8006020:	2b00      	cmp	r3, #0
 8006022:	da2e      	bge.n	8006082 <_puts_r+0x9e>
 8006024:	4622      	mov	r2, r4
 8006026:	210a      	movs	r1, #10
 8006028:	4628      	mov	r0, r5
 800602a:	f000 f84f 	bl	80060cc <__swbuf_r>
 800602e:	3001      	adds	r0, #1
 8006030:	d011      	beq.n	8006056 <_puts_r+0x72>
 8006032:	200a      	movs	r0, #10
 8006034:	bd70      	pop	{r4, r5, r6, pc}
 8006036:	4b17      	ldr	r3, [pc, #92]	; (8006094 <_puts_r+0xb0>)
 8006038:	429c      	cmp	r4, r3
 800603a:	d101      	bne.n	8006040 <_puts_r+0x5c>
 800603c:	68ac      	ldr	r4, [r5, #8]
 800603e:	e7e3      	b.n	8006008 <_puts_r+0x24>
 8006040:	4b15      	ldr	r3, [pc, #84]	; (8006098 <_puts_r+0xb4>)
 8006042:	429c      	cmp	r4, r3
 8006044:	bf08      	it	eq
 8006046:	68ec      	ldreq	r4, [r5, #12]
 8006048:	e7de      	b.n	8006008 <_puts_r+0x24>
 800604a:	4621      	mov	r1, r4
 800604c:	4628      	mov	r0, r5
 800604e:	f000 f88f 	bl	8006170 <__swsetup_r>
 8006052:	2800      	cmp	r0, #0
 8006054:	d0dd      	beq.n	8006012 <_puts_r+0x2e>
 8006056:	f04f 30ff 	mov.w	r0, #4294967295
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	2b00      	cmp	r3, #0
 800605e:	da04      	bge.n	800606a <_puts_r+0x86>
 8006060:	69a2      	ldr	r2, [r4, #24]
 8006062:	4293      	cmp	r3, r2
 8006064:	db06      	blt.n	8006074 <_puts_r+0x90>
 8006066:	290a      	cmp	r1, #10
 8006068:	d004      	beq.n	8006074 <_puts_r+0x90>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	6022      	str	r2, [r4, #0]
 8006070:	7019      	strb	r1, [r3, #0]
 8006072:	e7cf      	b.n	8006014 <_puts_r+0x30>
 8006074:	4622      	mov	r2, r4
 8006076:	4628      	mov	r0, r5
 8006078:	f000 f828 	bl	80060cc <__swbuf_r>
 800607c:	3001      	adds	r0, #1
 800607e:	d1c9      	bne.n	8006014 <_puts_r+0x30>
 8006080:	e7e9      	b.n	8006056 <_puts_r+0x72>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	200a      	movs	r0, #10
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	6022      	str	r2, [r4, #0]
 800608a:	7018      	strb	r0, [r3, #0]
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	bf00      	nop
 8006090:	08006de0 	.word	0x08006de0
 8006094:	08006e00 	.word	0x08006e00
 8006098:	08006dc0 	.word	0x08006dc0

0800609c <puts>:
 800609c:	4b02      	ldr	r3, [pc, #8]	; (80060a8 <puts+0xc>)
 800609e:	4601      	mov	r1, r0
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	f7ff bf9f 	b.w	8005fe4 <_puts_r>
 80060a6:	bf00      	nop
 80060a8:	2000002c 	.word	0x2000002c

080060ac <_sbrk_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4c06      	ldr	r4, [pc, #24]	; (80060c8 <_sbrk_r+0x1c>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	4605      	mov	r5, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	f7ff fcce 	bl	8005a58 <_sbrk>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_sbrk_r+0x1a>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_sbrk_r+0x1a>
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	200045a8 	.word	0x200045a8

080060cc <__swbuf_r>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	460e      	mov	r6, r1
 80060d0:	4614      	mov	r4, r2
 80060d2:	4605      	mov	r5, r0
 80060d4:	b118      	cbz	r0, 80060de <__swbuf_r+0x12>
 80060d6:	6983      	ldr	r3, [r0, #24]
 80060d8:	b90b      	cbnz	r3, 80060de <__swbuf_r+0x12>
 80060da:	f000 f9a9 	bl	8006430 <__sinit>
 80060de:	4b21      	ldr	r3, [pc, #132]	; (8006164 <__swbuf_r+0x98>)
 80060e0:	429c      	cmp	r4, r3
 80060e2:	d12a      	bne.n	800613a <__swbuf_r+0x6e>
 80060e4:	686c      	ldr	r4, [r5, #4]
 80060e6:	69a3      	ldr	r3, [r4, #24]
 80060e8:	60a3      	str	r3, [r4, #8]
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	071a      	lsls	r2, r3, #28
 80060ee:	d52e      	bpl.n	800614e <__swbuf_r+0x82>
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	b363      	cbz	r3, 800614e <__swbuf_r+0x82>
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	6820      	ldr	r0, [r4, #0]
 80060f8:	1ac0      	subs	r0, r0, r3
 80060fa:	6963      	ldr	r3, [r4, #20]
 80060fc:	b2f6      	uxtb	r6, r6
 80060fe:	4298      	cmp	r0, r3
 8006100:	4637      	mov	r7, r6
 8006102:	db04      	blt.n	800610e <__swbuf_r+0x42>
 8006104:	4621      	mov	r1, r4
 8006106:	4628      	mov	r0, r5
 8006108:	f000 f928 	bl	800635c <_fflush_r>
 800610c:	bb28      	cbnz	r0, 800615a <__swbuf_r+0x8e>
 800610e:	68a3      	ldr	r3, [r4, #8]
 8006110:	3b01      	subs	r3, #1
 8006112:	60a3      	str	r3, [r4, #8]
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	6022      	str	r2, [r4, #0]
 800611a:	701e      	strb	r6, [r3, #0]
 800611c:	6963      	ldr	r3, [r4, #20]
 800611e:	3001      	adds	r0, #1
 8006120:	4298      	cmp	r0, r3
 8006122:	d004      	beq.n	800612e <__swbuf_r+0x62>
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	07db      	lsls	r3, r3, #31
 8006128:	d519      	bpl.n	800615e <__swbuf_r+0x92>
 800612a:	2e0a      	cmp	r6, #10
 800612c:	d117      	bne.n	800615e <__swbuf_r+0x92>
 800612e:	4621      	mov	r1, r4
 8006130:	4628      	mov	r0, r5
 8006132:	f000 f913 	bl	800635c <_fflush_r>
 8006136:	b190      	cbz	r0, 800615e <__swbuf_r+0x92>
 8006138:	e00f      	b.n	800615a <__swbuf_r+0x8e>
 800613a:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <__swbuf_r+0x9c>)
 800613c:	429c      	cmp	r4, r3
 800613e:	d101      	bne.n	8006144 <__swbuf_r+0x78>
 8006140:	68ac      	ldr	r4, [r5, #8]
 8006142:	e7d0      	b.n	80060e6 <__swbuf_r+0x1a>
 8006144:	4b09      	ldr	r3, [pc, #36]	; (800616c <__swbuf_r+0xa0>)
 8006146:	429c      	cmp	r4, r3
 8006148:	bf08      	it	eq
 800614a:	68ec      	ldreq	r4, [r5, #12]
 800614c:	e7cb      	b.n	80060e6 <__swbuf_r+0x1a>
 800614e:	4621      	mov	r1, r4
 8006150:	4628      	mov	r0, r5
 8006152:	f000 f80d 	bl	8006170 <__swsetup_r>
 8006156:	2800      	cmp	r0, #0
 8006158:	d0cc      	beq.n	80060f4 <__swbuf_r+0x28>
 800615a:	f04f 37ff 	mov.w	r7, #4294967295
 800615e:	4638      	mov	r0, r7
 8006160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006162:	bf00      	nop
 8006164:	08006de0 	.word	0x08006de0
 8006168:	08006e00 	.word	0x08006e00
 800616c:	08006dc0 	.word	0x08006dc0

08006170 <__swsetup_r>:
 8006170:	4b32      	ldr	r3, [pc, #200]	; (800623c <__swsetup_r+0xcc>)
 8006172:	b570      	push	{r4, r5, r6, lr}
 8006174:	681d      	ldr	r5, [r3, #0]
 8006176:	4606      	mov	r6, r0
 8006178:	460c      	mov	r4, r1
 800617a:	b125      	cbz	r5, 8006186 <__swsetup_r+0x16>
 800617c:	69ab      	ldr	r3, [r5, #24]
 800617e:	b913      	cbnz	r3, 8006186 <__swsetup_r+0x16>
 8006180:	4628      	mov	r0, r5
 8006182:	f000 f955 	bl	8006430 <__sinit>
 8006186:	4b2e      	ldr	r3, [pc, #184]	; (8006240 <__swsetup_r+0xd0>)
 8006188:	429c      	cmp	r4, r3
 800618a:	d10f      	bne.n	80061ac <__swsetup_r+0x3c>
 800618c:	686c      	ldr	r4, [r5, #4]
 800618e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006192:	b29a      	uxth	r2, r3
 8006194:	0715      	lsls	r5, r2, #28
 8006196:	d42c      	bmi.n	80061f2 <__swsetup_r+0x82>
 8006198:	06d0      	lsls	r0, r2, #27
 800619a:	d411      	bmi.n	80061c0 <__swsetup_r+0x50>
 800619c:	2209      	movs	r2, #9
 800619e:	6032      	str	r2, [r6, #0]
 80061a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a4:	81a3      	strh	r3, [r4, #12]
 80061a6:	f04f 30ff 	mov.w	r0, #4294967295
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	4b25      	ldr	r3, [pc, #148]	; (8006244 <__swsetup_r+0xd4>)
 80061ae:	429c      	cmp	r4, r3
 80061b0:	d101      	bne.n	80061b6 <__swsetup_r+0x46>
 80061b2:	68ac      	ldr	r4, [r5, #8]
 80061b4:	e7eb      	b.n	800618e <__swsetup_r+0x1e>
 80061b6:	4b24      	ldr	r3, [pc, #144]	; (8006248 <__swsetup_r+0xd8>)
 80061b8:	429c      	cmp	r4, r3
 80061ba:	bf08      	it	eq
 80061bc:	68ec      	ldreq	r4, [r5, #12]
 80061be:	e7e6      	b.n	800618e <__swsetup_r+0x1e>
 80061c0:	0751      	lsls	r1, r2, #29
 80061c2:	d512      	bpl.n	80061ea <__swsetup_r+0x7a>
 80061c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061c6:	b141      	cbz	r1, 80061da <__swsetup_r+0x6a>
 80061c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061cc:	4299      	cmp	r1, r3
 80061ce:	d002      	beq.n	80061d6 <__swsetup_r+0x66>
 80061d0:	4630      	mov	r0, r6
 80061d2:	f7ff fe43 	bl	8005e5c <_free_r>
 80061d6:	2300      	movs	r3, #0
 80061d8:	6363      	str	r3, [r4, #52]	; 0x34
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	2300      	movs	r3, #0
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	f043 0308 	orr.w	r3, r3, #8
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	6923      	ldr	r3, [r4, #16]
 80061f4:	b94b      	cbnz	r3, 800620a <__swsetup_r+0x9a>
 80061f6:	89a3      	ldrh	r3, [r4, #12]
 80061f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006200:	d003      	beq.n	800620a <__swsetup_r+0x9a>
 8006202:	4621      	mov	r1, r4
 8006204:	4630      	mov	r0, r6
 8006206:	f000 f9c1 	bl	800658c <__smakebuf_r>
 800620a:	89a2      	ldrh	r2, [r4, #12]
 800620c:	f012 0301 	ands.w	r3, r2, #1
 8006210:	d00c      	beq.n	800622c <__swsetup_r+0xbc>
 8006212:	2300      	movs	r3, #0
 8006214:	60a3      	str	r3, [r4, #8]
 8006216:	6963      	ldr	r3, [r4, #20]
 8006218:	425b      	negs	r3, r3
 800621a:	61a3      	str	r3, [r4, #24]
 800621c:	6923      	ldr	r3, [r4, #16]
 800621e:	b953      	cbnz	r3, 8006236 <__swsetup_r+0xc6>
 8006220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006224:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006228:	d1ba      	bne.n	80061a0 <__swsetup_r+0x30>
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	0792      	lsls	r2, r2, #30
 800622e:	bf58      	it	pl
 8006230:	6963      	ldrpl	r3, [r4, #20]
 8006232:	60a3      	str	r3, [r4, #8]
 8006234:	e7f2      	b.n	800621c <__swsetup_r+0xac>
 8006236:	2000      	movs	r0, #0
 8006238:	e7f7      	b.n	800622a <__swsetup_r+0xba>
 800623a:	bf00      	nop
 800623c:	2000002c 	.word	0x2000002c
 8006240:	08006de0 	.word	0x08006de0
 8006244:	08006e00 	.word	0x08006e00
 8006248:	08006dc0 	.word	0x08006dc0

0800624c <__sflush_r>:
 800624c:	898a      	ldrh	r2, [r1, #12]
 800624e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006252:	4605      	mov	r5, r0
 8006254:	0710      	lsls	r0, r2, #28
 8006256:	460c      	mov	r4, r1
 8006258:	d45a      	bmi.n	8006310 <__sflush_r+0xc4>
 800625a:	684b      	ldr	r3, [r1, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	dc05      	bgt.n	800626c <__sflush_r+0x20>
 8006260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	dc02      	bgt.n	800626c <__sflush_r+0x20>
 8006266:	2000      	movs	r0, #0
 8006268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800626c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800626e:	2e00      	cmp	r6, #0
 8006270:	d0f9      	beq.n	8006266 <__sflush_r+0x1a>
 8006272:	2300      	movs	r3, #0
 8006274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006278:	682f      	ldr	r7, [r5, #0]
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	d033      	beq.n	80062e6 <__sflush_r+0x9a>
 800627e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006280:	89a3      	ldrh	r3, [r4, #12]
 8006282:	075a      	lsls	r2, r3, #29
 8006284:	d505      	bpl.n	8006292 <__sflush_r+0x46>
 8006286:	6863      	ldr	r3, [r4, #4]
 8006288:	1ac0      	subs	r0, r0, r3
 800628a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800628c:	b10b      	cbz	r3, 8006292 <__sflush_r+0x46>
 800628e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006290:	1ac0      	subs	r0, r0, r3
 8006292:	2300      	movs	r3, #0
 8006294:	4602      	mov	r2, r0
 8006296:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006298:	6a21      	ldr	r1, [r4, #32]
 800629a:	4628      	mov	r0, r5
 800629c:	47b0      	blx	r6
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	d106      	bne.n	80062b2 <__sflush_r+0x66>
 80062a4:	6829      	ldr	r1, [r5, #0]
 80062a6:	291d      	cmp	r1, #29
 80062a8:	d84b      	bhi.n	8006342 <__sflush_r+0xf6>
 80062aa:	4a2b      	ldr	r2, [pc, #172]	; (8006358 <__sflush_r+0x10c>)
 80062ac:	40ca      	lsrs	r2, r1
 80062ae:	07d6      	lsls	r6, r2, #31
 80062b0:	d547      	bpl.n	8006342 <__sflush_r+0xf6>
 80062b2:	2200      	movs	r2, #0
 80062b4:	6062      	str	r2, [r4, #4]
 80062b6:	04d9      	lsls	r1, r3, #19
 80062b8:	6922      	ldr	r2, [r4, #16]
 80062ba:	6022      	str	r2, [r4, #0]
 80062bc:	d504      	bpl.n	80062c8 <__sflush_r+0x7c>
 80062be:	1c42      	adds	r2, r0, #1
 80062c0:	d101      	bne.n	80062c6 <__sflush_r+0x7a>
 80062c2:	682b      	ldr	r3, [r5, #0]
 80062c4:	b903      	cbnz	r3, 80062c8 <__sflush_r+0x7c>
 80062c6:	6560      	str	r0, [r4, #84]	; 0x54
 80062c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ca:	602f      	str	r7, [r5, #0]
 80062cc:	2900      	cmp	r1, #0
 80062ce:	d0ca      	beq.n	8006266 <__sflush_r+0x1a>
 80062d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062d4:	4299      	cmp	r1, r3
 80062d6:	d002      	beq.n	80062de <__sflush_r+0x92>
 80062d8:	4628      	mov	r0, r5
 80062da:	f7ff fdbf 	bl	8005e5c <_free_r>
 80062de:	2000      	movs	r0, #0
 80062e0:	6360      	str	r0, [r4, #52]	; 0x34
 80062e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e6:	6a21      	ldr	r1, [r4, #32]
 80062e8:	2301      	movs	r3, #1
 80062ea:	4628      	mov	r0, r5
 80062ec:	47b0      	blx	r6
 80062ee:	1c41      	adds	r1, r0, #1
 80062f0:	d1c6      	bne.n	8006280 <__sflush_r+0x34>
 80062f2:	682b      	ldr	r3, [r5, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0c3      	beq.n	8006280 <__sflush_r+0x34>
 80062f8:	2b1d      	cmp	r3, #29
 80062fa:	d001      	beq.n	8006300 <__sflush_r+0xb4>
 80062fc:	2b16      	cmp	r3, #22
 80062fe:	d101      	bne.n	8006304 <__sflush_r+0xb8>
 8006300:	602f      	str	r7, [r5, #0]
 8006302:	e7b0      	b.n	8006266 <__sflush_r+0x1a>
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006310:	690f      	ldr	r7, [r1, #16]
 8006312:	2f00      	cmp	r7, #0
 8006314:	d0a7      	beq.n	8006266 <__sflush_r+0x1a>
 8006316:	0793      	lsls	r3, r2, #30
 8006318:	680e      	ldr	r6, [r1, #0]
 800631a:	bf08      	it	eq
 800631c:	694b      	ldreq	r3, [r1, #20]
 800631e:	600f      	str	r7, [r1, #0]
 8006320:	bf18      	it	ne
 8006322:	2300      	movne	r3, #0
 8006324:	eba6 0807 	sub.w	r8, r6, r7
 8006328:	608b      	str	r3, [r1, #8]
 800632a:	f1b8 0f00 	cmp.w	r8, #0
 800632e:	dd9a      	ble.n	8006266 <__sflush_r+0x1a>
 8006330:	4643      	mov	r3, r8
 8006332:	463a      	mov	r2, r7
 8006334:	6a21      	ldr	r1, [r4, #32]
 8006336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006338:	4628      	mov	r0, r5
 800633a:	47b0      	blx	r6
 800633c:	2800      	cmp	r0, #0
 800633e:	dc07      	bgt.n	8006350 <__sflush_r+0x104>
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006346:	81a3      	strh	r3, [r4, #12]
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006350:	4407      	add	r7, r0
 8006352:	eba8 0800 	sub.w	r8, r8, r0
 8006356:	e7e8      	b.n	800632a <__sflush_r+0xde>
 8006358:	20400001 	.word	0x20400001

0800635c <_fflush_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	690b      	ldr	r3, [r1, #16]
 8006360:	4605      	mov	r5, r0
 8006362:	460c      	mov	r4, r1
 8006364:	b1db      	cbz	r3, 800639e <_fflush_r+0x42>
 8006366:	b118      	cbz	r0, 8006370 <_fflush_r+0x14>
 8006368:	6983      	ldr	r3, [r0, #24]
 800636a:	b90b      	cbnz	r3, 8006370 <_fflush_r+0x14>
 800636c:	f000 f860 	bl	8006430 <__sinit>
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <_fflush_r+0x48>)
 8006372:	429c      	cmp	r4, r3
 8006374:	d109      	bne.n	800638a <_fflush_r+0x2e>
 8006376:	686c      	ldr	r4, [r5, #4]
 8006378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637c:	b17b      	cbz	r3, 800639e <_fflush_r+0x42>
 800637e:	4621      	mov	r1, r4
 8006380:	4628      	mov	r0, r5
 8006382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006386:	f7ff bf61 	b.w	800624c <__sflush_r>
 800638a:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <_fflush_r+0x4c>)
 800638c:	429c      	cmp	r4, r3
 800638e:	d101      	bne.n	8006394 <_fflush_r+0x38>
 8006390:	68ac      	ldr	r4, [r5, #8]
 8006392:	e7f1      	b.n	8006378 <_fflush_r+0x1c>
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <_fflush_r+0x50>)
 8006396:	429c      	cmp	r4, r3
 8006398:	bf08      	it	eq
 800639a:	68ec      	ldreq	r4, [r5, #12]
 800639c:	e7ec      	b.n	8006378 <_fflush_r+0x1c>
 800639e:	2000      	movs	r0, #0
 80063a0:	bd38      	pop	{r3, r4, r5, pc}
 80063a2:	bf00      	nop
 80063a4:	08006de0 	.word	0x08006de0
 80063a8:	08006e00 	.word	0x08006e00
 80063ac:	08006dc0 	.word	0x08006dc0

080063b0 <_cleanup_r>:
 80063b0:	4901      	ldr	r1, [pc, #4]	; (80063b8 <_cleanup_r+0x8>)
 80063b2:	f000 b8a9 	b.w	8006508 <_fwalk_reent>
 80063b6:	bf00      	nop
 80063b8:	0800635d 	.word	0x0800635d

080063bc <std.isra.0>:
 80063bc:	2300      	movs	r3, #0
 80063be:	b510      	push	{r4, lr}
 80063c0:	4604      	mov	r4, r0
 80063c2:	6003      	str	r3, [r0, #0]
 80063c4:	6043      	str	r3, [r0, #4]
 80063c6:	6083      	str	r3, [r0, #8]
 80063c8:	8181      	strh	r1, [r0, #12]
 80063ca:	6643      	str	r3, [r0, #100]	; 0x64
 80063cc:	81c2      	strh	r2, [r0, #14]
 80063ce:	6103      	str	r3, [r0, #16]
 80063d0:	6143      	str	r3, [r0, #20]
 80063d2:	6183      	str	r3, [r0, #24]
 80063d4:	4619      	mov	r1, r3
 80063d6:	2208      	movs	r2, #8
 80063d8:	305c      	adds	r0, #92	; 0x5c
 80063da:	f7ff fd36 	bl	8005e4a <memset>
 80063de:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <std.isra.0+0x38>)
 80063e0:	6263      	str	r3, [r4, #36]	; 0x24
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <std.isra.0+0x3c>)
 80063e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80063e6:	4b05      	ldr	r3, [pc, #20]	; (80063fc <std.isra.0+0x40>)
 80063e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <std.isra.0+0x44>)
 80063ec:	6224      	str	r4, [r4, #32]
 80063ee:	6323      	str	r3, [r4, #48]	; 0x30
 80063f0:	bd10      	pop	{r4, pc}
 80063f2:	bf00      	nop
 80063f4:	08006bbd 	.word	0x08006bbd
 80063f8:	08006bdf 	.word	0x08006bdf
 80063fc:	08006c17 	.word	0x08006c17
 8006400:	08006c3b 	.word	0x08006c3b

08006404 <__sfmoreglue>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	1e4a      	subs	r2, r1, #1
 8006408:	2568      	movs	r5, #104	; 0x68
 800640a:	4355      	muls	r5, r2
 800640c:	460e      	mov	r6, r1
 800640e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006412:	f7ff fd71 	bl	8005ef8 <_malloc_r>
 8006416:	4604      	mov	r4, r0
 8006418:	b140      	cbz	r0, 800642c <__sfmoreglue+0x28>
 800641a:	2100      	movs	r1, #0
 800641c:	e880 0042 	stmia.w	r0, {r1, r6}
 8006420:	300c      	adds	r0, #12
 8006422:	60a0      	str	r0, [r4, #8]
 8006424:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006428:	f7ff fd0f 	bl	8005e4a <memset>
 800642c:	4620      	mov	r0, r4
 800642e:	bd70      	pop	{r4, r5, r6, pc}

08006430 <__sinit>:
 8006430:	6983      	ldr	r3, [r0, #24]
 8006432:	b510      	push	{r4, lr}
 8006434:	4604      	mov	r4, r0
 8006436:	bb33      	cbnz	r3, 8006486 <__sinit+0x56>
 8006438:	6483      	str	r3, [r0, #72]	; 0x48
 800643a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800643c:	6503      	str	r3, [r0, #80]	; 0x50
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <__sinit+0x58>)
 8006440:	4a12      	ldr	r2, [pc, #72]	; (800648c <__sinit+0x5c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6282      	str	r2, [r0, #40]	; 0x28
 8006446:	4298      	cmp	r0, r3
 8006448:	bf04      	itt	eq
 800644a:	2301      	moveq	r3, #1
 800644c:	6183      	streq	r3, [r0, #24]
 800644e:	f000 f81f 	bl	8006490 <__sfp>
 8006452:	6060      	str	r0, [r4, #4]
 8006454:	4620      	mov	r0, r4
 8006456:	f000 f81b 	bl	8006490 <__sfp>
 800645a:	60a0      	str	r0, [r4, #8]
 800645c:	4620      	mov	r0, r4
 800645e:	f000 f817 	bl	8006490 <__sfp>
 8006462:	2200      	movs	r2, #0
 8006464:	60e0      	str	r0, [r4, #12]
 8006466:	2104      	movs	r1, #4
 8006468:	6860      	ldr	r0, [r4, #4]
 800646a:	f7ff ffa7 	bl	80063bc <std.isra.0>
 800646e:	2201      	movs	r2, #1
 8006470:	2109      	movs	r1, #9
 8006472:	68a0      	ldr	r0, [r4, #8]
 8006474:	f7ff ffa2 	bl	80063bc <std.isra.0>
 8006478:	2202      	movs	r2, #2
 800647a:	2112      	movs	r1, #18
 800647c:	68e0      	ldr	r0, [r4, #12]
 800647e:	f7ff ff9d 	bl	80063bc <std.isra.0>
 8006482:	2301      	movs	r3, #1
 8006484:	61a3      	str	r3, [r4, #24]
 8006486:	bd10      	pop	{r4, pc}
 8006488:	08006e20 	.word	0x08006e20
 800648c:	080063b1 	.word	0x080063b1

08006490 <__sfp>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <__sfp+0x74>)
 8006494:	681e      	ldr	r6, [r3, #0]
 8006496:	69b3      	ldr	r3, [r6, #24]
 8006498:	4607      	mov	r7, r0
 800649a:	b913      	cbnz	r3, 80064a2 <__sfp+0x12>
 800649c:	4630      	mov	r0, r6
 800649e:	f7ff ffc7 	bl	8006430 <__sinit>
 80064a2:	3648      	adds	r6, #72	; 0x48
 80064a4:	68b4      	ldr	r4, [r6, #8]
 80064a6:	6873      	ldr	r3, [r6, #4]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	d503      	bpl.n	80064b4 <__sfp+0x24>
 80064ac:	6833      	ldr	r3, [r6, #0]
 80064ae:	b133      	cbz	r3, 80064be <__sfp+0x2e>
 80064b0:	6836      	ldr	r6, [r6, #0]
 80064b2:	e7f7      	b.n	80064a4 <__sfp+0x14>
 80064b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064b8:	b16d      	cbz	r5, 80064d6 <__sfp+0x46>
 80064ba:	3468      	adds	r4, #104	; 0x68
 80064bc:	e7f4      	b.n	80064a8 <__sfp+0x18>
 80064be:	2104      	movs	r1, #4
 80064c0:	4638      	mov	r0, r7
 80064c2:	f7ff ff9f 	bl	8006404 <__sfmoreglue>
 80064c6:	6030      	str	r0, [r6, #0]
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d1f1      	bne.n	80064b0 <__sfp+0x20>
 80064cc:	230c      	movs	r3, #12
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	4604      	mov	r4, r0
 80064d2:	4620      	mov	r0, r4
 80064d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064da:	81e3      	strh	r3, [r4, #14]
 80064dc:	2301      	movs	r3, #1
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	6665      	str	r5, [r4, #100]	; 0x64
 80064e2:	6025      	str	r5, [r4, #0]
 80064e4:	60a5      	str	r5, [r4, #8]
 80064e6:	6065      	str	r5, [r4, #4]
 80064e8:	6125      	str	r5, [r4, #16]
 80064ea:	6165      	str	r5, [r4, #20]
 80064ec:	61a5      	str	r5, [r4, #24]
 80064ee:	2208      	movs	r2, #8
 80064f0:	4629      	mov	r1, r5
 80064f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064f6:	f7ff fca8 	bl	8005e4a <memset>
 80064fa:	6365      	str	r5, [r4, #52]	; 0x34
 80064fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80064fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8006500:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006502:	e7e6      	b.n	80064d2 <__sfp+0x42>
 8006504:	08006e20 	.word	0x08006e20

08006508 <_fwalk_reent>:
 8006508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800650c:	4680      	mov	r8, r0
 800650e:	4689      	mov	r9, r1
 8006510:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006514:	2600      	movs	r6, #0
 8006516:	b914      	cbnz	r4, 800651e <_fwalk_reent+0x16>
 8006518:	4630      	mov	r0, r6
 800651a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800651e:	68a5      	ldr	r5, [r4, #8]
 8006520:	6867      	ldr	r7, [r4, #4]
 8006522:	3f01      	subs	r7, #1
 8006524:	d501      	bpl.n	800652a <_fwalk_reent+0x22>
 8006526:	6824      	ldr	r4, [r4, #0]
 8006528:	e7f5      	b.n	8006516 <_fwalk_reent+0xe>
 800652a:	89ab      	ldrh	r3, [r5, #12]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d907      	bls.n	8006540 <_fwalk_reent+0x38>
 8006530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006534:	3301      	adds	r3, #1
 8006536:	d003      	beq.n	8006540 <_fwalk_reent+0x38>
 8006538:	4629      	mov	r1, r5
 800653a:	4640      	mov	r0, r8
 800653c:	47c8      	blx	r9
 800653e:	4306      	orrs	r6, r0
 8006540:	3568      	adds	r5, #104	; 0x68
 8006542:	e7ee      	b.n	8006522 <_fwalk_reent+0x1a>

08006544 <__swhatbuf_r>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	460e      	mov	r6, r1
 8006548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654c:	2900      	cmp	r1, #0
 800654e:	b090      	sub	sp, #64	; 0x40
 8006550:	4614      	mov	r4, r2
 8006552:	461d      	mov	r5, r3
 8006554:	da07      	bge.n	8006566 <__swhatbuf_r+0x22>
 8006556:	2300      	movs	r3, #0
 8006558:	602b      	str	r3, [r5, #0]
 800655a:	89b3      	ldrh	r3, [r6, #12]
 800655c:	061a      	lsls	r2, r3, #24
 800655e:	d410      	bmi.n	8006582 <__swhatbuf_r+0x3e>
 8006560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006564:	e00e      	b.n	8006584 <__swhatbuf_r+0x40>
 8006566:	aa01      	add	r2, sp, #4
 8006568:	f000 fb8e 	bl	8006c88 <_fstat_r>
 800656c:	2800      	cmp	r0, #0
 800656e:	dbf2      	blt.n	8006556 <__swhatbuf_r+0x12>
 8006570:	9a02      	ldr	r2, [sp, #8]
 8006572:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006576:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800657a:	425a      	negs	r2, r3
 800657c:	415a      	adcs	r2, r3
 800657e:	602a      	str	r2, [r5, #0]
 8006580:	e7ee      	b.n	8006560 <__swhatbuf_r+0x1c>
 8006582:	2340      	movs	r3, #64	; 0x40
 8006584:	2000      	movs	r0, #0
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	b010      	add	sp, #64	; 0x40
 800658a:	bd70      	pop	{r4, r5, r6, pc}

0800658c <__smakebuf_r>:
 800658c:	898b      	ldrh	r3, [r1, #12]
 800658e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006590:	079d      	lsls	r5, r3, #30
 8006592:	4606      	mov	r6, r0
 8006594:	460c      	mov	r4, r1
 8006596:	d507      	bpl.n	80065a8 <__smakebuf_r+0x1c>
 8006598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	6123      	str	r3, [r4, #16]
 80065a0:	2301      	movs	r3, #1
 80065a2:	6163      	str	r3, [r4, #20]
 80065a4:	b002      	add	sp, #8
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	ab01      	add	r3, sp, #4
 80065aa:	466a      	mov	r2, sp
 80065ac:	f7ff ffca 	bl	8006544 <__swhatbuf_r>
 80065b0:	9900      	ldr	r1, [sp, #0]
 80065b2:	4605      	mov	r5, r0
 80065b4:	4630      	mov	r0, r6
 80065b6:	f7ff fc9f 	bl	8005ef8 <_malloc_r>
 80065ba:	b948      	cbnz	r0, 80065d0 <__smakebuf_r+0x44>
 80065bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c0:	059a      	lsls	r2, r3, #22
 80065c2:	d4ef      	bmi.n	80065a4 <__smakebuf_r+0x18>
 80065c4:	f023 0303 	bic.w	r3, r3, #3
 80065c8:	f043 0302 	orr.w	r3, r3, #2
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	e7e3      	b.n	8006598 <__smakebuf_r+0xc>
 80065d0:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <__smakebuf_r+0x7c>)
 80065d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	6020      	str	r0, [r4, #0]
 80065d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	9b00      	ldr	r3, [sp, #0]
 80065e0:	6163      	str	r3, [r4, #20]
 80065e2:	9b01      	ldr	r3, [sp, #4]
 80065e4:	6120      	str	r0, [r4, #16]
 80065e6:	b15b      	cbz	r3, 8006600 <__smakebuf_r+0x74>
 80065e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ec:	4630      	mov	r0, r6
 80065ee:	f000 fb5d 	bl	8006cac <_isatty_r>
 80065f2:	b128      	cbz	r0, 8006600 <__smakebuf_r+0x74>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	f043 0301 	orr.w	r3, r3, #1
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	431d      	orrs	r5, r3
 8006604:	81a5      	strh	r5, [r4, #12]
 8006606:	e7cd      	b.n	80065a4 <__smakebuf_r+0x18>
 8006608:	080063b1 	.word	0x080063b1

0800660c <__malloc_lock>:
 800660c:	4770      	bx	lr

0800660e <__malloc_unlock>:
 800660e:	4770      	bx	lr

08006610 <__sfputc_r>:
 8006610:	6893      	ldr	r3, [r2, #8]
 8006612:	3b01      	subs	r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	b410      	push	{r4}
 8006618:	6093      	str	r3, [r2, #8]
 800661a:	da09      	bge.n	8006630 <__sfputc_r+0x20>
 800661c:	6994      	ldr	r4, [r2, #24]
 800661e:	42a3      	cmp	r3, r4
 8006620:	db02      	blt.n	8006628 <__sfputc_r+0x18>
 8006622:	b2cb      	uxtb	r3, r1
 8006624:	2b0a      	cmp	r3, #10
 8006626:	d103      	bne.n	8006630 <__sfputc_r+0x20>
 8006628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800662c:	f7ff bd4e 	b.w	80060cc <__swbuf_r>
 8006630:	6813      	ldr	r3, [r2, #0]
 8006632:	1c58      	adds	r0, r3, #1
 8006634:	6010      	str	r0, [r2, #0]
 8006636:	7019      	strb	r1, [r3, #0]
 8006638:	b2c8      	uxtb	r0, r1
 800663a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800663e:	4770      	bx	lr

08006640 <__sfputs_r>:
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006642:	4606      	mov	r6, r0
 8006644:	460f      	mov	r7, r1
 8006646:	4614      	mov	r4, r2
 8006648:	18d5      	adds	r5, r2, r3
 800664a:	42ac      	cmp	r4, r5
 800664c:	d101      	bne.n	8006652 <__sfputs_r+0x12>
 800664e:	2000      	movs	r0, #0
 8006650:	e007      	b.n	8006662 <__sfputs_r+0x22>
 8006652:	463a      	mov	r2, r7
 8006654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006658:	4630      	mov	r0, r6
 800665a:	f7ff ffd9 	bl	8006610 <__sfputc_r>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d1f3      	bne.n	800664a <__sfputs_r+0xa>
 8006662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006664 <_vfiprintf_r>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	b09d      	sub	sp, #116	; 0x74
 800666a:	460c      	mov	r4, r1
 800666c:	4617      	mov	r7, r2
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	4606      	mov	r6, r0
 8006672:	b118      	cbz	r0, 800667c <_vfiprintf_r+0x18>
 8006674:	6983      	ldr	r3, [r0, #24]
 8006676:	b90b      	cbnz	r3, 800667c <_vfiprintf_r+0x18>
 8006678:	f7ff feda 	bl	8006430 <__sinit>
 800667c:	4b7c      	ldr	r3, [pc, #496]	; (8006870 <_vfiprintf_r+0x20c>)
 800667e:	429c      	cmp	r4, r3
 8006680:	d157      	bne.n	8006732 <_vfiprintf_r+0xce>
 8006682:	6874      	ldr	r4, [r6, #4]
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	0718      	lsls	r0, r3, #28
 8006688:	d55d      	bpl.n	8006746 <_vfiprintf_r+0xe2>
 800668a:	6923      	ldr	r3, [r4, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d05a      	beq.n	8006746 <_vfiprintf_r+0xe2>
 8006690:	2300      	movs	r3, #0
 8006692:	9309      	str	r3, [sp, #36]	; 0x24
 8006694:	2320      	movs	r3, #32
 8006696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800669a:	2330      	movs	r3, #48	; 0x30
 800669c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066a0:	f04f 0b01 	mov.w	fp, #1
 80066a4:	46b8      	mov	r8, r7
 80066a6:	4645      	mov	r5, r8
 80066a8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d155      	bne.n	800675c <_vfiprintf_r+0xf8>
 80066b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80066b4:	d00b      	beq.n	80066ce <_vfiprintf_r+0x6a>
 80066b6:	4653      	mov	r3, sl
 80066b8:	463a      	mov	r2, r7
 80066ba:	4621      	mov	r1, r4
 80066bc:	4630      	mov	r0, r6
 80066be:	f7ff ffbf 	bl	8006640 <__sfputs_r>
 80066c2:	3001      	adds	r0, #1
 80066c4:	f000 80c4 	beq.w	8006850 <_vfiprintf_r+0x1ec>
 80066c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ca:	4453      	add	r3, sl
 80066cc:	9309      	str	r3, [sp, #36]	; 0x24
 80066ce:	f898 3000 	ldrb.w	r3, [r8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 80bc 	beq.w	8006850 <_vfiprintf_r+0x1ec>
 80066d8:	2300      	movs	r3, #0
 80066da:	f04f 32ff 	mov.w	r2, #4294967295
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	9307      	str	r3, [sp, #28]
 80066e2:	9205      	str	r2, [sp, #20]
 80066e4:	9306      	str	r3, [sp, #24]
 80066e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066ea:	931a      	str	r3, [sp, #104]	; 0x68
 80066ec:	2205      	movs	r2, #5
 80066ee:	7829      	ldrb	r1, [r5, #0]
 80066f0:	4860      	ldr	r0, [pc, #384]	; (8006874 <_vfiprintf_r+0x210>)
 80066f2:	f7f9 fd75 	bl	80001e0 <memchr>
 80066f6:	f105 0801 	add.w	r8, r5, #1
 80066fa:	9b04      	ldr	r3, [sp, #16]
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d131      	bne.n	8006764 <_vfiprintf_r+0x100>
 8006700:	06d9      	lsls	r1, r3, #27
 8006702:	bf44      	itt	mi
 8006704:	2220      	movmi	r2, #32
 8006706:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800670a:	071a      	lsls	r2, r3, #28
 800670c:	bf44      	itt	mi
 800670e:	222b      	movmi	r2, #43	; 0x2b
 8006710:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006714:	782a      	ldrb	r2, [r5, #0]
 8006716:	2a2a      	cmp	r2, #42	; 0x2a
 8006718:	d02c      	beq.n	8006774 <_vfiprintf_r+0x110>
 800671a:	9a07      	ldr	r2, [sp, #28]
 800671c:	2100      	movs	r1, #0
 800671e:	200a      	movs	r0, #10
 8006720:	46a8      	mov	r8, r5
 8006722:	3501      	adds	r5, #1
 8006724:	f898 3000 	ldrb.w	r3, [r8]
 8006728:	3b30      	subs	r3, #48	; 0x30
 800672a:	2b09      	cmp	r3, #9
 800672c:	d96d      	bls.n	800680a <_vfiprintf_r+0x1a6>
 800672e:	b371      	cbz	r1, 800678e <_vfiprintf_r+0x12a>
 8006730:	e026      	b.n	8006780 <_vfiprintf_r+0x11c>
 8006732:	4b51      	ldr	r3, [pc, #324]	; (8006878 <_vfiprintf_r+0x214>)
 8006734:	429c      	cmp	r4, r3
 8006736:	d101      	bne.n	800673c <_vfiprintf_r+0xd8>
 8006738:	68b4      	ldr	r4, [r6, #8]
 800673a:	e7a3      	b.n	8006684 <_vfiprintf_r+0x20>
 800673c:	4b4f      	ldr	r3, [pc, #316]	; (800687c <_vfiprintf_r+0x218>)
 800673e:	429c      	cmp	r4, r3
 8006740:	bf08      	it	eq
 8006742:	68f4      	ldreq	r4, [r6, #12]
 8006744:	e79e      	b.n	8006684 <_vfiprintf_r+0x20>
 8006746:	4621      	mov	r1, r4
 8006748:	4630      	mov	r0, r6
 800674a:	f7ff fd11 	bl	8006170 <__swsetup_r>
 800674e:	2800      	cmp	r0, #0
 8006750:	d09e      	beq.n	8006690 <_vfiprintf_r+0x2c>
 8006752:	f04f 30ff 	mov.w	r0, #4294967295
 8006756:	b01d      	add	sp, #116	; 0x74
 8006758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675c:	2b25      	cmp	r3, #37	; 0x25
 800675e:	d0a7      	beq.n	80066b0 <_vfiprintf_r+0x4c>
 8006760:	46a8      	mov	r8, r5
 8006762:	e7a0      	b.n	80066a6 <_vfiprintf_r+0x42>
 8006764:	4a43      	ldr	r2, [pc, #268]	; (8006874 <_vfiprintf_r+0x210>)
 8006766:	1a80      	subs	r0, r0, r2
 8006768:	fa0b f000 	lsl.w	r0, fp, r0
 800676c:	4318      	orrs	r0, r3
 800676e:	9004      	str	r0, [sp, #16]
 8006770:	4645      	mov	r5, r8
 8006772:	e7bb      	b.n	80066ec <_vfiprintf_r+0x88>
 8006774:	9a03      	ldr	r2, [sp, #12]
 8006776:	1d11      	adds	r1, r2, #4
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	9103      	str	r1, [sp, #12]
 800677c:	2a00      	cmp	r2, #0
 800677e:	db01      	blt.n	8006784 <_vfiprintf_r+0x120>
 8006780:	9207      	str	r2, [sp, #28]
 8006782:	e004      	b.n	800678e <_vfiprintf_r+0x12a>
 8006784:	4252      	negs	r2, r2
 8006786:	f043 0302 	orr.w	r3, r3, #2
 800678a:	9207      	str	r2, [sp, #28]
 800678c:	9304      	str	r3, [sp, #16]
 800678e:	f898 3000 	ldrb.w	r3, [r8]
 8006792:	2b2e      	cmp	r3, #46	; 0x2e
 8006794:	d110      	bne.n	80067b8 <_vfiprintf_r+0x154>
 8006796:	f898 3001 	ldrb.w	r3, [r8, #1]
 800679a:	2b2a      	cmp	r3, #42	; 0x2a
 800679c:	f108 0101 	add.w	r1, r8, #1
 80067a0:	d137      	bne.n	8006812 <_vfiprintf_r+0x1ae>
 80067a2:	9b03      	ldr	r3, [sp, #12]
 80067a4:	1d1a      	adds	r2, r3, #4
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	9203      	str	r2, [sp, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bfb8      	it	lt
 80067ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80067b2:	f108 0802 	add.w	r8, r8, #2
 80067b6:	9305      	str	r3, [sp, #20]
 80067b8:	4d31      	ldr	r5, [pc, #196]	; (8006880 <_vfiprintf_r+0x21c>)
 80067ba:	f898 1000 	ldrb.w	r1, [r8]
 80067be:	2203      	movs	r2, #3
 80067c0:	4628      	mov	r0, r5
 80067c2:	f7f9 fd0d 	bl	80001e0 <memchr>
 80067c6:	b140      	cbz	r0, 80067da <_vfiprintf_r+0x176>
 80067c8:	2340      	movs	r3, #64	; 0x40
 80067ca:	1b40      	subs	r0, r0, r5
 80067cc:	fa03 f000 	lsl.w	r0, r3, r0
 80067d0:	9b04      	ldr	r3, [sp, #16]
 80067d2:	4303      	orrs	r3, r0
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	f108 0801 	add.w	r8, r8, #1
 80067da:	f898 1000 	ldrb.w	r1, [r8]
 80067de:	4829      	ldr	r0, [pc, #164]	; (8006884 <_vfiprintf_r+0x220>)
 80067e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e4:	2206      	movs	r2, #6
 80067e6:	f108 0701 	add.w	r7, r8, #1
 80067ea:	f7f9 fcf9 	bl	80001e0 <memchr>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d034      	beq.n	800685c <_vfiprintf_r+0x1f8>
 80067f2:	4b25      	ldr	r3, [pc, #148]	; (8006888 <_vfiprintf_r+0x224>)
 80067f4:	bb03      	cbnz	r3, 8006838 <_vfiprintf_r+0x1d4>
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	3307      	adds	r3, #7
 80067fa:	f023 0307 	bic.w	r3, r3, #7
 80067fe:	3308      	adds	r3, #8
 8006800:	9303      	str	r3, [sp, #12]
 8006802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006804:	444b      	add	r3, r9
 8006806:	9309      	str	r3, [sp, #36]	; 0x24
 8006808:	e74c      	b.n	80066a4 <_vfiprintf_r+0x40>
 800680a:	fb00 3202 	mla	r2, r0, r2, r3
 800680e:	2101      	movs	r1, #1
 8006810:	e786      	b.n	8006720 <_vfiprintf_r+0xbc>
 8006812:	2300      	movs	r3, #0
 8006814:	9305      	str	r3, [sp, #20]
 8006816:	4618      	mov	r0, r3
 8006818:	250a      	movs	r5, #10
 800681a:	4688      	mov	r8, r1
 800681c:	3101      	adds	r1, #1
 800681e:	f898 2000 	ldrb.w	r2, [r8]
 8006822:	3a30      	subs	r2, #48	; 0x30
 8006824:	2a09      	cmp	r2, #9
 8006826:	d903      	bls.n	8006830 <_vfiprintf_r+0x1cc>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0c5      	beq.n	80067b8 <_vfiprintf_r+0x154>
 800682c:	9005      	str	r0, [sp, #20]
 800682e:	e7c3      	b.n	80067b8 <_vfiprintf_r+0x154>
 8006830:	fb05 2000 	mla	r0, r5, r0, r2
 8006834:	2301      	movs	r3, #1
 8006836:	e7f0      	b.n	800681a <_vfiprintf_r+0x1b6>
 8006838:	ab03      	add	r3, sp, #12
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	4622      	mov	r2, r4
 800683e:	4b13      	ldr	r3, [pc, #76]	; (800688c <_vfiprintf_r+0x228>)
 8006840:	a904      	add	r1, sp, #16
 8006842:	4630      	mov	r0, r6
 8006844:	f3af 8000 	nop.w
 8006848:	f1b0 3fff 	cmp.w	r0, #4294967295
 800684c:	4681      	mov	r9, r0
 800684e:	d1d8      	bne.n	8006802 <_vfiprintf_r+0x19e>
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	065b      	lsls	r3, r3, #25
 8006854:	f53f af7d 	bmi.w	8006752 <_vfiprintf_r+0xee>
 8006858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800685a:	e77c      	b.n	8006756 <_vfiprintf_r+0xf2>
 800685c:	ab03      	add	r3, sp, #12
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	4622      	mov	r2, r4
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <_vfiprintf_r+0x228>)
 8006864:	a904      	add	r1, sp, #16
 8006866:	4630      	mov	r0, r6
 8006868:	f000 f888 	bl	800697c <_printf_i>
 800686c:	e7ec      	b.n	8006848 <_vfiprintf_r+0x1e4>
 800686e:	bf00      	nop
 8006870:	08006de0 	.word	0x08006de0
 8006874:	08006e24 	.word	0x08006e24
 8006878:	08006e00 	.word	0x08006e00
 800687c:	08006dc0 	.word	0x08006dc0
 8006880:	08006e2a 	.word	0x08006e2a
 8006884:	08006e2e 	.word	0x08006e2e
 8006888:	00000000 	.word	0x00000000
 800688c:	08006641 	.word	0x08006641

08006890 <_printf_common>:
 8006890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	4691      	mov	r9, r2
 8006896:	461f      	mov	r7, r3
 8006898:	688a      	ldr	r2, [r1, #8]
 800689a:	690b      	ldr	r3, [r1, #16]
 800689c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068a0:	4293      	cmp	r3, r2
 80068a2:	bfb8      	it	lt
 80068a4:	4613      	movlt	r3, r2
 80068a6:	f8c9 3000 	str.w	r3, [r9]
 80068aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068ae:	4606      	mov	r6, r0
 80068b0:	460c      	mov	r4, r1
 80068b2:	b112      	cbz	r2, 80068ba <_printf_common+0x2a>
 80068b4:	3301      	adds	r3, #1
 80068b6:	f8c9 3000 	str.w	r3, [r9]
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	0699      	lsls	r1, r3, #26
 80068be:	bf42      	ittt	mi
 80068c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80068c4:	3302      	addmi	r3, #2
 80068c6:	f8c9 3000 	strmi.w	r3, [r9]
 80068ca:	6825      	ldr	r5, [r4, #0]
 80068cc:	f015 0506 	ands.w	r5, r5, #6
 80068d0:	d107      	bne.n	80068e2 <_printf_common+0x52>
 80068d2:	f104 0a19 	add.w	sl, r4, #25
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	f8d9 2000 	ldr.w	r2, [r9]
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	429d      	cmp	r5, r3
 80068e0:	db29      	blt.n	8006936 <_printf_common+0xa6>
 80068e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	3300      	adds	r3, #0
 80068ea:	bf18      	it	ne
 80068ec:	2301      	movne	r3, #1
 80068ee:	0692      	lsls	r2, r2, #26
 80068f0:	d42e      	bmi.n	8006950 <_printf_common+0xc0>
 80068f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f6:	4639      	mov	r1, r7
 80068f8:	4630      	mov	r0, r6
 80068fa:	47c0      	blx	r8
 80068fc:	3001      	adds	r0, #1
 80068fe:	d021      	beq.n	8006944 <_printf_common+0xb4>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	68e5      	ldr	r5, [r4, #12]
 8006904:	f8d9 2000 	ldr.w	r2, [r9]
 8006908:	f003 0306 	and.w	r3, r3, #6
 800690c:	2b04      	cmp	r3, #4
 800690e:	bf08      	it	eq
 8006910:	1aad      	subeq	r5, r5, r2
 8006912:	68a3      	ldr	r3, [r4, #8]
 8006914:	6922      	ldr	r2, [r4, #16]
 8006916:	bf0c      	ite	eq
 8006918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800691c:	2500      	movne	r5, #0
 800691e:	4293      	cmp	r3, r2
 8006920:	bfc4      	itt	gt
 8006922:	1a9b      	subgt	r3, r3, r2
 8006924:	18ed      	addgt	r5, r5, r3
 8006926:	f04f 0900 	mov.w	r9, #0
 800692a:	341a      	adds	r4, #26
 800692c:	454d      	cmp	r5, r9
 800692e:	d11b      	bne.n	8006968 <_printf_common+0xd8>
 8006930:	2000      	movs	r0, #0
 8006932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006936:	2301      	movs	r3, #1
 8006938:	4652      	mov	r2, sl
 800693a:	4639      	mov	r1, r7
 800693c:	4630      	mov	r0, r6
 800693e:	47c0      	blx	r8
 8006940:	3001      	adds	r0, #1
 8006942:	d103      	bne.n	800694c <_printf_common+0xbc>
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694c:	3501      	adds	r5, #1
 800694e:	e7c2      	b.n	80068d6 <_printf_common+0x46>
 8006950:	18e1      	adds	r1, r4, r3
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	2030      	movs	r0, #48	; 0x30
 8006956:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800695a:	4422      	add	r2, r4
 800695c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006960:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006964:	3302      	adds	r3, #2
 8006966:	e7c4      	b.n	80068f2 <_printf_common+0x62>
 8006968:	2301      	movs	r3, #1
 800696a:	4622      	mov	r2, r4
 800696c:	4639      	mov	r1, r7
 800696e:	4630      	mov	r0, r6
 8006970:	47c0      	blx	r8
 8006972:	3001      	adds	r0, #1
 8006974:	d0e6      	beq.n	8006944 <_printf_common+0xb4>
 8006976:	f109 0901 	add.w	r9, r9, #1
 800697a:	e7d7      	b.n	800692c <_printf_common+0x9c>

0800697c <_printf_i>:
 800697c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006980:	4617      	mov	r7, r2
 8006982:	7e0a      	ldrb	r2, [r1, #24]
 8006984:	b085      	sub	sp, #20
 8006986:	2a6e      	cmp	r2, #110	; 0x6e
 8006988:	4698      	mov	r8, r3
 800698a:	4606      	mov	r6, r0
 800698c:	460c      	mov	r4, r1
 800698e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006990:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006994:	f000 80bc 	beq.w	8006b10 <_printf_i+0x194>
 8006998:	d81a      	bhi.n	80069d0 <_printf_i+0x54>
 800699a:	2a63      	cmp	r2, #99	; 0x63
 800699c:	d02e      	beq.n	80069fc <_printf_i+0x80>
 800699e:	d80a      	bhi.n	80069b6 <_printf_i+0x3a>
 80069a0:	2a00      	cmp	r2, #0
 80069a2:	f000 80c8 	beq.w	8006b36 <_printf_i+0x1ba>
 80069a6:	2a58      	cmp	r2, #88	; 0x58
 80069a8:	f000 808a 	beq.w	8006ac0 <_printf_i+0x144>
 80069ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80069b4:	e02a      	b.n	8006a0c <_printf_i+0x90>
 80069b6:	2a64      	cmp	r2, #100	; 0x64
 80069b8:	d001      	beq.n	80069be <_printf_i+0x42>
 80069ba:	2a69      	cmp	r2, #105	; 0x69
 80069bc:	d1f6      	bne.n	80069ac <_printf_i+0x30>
 80069be:	6821      	ldr	r1, [r4, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80069c6:	d023      	beq.n	8006a10 <_printf_i+0x94>
 80069c8:	1d11      	adds	r1, r2, #4
 80069ca:	6019      	str	r1, [r3, #0]
 80069cc:	6813      	ldr	r3, [r2, #0]
 80069ce:	e027      	b.n	8006a20 <_printf_i+0xa4>
 80069d0:	2a73      	cmp	r2, #115	; 0x73
 80069d2:	f000 80b4 	beq.w	8006b3e <_printf_i+0x1c2>
 80069d6:	d808      	bhi.n	80069ea <_printf_i+0x6e>
 80069d8:	2a6f      	cmp	r2, #111	; 0x6f
 80069da:	d02a      	beq.n	8006a32 <_printf_i+0xb6>
 80069dc:	2a70      	cmp	r2, #112	; 0x70
 80069de:	d1e5      	bne.n	80069ac <_printf_i+0x30>
 80069e0:	680a      	ldr	r2, [r1, #0]
 80069e2:	f042 0220 	orr.w	r2, r2, #32
 80069e6:	600a      	str	r2, [r1, #0]
 80069e8:	e003      	b.n	80069f2 <_printf_i+0x76>
 80069ea:	2a75      	cmp	r2, #117	; 0x75
 80069ec:	d021      	beq.n	8006a32 <_printf_i+0xb6>
 80069ee:	2a78      	cmp	r2, #120	; 0x78
 80069f0:	d1dc      	bne.n	80069ac <_printf_i+0x30>
 80069f2:	2278      	movs	r2, #120	; 0x78
 80069f4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80069f8:	496e      	ldr	r1, [pc, #440]	; (8006bb4 <_printf_i+0x238>)
 80069fa:	e064      	b.n	8006ac6 <_printf_i+0x14a>
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006a02:	1d11      	adds	r1, r2, #4
 8006a04:	6019      	str	r1, [r3, #0]
 8006a06:	6813      	ldr	r3, [r2, #0]
 8006a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0a3      	b.n	8006b58 <_printf_i+0x1dc>
 8006a10:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006a14:	f102 0104 	add.w	r1, r2, #4
 8006a18:	6019      	str	r1, [r3, #0]
 8006a1a:	d0d7      	beq.n	80069cc <_printf_i+0x50>
 8006a1c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	da03      	bge.n	8006a2c <_printf_i+0xb0>
 8006a24:	222d      	movs	r2, #45	; 0x2d
 8006a26:	425b      	negs	r3, r3
 8006a28:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006a2c:	4962      	ldr	r1, [pc, #392]	; (8006bb8 <_printf_i+0x23c>)
 8006a2e:	220a      	movs	r2, #10
 8006a30:	e017      	b.n	8006a62 <_printf_i+0xe6>
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	6819      	ldr	r1, [r3, #0]
 8006a36:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006a3a:	d003      	beq.n	8006a44 <_printf_i+0xc8>
 8006a3c:	1d08      	adds	r0, r1, #4
 8006a3e:	6018      	str	r0, [r3, #0]
 8006a40:	680b      	ldr	r3, [r1, #0]
 8006a42:	e006      	b.n	8006a52 <_printf_i+0xd6>
 8006a44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a48:	f101 0004 	add.w	r0, r1, #4
 8006a4c:	6018      	str	r0, [r3, #0]
 8006a4e:	d0f7      	beq.n	8006a40 <_printf_i+0xc4>
 8006a50:	880b      	ldrh	r3, [r1, #0]
 8006a52:	4959      	ldr	r1, [pc, #356]	; (8006bb8 <_printf_i+0x23c>)
 8006a54:	2a6f      	cmp	r2, #111	; 0x6f
 8006a56:	bf14      	ite	ne
 8006a58:	220a      	movne	r2, #10
 8006a5a:	2208      	moveq	r2, #8
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006a62:	6865      	ldr	r5, [r4, #4]
 8006a64:	60a5      	str	r5, [r4, #8]
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	f2c0 809c 	blt.w	8006ba4 <_printf_i+0x228>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	f020 0004 	bic.w	r0, r0, #4
 8006a72:	6020      	str	r0, [r4, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d13f      	bne.n	8006af8 <_printf_i+0x17c>
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	f040 8095 	bne.w	8006ba8 <_printf_i+0x22c>
 8006a7e:	4675      	mov	r5, lr
 8006a80:	2a08      	cmp	r2, #8
 8006a82:	d10b      	bne.n	8006a9c <_printf_i+0x120>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	07da      	lsls	r2, r3, #31
 8006a88:	d508      	bpl.n	8006a9c <_printf_i+0x120>
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	6862      	ldr	r2, [r4, #4]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	bfde      	ittt	le
 8006a92:	2330      	movle	r3, #48	; 0x30
 8006a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a9c:	ebae 0305 	sub.w	r3, lr, r5
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	f8cd 8000 	str.w	r8, [sp]
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	aa03      	add	r2, sp, #12
 8006aaa:	4621      	mov	r1, r4
 8006aac:	4630      	mov	r0, r6
 8006aae:	f7ff feef 	bl	8006890 <_printf_common>
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d155      	bne.n	8006b62 <_printf_i+0x1e6>
 8006ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aba:	b005      	add	sp, #20
 8006abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ac0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006ac4:	493c      	ldr	r1, [pc, #240]	; (8006bb8 <_printf_i+0x23c>)
 8006ac6:	6822      	ldr	r2, [r4, #0]
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ace:	f100 0504 	add.w	r5, r0, #4
 8006ad2:	601d      	str	r5, [r3, #0]
 8006ad4:	d001      	beq.n	8006ada <_printf_i+0x15e>
 8006ad6:	6803      	ldr	r3, [r0, #0]
 8006ad8:	e002      	b.n	8006ae0 <_printf_i+0x164>
 8006ada:	0655      	lsls	r5, r2, #25
 8006adc:	d5fb      	bpl.n	8006ad6 <_printf_i+0x15a>
 8006ade:	8803      	ldrh	r3, [r0, #0]
 8006ae0:	07d0      	lsls	r0, r2, #31
 8006ae2:	bf44      	itt	mi
 8006ae4:	f042 0220 	orrmi.w	r2, r2, #32
 8006ae8:	6022      	strmi	r2, [r4, #0]
 8006aea:	b91b      	cbnz	r3, 8006af4 <_printf_i+0x178>
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	f022 0220 	bic.w	r2, r2, #32
 8006af2:	6022      	str	r2, [r4, #0]
 8006af4:	2210      	movs	r2, #16
 8006af6:	e7b1      	b.n	8006a5c <_printf_i+0xe0>
 8006af8:	4675      	mov	r5, lr
 8006afa:	fbb3 f0f2 	udiv	r0, r3, r2
 8006afe:	fb02 3310 	mls	r3, r2, r0, r3
 8006b02:	5ccb      	ldrb	r3, [r1, r3]
 8006b04:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d1f5      	bne.n	8006afa <_printf_i+0x17e>
 8006b0e:	e7b7      	b.n	8006a80 <_printf_i+0x104>
 8006b10:	6808      	ldr	r0, [r1, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	6949      	ldr	r1, [r1, #20]
 8006b16:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006b1a:	d004      	beq.n	8006b26 <_printf_i+0x1aa>
 8006b1c:	1d10      	adds	r0, r2, #4
 8006b1e:	6018      	str	r0, [r3, #0]
 8006b20:	6813      	ldr	r3, [r2, #0]
 8006b22:	6019      	str	r1, [r3, #0]
 8006b24:	e007      	b.n	8006b36 <_printf_i+0x1ba>
 8006b26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b2a:	f102 0004 	add.w	r0, r2, #4
 8006b2e:	6018      	str	r0, [r3, #0]
 8006b30:	6813      	ldr	r3, [r2, #0]
 8006b32:	d0f6      	beq.n	8006b22 <_printf_i+0x1a6>
 8006b34:	8019      	strh	r1, [r3, #0]
 8006b36:	2300      	movs	r3, #0
 8006b38:	6123      	str	r3, [r4, #16]
 8006b3a:	4675      	mov	r5, lr
 8006b3c:	e7b1      	b.n	8006aa2 <_printf_i+0x126>
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	1d11      	adds	r1, r2, #4
 8006b42:	6019      	str	r1, [r3, #0]
 8006b44:	6815      	ldr	r5, [r2, #0]
 8006b46:	6862      	ldr	r2, [r4, #4]
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f7f9 fb48 	bl	80001e0 <memchr>
 8006b50:	b108      	cbz	r0, 8006b56 <_printf_i+0x1da>
 8006b52:	1b40      	subs	r0, r0, r5
 8006b54:	6060      	str	r0, [r4, #4]
 8006b56:	6863      	ldr	r3, [r4, #4]
 8006b58:	6123      	str	r3, [r4, #16]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b60:	e79f      	b.n	8006aa2 <_printf_i+0x126>
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	462a      	mov	r2, r5
 8006b66:	4639      	mov	r1, r7
 8006b68:	4630      	mov	r0, r6
 8006b6a:	47c0      	blx	r8
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d0a2      	beq.n	8006ab6 <_printf_i+0x13a>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	079b      	lsls	r3, r3, #30
 8006b74:	d507      	bpl.n	8006b86 <_printf_i+0x20a>
 8006b76:	2500      	movs	r5, #0
 8006b78:	f104 0919 	add.w	r9, r4, #25
 8006b7c:	68e3      	ldr	r3, [r4, #12]
 8006b7e:	9a03      	ldr	r2, [sp, #12]
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	429d      	cmp	r5, r3
 8006b84:	db05      	blt.n	8006b92 <_printf_i+0x216>
 8006b86:	68e0      	ldr	r0, [r4, #12]
 8006b88:	9b03      	ldr	r3, [sp, #12]
 8006b8a:	4298      	cmp	r0, r3
 8006b8c:	bfb8      	it	lt
 8006b8e:	4618      	movlt	r0, r3
 8006b90:	e793      	b.n	8006aba <_printf_i+0x13e>
 8006b92:	2301      	movs	r3, #1
 8006b94:	464a      	mov	r2, r9
 8006b96:	4639      	mov	r1, r7
 8006b98:	4630      	mov	r0, r6
 8006b9a:	47c0      	blx	r8
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d08a      	beq.n	8006ab6 <_printf_i+0x13a>
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	e7eb      	b.n	8006b7c <_printf_i+0x200>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1a7      	bne.n	8006af8 <_printf_i+0x17c>
 8006ba8:	780b      	ldrb	r3, [r1, #0]
 8006baa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb2:	e765      	b.n	8006a80 <_printf_i+0x104>
 8006bb4:	08006e46 	.word	0x08006e46
 8006bb8:	08006e35 	.word	0x08006e35

08006bbc <__sread>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc4:	f000 f894 	bl	8006cf0 <_read_r>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	bfab      	itete	ge
 8006bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bce:	89a3      	ldrhlt	r3, [r4, #12]
 8006bd0:	181b      	addge	r3, r3, r0
 8006bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bd6:	bfac      	ite	ge
 8006bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bda:	81a3      	strhlt	r3, [r4, #12]
 8006bdc:	bd10      	pop	{r4, pc}

08006bde <__swrite>:
 8006bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be2:	461f      	mov	r7, r3
 8006be4:	898b      	ldrh	r3, [r1, #12]
 8006be6:	05db      	lsls	r3, r3, #23
 8006be8:	4605      	mov	r5, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	4616      	mov	r6, r2
 8006bee:	d505      	bpl.n	8006bfc <__swrite+0x1e>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf8:	f000 f868 	bl	8006ccc <_lseek_r>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	4632      	mov	r2, r6
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c12:	f000 b817 	b.w	8006c44 <_write_r>

08006c16 <__sseek>:
 8006c16:	b510      	push	{r4, lr}
 8006c18:	460c      	mov	r4, r1
 8006c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1e:	f000 f855 	bl	8006ccc <_lseek_r>
 8006c22:	1c43      	adds	r3, r0, #1
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	bf15      	itete	ne
 8006c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c32:	81a3      	strheq	r3, [r4, #12]
 8006c34:	bf18      	it	ne
 8006c36:	81a3      	strhne	r3, [r4, #12]
 8006c38:	bd10      	pop	{r4, pc}

08006c3a <__sclose>:
 8006c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3e:	f000 b813 	b.w	8006c68 <_close_r>
	...

08006c44 <_write_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4c07      	ldr	r4, [pc, #28]	; (8006c64 <_write_r+0x20>)
 8006c48:	4605      	mov	r5, r0
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	2200      	movs	r2, #0
 8006c50:	6022      	str	r2, [r4, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f7fe fee6 	bl	8005a24 <_write>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_write_r+0x1e>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_write_r+0x1e>
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	200045a8 	.word	0x200045a8

08006c68 <_close_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4c06      	ldr	r4, [pc, #24]	; (8006c84 <_close_r+0x1c>)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4605      	mov	r5, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	f7fe ff0e 	bl	8005a94 <_close>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_close_r+0x1a>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_close_r+0x1a>
 8006c80:	602b      	str	r3, [r5, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	200045a8 	.word	0x200045a8

08006c88 <_fstat_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4c07      	ldr	r4, [pc, #28]	; (8006ca8 <_fstat_r+0x20>)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4605      	mov	r5, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	4611      	mov	r1, r2
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	f7fe ff00 	bl	8005a9a <_fstat>
 8006c9a:	1c43      	adds	r3, r0, #1
 8006c9c:	d102      	bne.n	8006ca4 <_fstat_r+0x1c>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	b103      	cbz	r3, 8006ca4 <_fstat_r+0x1c>
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	bd38      	pop	{r3, r4, r5, pc}
 8006ca6:	bf00      	nop
 8006ca8:	200045a8 	.word	0x200045a8

08006cac <_isatty_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4c06      	ldr	r4, [pc, #24]	; (8006cc8 <_isatty_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	f7fe fef4 	bl	8005aa4 <_isatty>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_isatty_r+0x1a>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_isatty_r+0x1a>
 8006cc4:	602b      	str	r3, [r5, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	200045a8 	.word	0x200045a8

08006ccc <_lseek_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4c07      	ldr	r4, [pc, #28]	; (8006cec <_lseek_r+0x20>)
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	4608      	mov	r0, r1
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	6022      	str	r2, [r4, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f7fe fee4 	bl	8005aa8 <_lseek>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_lseek_r+0x1e>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_lseek_r+0x1e>
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	200045a8 	.word	0x200045a8

08006cf0 <_read_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4c07      	ldr	r4, [pc, #28]	; (8006d10 <_read_r+0x20>)
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	4608      	mov	r0, r1
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	6022      	str	r2, [r4, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f7fe fed4 	bl	8005aac <_read>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_read_r+0x1e>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_read_r+0x1e>
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	200045a8 	.word	0x200045a8

08006d14 <_init>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	bf00      	nop
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr

08006d20 <_fini>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	bf00      	nop
 8006d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d26:	bc08      	pop	{r3}
 8006d28:	469e      	mov	lr, r3
 8006d2a:	4770      	bx	lr
