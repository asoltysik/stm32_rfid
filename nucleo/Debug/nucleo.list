
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c28  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  08003df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e78  2000006c  08003e64  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000ee4  08003e64  00020ee4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bd16  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000038b5  00000000  00000000  0003bdaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a9bc  00000000  00000000  0003f65f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e28  00000000  00000000  0004a020  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001260  00000000  00000000  0004ae48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007e47  00000000  00000000  0004c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000053f1  00000000  00000000  00053eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000592e0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003114  00000000  00000000  0005935c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003cd0 	.word	0x08003cd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08003cd0 	.word	0x08003cd0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	b083      	sub	sp, #12
 8000284:	000d      	movs	r5, r1
 8000286:	4692      	mov	sl, r2
 8000288:	4699      	mov	r9, r3
 800028a:	428b      	cmp	r3, r1
 800028c:	d82f      	bhi.n	80002ee <__udivmoddi4+0x7a>
 800028e:	d02c      	beq.n	80002ea <__udivmoddi4+0x76>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ae 	bl	80003f4 <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8a9 	bl	80003f4 <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	469b      	mov	fp, r3
 80002aa:	d500      	bpl.n	80002ae <__udivmoddi4+0x3a>
 80002ac:	e074      	b.n	8000398 <__udivmoddi4+0x124>
 80002ae:	4653      	mov	r3, sl
 80002b0:	465a      	mov	r2, fp
 80002b2:	4093      	lsls	r3, r2
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4642      	mov	r2, r8
 80002ba:	4093      	lsls	r3, r2
 80002bc:	001e      	movs	r6, r3
 80002be:	42af      	cmp	r7, r5
 80002c0:	d829      	bhi.n	8000316 <__udivmoddi4+0xa2>
 80002c2:	d026      	beq.n	8000312 <__udivmoddi4+0x9e>
 80002c4:	465b      	mov	r3, fp
 80002c6:	1ba4      	subs	r4, r4, r6
 80002c8:	41bd      	sbcs	r5, r7
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	da00      	bge.n	80002d0 <__udivmoddi4+0x5c>
 80002ce:	e079      	b.n	80003c4 <__udivmoddi4+0x150>
 80002d0:	2200      	movs	r2, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	9200      	str	r2, [sp, #0]
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	2301      	movs	r3, #1
 80002da:	465a      	mov	r2, fp
 80002dc:	4093      	lsls	r3, r2
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	2301      	movs	r3, #1
 80002e2:	4642      	mov	r2, r8
 80002e4:	4093      	lsls	r3, r2
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	e019      	b.n	800031e <__udivmoddi4+0xaa>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	d9d0      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002ee:	2200      	movs	r2, #0
 80002f0:	2300      	movs	r3, #0
 80002f2:	9200      	str	r2, [sp, #0]
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <__udivmoddi4+0x8c>
 80002fc:	601c      	str	r4, [r3, #0]
 80002fe:	605d      	str	r5, [r3, #4]
 8000300:	9800      	ldr	r0, [sp, #0]
 8000302:	9901      	ldr	r1, [sp, #4]
 8000304:	b003      	add	sp, #12
 8000306:	bc3c      	pop	{r2, r3, r4, r5}
 8000308:	4690      	mov	r8, r2
 800030a:	4699      	mov	r9, r3
 800030c:	46a2      	mov	sl, r4
 800030e:	46ab      	mov	fp, r5
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	42a3      	cmp	r3, r4
 8000314:	d9d6      	bls.n	80002c4 <__udivmoddi4+0x50>
 8000316:	2200      	movs	r2, #0
 8000318:	2300      	movs	r3, #0
 800031a:	9200      	str	r2, [sp, #0]
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	4643      	mov	r3, r8
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0e8      	beq.n	80002f6 <__udivmoddi4+0x82>
 8000324:	07fb      	lsls	r3, r7, #31
 8000326:	0872      	lsrs	r2, r6, #1
 8000328:	431a      	orrs	r2, r3
 800032a:	4646      	mov	r6, r8
 800032c:	087b      	lsrs	r3, r7, #1
 800032e:	e00e      	b.n	800034e <__udivmoddi4+0xda>
 8000330:	42ab      	cmp	r3, r5
 8000332:	d101      	bne.n	8000338 <__udivmoddi4+0xc4>
 8000334:	42a2      	cmp	r2, r4
 8000336:	d80c      	bhi.n	8000352 <__udivmoddi4+0xde>
 8000338:	1aa4      	subs	r4, r4, r2
 800033a:	419d      	sbcs	r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	1924      	adds	r4, r4, r4
 8000340:	416d      	adcs	r5, r5
 8000342:	2100      	movs	r1, #0
 8000344:	3e01      	subs	r6, #1
 8000346:	1824      	adds	r4, r4, r0
 8000348:	414d      	adcs	r5, r1
 800034a:	2e00      	cmp	r6, #0
 800034c:	d006      	beq.n	800035c <__udivmoddi4+0xe8>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d9ee      	bls.n	8000330 <__udivmoddi4+0xbc>
 8000352:	3e01      	subs	r6, #1
 8000354:	1924      	adds	r4, r4, r4
 8000356:	416d      	adcs	r5, r5
 8000358:	2e00      	cmp	r6, #0
 800035a:	d1f8      	bne.n	800034e <__udivmoddi4+0xda>
 800035c:	465b      	mov	r3, fp
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	1900      	adds	r0, r0, r4
 8000364:	4169      	adcs	r1, r5
 8000366:	2b00      	cmp	r3, #0
 8000368:	db22      	blt.n	80003b0 <__udivmoddi4+0x13c>
 800036a:	002b      	movs	r3, r5
 800036c:	465a      	mov	r2, fp
 800036e:	40d3      	lsrs	r3, r2
 8000370:	002a      	movs	r2, r5
 8000372:	4644      	mov	r4, r8
 8000374:	40e2      	lsrs	r2, r4
 8000376:	001c      	movs	r4, r3
 8000378:	465b      	mov	r3, fp
 800037a:	0015      	movs	r5, r2
 800037c:	2b00      	cmp	r3, #0
 800037e:	db2c      	blt.n	80003da <__udivmoddi4+0x166>
 8000380:	0026      	movs	r6, r4
 8000382:	409e      	lsls	r6, r3
 8000384:	0033      	movs	r3, r6
 8000386:	0026      	movs	r6, r4
 8000388:	4647      	mov	r7, r8
 800038a:	40be      	lsls	r6, r7
 800038c:	0032      	movs	r2, r6
 800038e:	1a80      	subs	r0, r0, r2
 8000390:	4199      	sbcs	r1, r3
 8000392:	9000      	str	r0, [sp, #0]
 8000394:	9101      	str	r1, [sp, #4]
 8000396:	e7ae      	b.n	80002f6 <__udivmoddi4+0x82>
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	431f      	orrs	r7, r3
 80003ae:	e782      	b.n	80002b6 <__udivmoddi4+0x42>
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	002a      	movs	r2, r5
 80003b8:	4646      	mov	r6, r8
 80003ba:	409a      	lsls	r2, r3
 80003bc:	0023      	movs	r3, r4
 80003be:	40f3      	lsrs	r3, r6
 80003c0:	4313      	orrs	r3, r2
 80003c2:	e7d5      	b.n	8000370 <__udivmoddi4+0xfc>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	2100      	movs	r1, #0
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	9100      	str	r1, [sp, #0]
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	2201      	movs	r2, #1
 80003d4:	40da      	lsrs	r2, r3
 80003d6:	9201      	str	r2, [sp, #4]
 80003d8:	e782      	b.n	80002e0 <__udivmoddi4+0x6c>
 80003da:	4642      	mov	r2, r8
 80003dc:	2320      	movs	r3, #32
 80003de:	0026      	movs	r6, r4
 80003e0:	1a9b      	subs	r3, r3, r2
 80003e2:	40de      	lsrs	r6, r3
 80003e4:	002f      	movs	r7, r5
 80003e6:	46b4      	mov	ip, r6
 80003e8:	4097      	lsls	r7, r2
 80003ea:	4666      	mov	r6, ip
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7c9      	b.n	8000386 <__udivmoddi4+0x112>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <HAL_Init>:
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000448:	2340      	movs	r3, #64	; 0x40
 800044a:	4a06      	ldr	r2, [pc, #24]	; (8000464 <HAL_Init+0x1c>)
{
 800044c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800044e:	6811      	ldr	r1, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000450:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000452:	430b      	orrs	r3, r1
 8000454:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000456:	f002 fba7 	bl	8002ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800045a:	f002 fb45 	bl	8002ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	40022000 	.word	0x40022000

08000468 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000468:	4a02      	ldr	r2, [pc, #8]	; (8000474 <HAL_IncTick+0xc>)
 800046a:	6813      	ldr	r3, [r2, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	20000dd8 	.word	0x20000dd8

08000478 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000478:	4b01      	ldr	r3, [pc, #4]	; (8000480 <HAL_GetTick+0x8>)
 800047a:	6818      	ldr	r0, [r3, #0]
}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	20000dd8 	.word	0x20000dd8

08000484 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000488:	2800      	cmp	r0, #0
 800048a:	da14      	bge.n	80004b6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800048c:	230f      	movs	r3, #15
 800048e:	b2c0      	uxtb	r0, r0
 8000490:	4003      	ands	r3, r0
 8000492:	3b08      	subs	r3, #8
 8000494:	4a11      	ldr	r2, [pc, #68]	; (80004dc <HAL_NVIC_SetPriority+0x58>)
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	189b      	adds	r3, r3, r2
 800049c:	2203      	movs	r2, #3
 800049e:	4010      	ands	r0, r2
 80004a0:	4090      	lsls	r0, r2
 80004a2:	32fc      	adds	r2, #252	; 0xfc
 80004a4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004a6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004a8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004aa:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ac:	69dc      	ldr	r4, [r3, #28]
 80004ae:	43ac      	bics	r4, r5
 80004b0:	4321      	orrs	r1, r4
 80004b2:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004b6:	2503      	movs	r5, #3
 80004b8:	0883      	lsrs	r3, r0, #2
 80004ba:	4028      	ands	r0, r5
 80004bc:	40a8      	lsls	r0, r5
 80004be:	35fc      	adds	r5, #252	; 0xfc
 80004c0:	002e      	movs	r6, r5
 80004c2:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <HAL_NVIC_SetPriority+0x5c>)
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	189b      	adds	r3, r3, r2
 80004c8:	22c0      	movs	r2, #192	; 0xc0
 80004ca:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004cc:	4029      	ands	r1, r5
 80004ce:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d0:	0092      	lsls	r2, r2, #2
 80004d2:	589c      	ldr	r4, [r3, r2]
 80004d4:	43b4      	bics	r4, r6
 80004d6:	4321      	orrs	r1, r4
 80004d8:	5099      	str	r1, [r3, r2]
 80004da:	e7eb      	b.n	80004b4 <HAL_NVIC_SetPriority+0x30>
 80004dc:	e000ed00 	.word	0xe000ed00
 80004e0:	e000e100 	.word	0xe000e100

080004e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004e4:	231f      	movs	r3, #31
 80004e6:	4018      	ands	r0, r3
 80004e8:	3b1e      	subs	r3, #30
 80004ea:	4083      	lsls	r3, r0
 80004ec:	4a01      	ldr	r2, [pc, #4]	; (80004f4 <HAL_NVIC_EnableIRQ+0x10>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80004f0:	4770      	bx	lr
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	e000e100 	.word	0xe000e100

080004f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004f8:	4a09      	ldr	r2, [pc, #36]	; (8000520 <HAL_SYSTICK_Config+0x28>)
 80004fa:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80004fc:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d80d      	bhi.n	800051e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000502:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000506:	4808      	ldr	r0, [pc, #32]	; (8000528 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000508:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050a:	6a03      	ldr	r3, [r0, #32]
 800050c:	0609      	lsls	r1, r1, #24
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	0a1b      	lsrs	r3, r3, #8
 8000512:	430b      	orrs	r3, r1
 8000514:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000516:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000518:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800051a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800051c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800051e:	4770      	bx	lr
 8000520:	00ffffff 	.word	0x00ffffff
 8000524:	e000e010 	.word	0xe000e010
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800052e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000530:	2804      	cmp	r0, #4
 8000532:	d102      	bne.n	800053a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000534:	4310      	orrs	r0, r2
 8000536:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000538:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800053a:	2104      	movs	r1, #4
 800053c:	438a      	bics	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
}
 8000540:	e7fa      	b.n	8000538 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	e000e010 	.word	0xe000e010

08000548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000548:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800054a:	4a53      	ldr	r2, [pc, #332]	; (8000698 <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800054c:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800054e:	1882      	adds	r2, r0, r2
 8000550:	1e54      	subs	r4, r2, #1
 8000552:	41a2      	sbcs	r2, r4
{
 8000554:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000556:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000558:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800055a:	3205      	adds	r2, #5
 800055c:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800055e:	9a01      	ldr	r2, [sp, #4]
 8000560:	40da      	lsrs	r2, r3
 8000562:	d101      	bne.n	8000568 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000564:	b005      	add	sp, #20
 8000566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000568:	2501      	movs	r5, #1
 800056a:	409d      	lsls	r5, r3
 800056c:	9a01      	ldr	r2, [sp, #4]
 800056e:	402a      	ands	r2, r5
 8000570:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000572:	d100      	bne.n	8000576 <HAL_GPIO_Init+0x2e>
 8000574:	e08d      	b.n	8000692 <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000576:	684a      	ldr	r2, [r1, #4]
 8000578:	4694      	mov	ip, r2
 800057a:	2210      	movs	r2, #16
 800057c:	4664      	mov	r4, ip
 800057e:	4394      	bics	r4, r2
 8000580:	0022      	movs	r2, r4
 8000582:	3c01      	subs	r4, #1
 8000584:	2a02      	cmp	r2, #2
 8000586:	d11f      	bne.n	80005c8 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000588:	2407      	movs	r4, #7
 800058a:	270f      	movs	r7, #15
 800058c:	401c      	ands	r4, r3
 800058e:	00a4      	lsls	r4, r4, #2
 8000590:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8000592:	08da      	lsrs	r2, r3, #3
 8000594:	0092      	lsls	r2, r2, #2
 8000596:	1882      	adds	r2, r0, r2
 8000598:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800059a:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800059c:	690f      	ldr	r7, [r1, #16]
 800059e:	40a7      	lsls	r7, r4
 80005a0:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80005a2:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005a4:	2403      	movs	r4, #3
 80005a6:	005e      	lsls	r6, r3, #1
 80005a8:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80005aa:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005ac:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005ae:	68cc      	ldr	r4, [r1, #12]
 80005b0:	40b4      	lsls	r4, r6
 80005b2:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80005b4:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005b6:	4662      	mov	r2, ip
 80005b8:	06d2      	lsls	r2, r2, #27
 80005ba:	0fd2      	lsrs	r2, r2, #31
 80005bc:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80005be:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005c0:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005c4:	6042      	str	r2, [r0, #4]
 80005c6:	e001      	b.n	80005cc <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005c8:	2c01      	cmp	r4, #1
 80005ca:	d9eb      	bls.n	80005a4 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005cc:	2603      	movs	r6, #3
 80005ce:	0034      	movs	r4, r6
 80005d0:	005d      	lsls	r5, r3, #1
 80005d2:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005d4:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005d6:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005d8:	4032      	ands	r2, r6
 80005da:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80005dc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005de:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005e0:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80005e2:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80005e4:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80005e6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80005e8:	688a      	ldr	r2, [r1, #8]
 80005ea:	40aa      	lsls	r2, r5
 80005ec:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005ee:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 80005f0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005f2:	00d2      	lsls	r2, r2, #3
 80005f4:	d54d      	bpl.n	8000692 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	2501      	movs	r5, #1
 80005f8:	4c28      	ldr	r4, [pc, #160]	; (800069c <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80005fa:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80005fe:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000600:	001d      	movs	r5, r3
 8000602:	4035      	ands	r5, r6
 8000604:	00ad      	lsls	r5, r5, #2
 8000606:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000608:	6362      	str	r2, [r4, #52]	; 0x34
 800060a:	4a25      	ldr	r2, [pc, #148]	; (80006a0 <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800060c:	089c      	lsrs	r4, r3, #2
 800060e:	00a4      	lsls	r4, r4, #2
 8000610:	18a4      	adds	r4, r4, r2
 8000612:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000614:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000616:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000618:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800061a:	05ff      	lsls	r7, r7, #23
 800061c:	2200      	movs	r2, #0
 800061e:	42b8      	cmp	r0, r7
 8000620:	d00c      	beq.n	800063c <HAL_GPIO_Init+0xf4>
 8000622:	4f20      	ldr	r7, [pc, #128]	; (80006a4 <HAL_GPIO_Init+0x15c>)
 8000624:	3201      	adds	r2, #1
 8000626:	42b8      	cmp	r0, r7
 8000628:	d008      	beq.n	800063c <HAL_GPIO_Init+0xf4>
 800062a:	4f1f      	ldr	r7, [pc, #124]	; (80006a8 <HAL_GPIO_Init+0x160>)
 800062c:	3201      	adds	r2, #1
 800062e:	42b8      	cmp	r0, r7
 8000630:	d004      	beq.n	800063c <HAL_GPIO_Init+0xf4>
 8000632:	4f1e      	ldr	r7, [pc, #120]	; (80006ac <HAL_GPIO_Init+0x164>)
 8000634:	0032      	movs	r2, r6
 8000636:	42b8      	cmp	r0, r7
 8000638:	d000      	beq.n	800063c <HAL_GPIO_Init+0xf4>
 800063a:	9a03      	ldr	r2, [sp, #12]
 800063c:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800063e:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000640:	9d02      	ldr	r5, [sp, #8]
 8000642:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000644:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000646:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 8000648:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 800064a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800064c:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800064e:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000650:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000652:	03ff      	lsls	r7, r7, #15
 8000654:	d401      	bmi.n	800065a <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 8000656:	0035      	movs	r5, r6
 8000658:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800065a:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 800065c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800065e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000660:	9d00      	ldr	r5, [sp, #0]
 8000662:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000664:	03bf      	lsls	r7, r7, #14
 8000666:	d401      	bmi.n	800066c <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 8000668:	0035      	movs	r5, r6
 800066a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800066c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800066e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000670:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000672:	9d00      	ldr	r5, [sp, #0]
 8000674:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000676:	02ff      	lsls	r7, r7, #11
 8000678:	d401      	bmi.n	800067e <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 800067a:	0035      	movs	r5, r6
 800067c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800067e:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000680:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000682:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000684:	9e00      	ldr	r6, [sp, #0]
 8000686:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000688:	02bf      	lsls	r7, r7, #10
 800068a:	d401      	bmi.n	8000690 <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 800068c:	4025      	ands	r5, r4
 800068e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000690:	60d6      	str	r6, [r2, #12]
    position++;
 8000692:	3301      	adds	r3, #1
 8000694:	e763      	b.n	800055e <HAL_GPIO_Init+0x16>
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	afffe400 	.word	0xafffe400
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010000 	.word	0x40010000
 80006a4:	50000400 	.word	0x50000400
 80006a8:	50000800 	.word	0x50000800
 80006ac:	50000c00 	.word	0x50000c00
 80006b0:	40010400 	.word	0x40010400

080006b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80006b4:	2a00      	cmp	r2, #0
 80006b6:	d001      	beq.n	80006bc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006b8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80006ba:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80006bc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80006be:	e7fc      	b.n	80006ba <HAL_GPIO_WritePin+0x6>

080006c0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80006c0:	6943      	ldr	r3, [r0, #20]
 80006c2:	4059      	eors	r1, r3
 80006c4:	6141      	str	r1, [r0, #20]
}
 80006c6:	4770      	bx	lr

080006c8 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80006c8:	22f0      	movs	r2, #240	; 0xf0
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 80006cc:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80006ce:	68d9      	ldr	r1, [r3, #12]
 80006d0:	4211      	tst	r1, r2
 80006d2:	d00b      	beq.n	80006ec <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80006d4:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 80006d6:	2101      	movs	r1, #1
 80006d8:	4814      	ldr	r0, [pc, #80]	; (800072c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80006da:	6802      	ldr	r2, [r0, #0]
 80006dc:	438a      	bics	r2, r1
 80006de:	431a      	orrs	r2, r3
 80006e0:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80006e2:	6800      	ldr	r0, [r0, #0]
 80006e4:	4008      	ands	r0, r1
 80006e6:	4058      	eors	r0, r3
 80006e8:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80006ea:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	22c0      	movs	r2, #192	; 0xc0
 80006f0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80006f2:	0549      	lsls	r1, r1, #21
 80006f4:	4c0e      	ldr	r4, [pc, #56]	; (8000730 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80006f6:	0152      	lsls	r2, r2, #5
 80006f8:	420d      	tst	r5, r1
 80006fa:	d00a      	beq.n	8000712 <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80006fc:	6823      	ldr	r3, [r4, #0]
 80006fe:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000700:	23c0      	movs	r3, #192	; 0xc0
 8000702:	015b      	lsls	r3, r3, #5
 8000704:	429a      	cmp	r2, r3
 8000706:	d1e5      	bne.n	80006d4 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800070a:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800070c:	4243      	negs	r3, r0
 800070e:	4143      	adcs	r3, r0
 8000710:	e7e1      	b.n	80006d6 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8000714:	4329      	orrs	r1, r5
 8000716:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000718:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800071a:	4c07      	ldr	r4, [pc, #28]	; (8000738 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800071c:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 800071e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000720:	4021      	ands	r1, r4
 8000722:	6399      	str	r1, [r3, #56]	; 0x38
 8000724:	e7ec      	b.n	8000700 <RCC_SetFlashLatencyFromMSIRange+0x38>
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000
 800072c:	40022000 	.word	0x40022000
 8000730:	40007000 	.word	0x40007000
 8000734:	ffff4000 	.word	0xffff4000
 8000738:	efffffff 	.word	0xefffffff

0800073c <HAL_RCC_OscConfig>:
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800073e:	6803      	ldr	r3, [r0, #0]
{
 8000740:	b085      	sub	sp, #20
 8000742:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000744:	07db      	lsls	r3, r3, #31
 8000746:	d44e      	bmi.n	80007e6 <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000748:	6823      	ldr	r3, [r4, #0]
 800074a:	079b      	lsls	r3, r3, #30
 800074c:	d500      	bpl.n	8000750 <HAL_RCC_OscConfig+0x14>
 800074e:	e09f      	b.n	8000890 <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000750:	6823      	ldr	r3, [r4, #0]
 8000752:	06db      	lsls	r3, r3, #27
 8000754:	d535      	bpl.n	80007c2 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000756:	230c      	movs	r3, #12
 8000758:	4dbc      	ldr	r5, [pc, #752]	; (8000a4c <HAL_RCC_OscConfig+0x310>)
 800075a:	68ea      	ldr	r2, [r5, #12]
 800075c:	421a      	tst	r2, r3
 800075e:	d000      	beq.n	8000762 <HAL_RCC_OscConfig+0x26>
 8000760:	e0e9      	b.n	8000936 <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000762:	682b      	ldr	r3, [r5, #0]
 8000764:	059b      	lsls	r3, r3, #22
 8000766:	d502      	bpl.n	800076e <HAL_RCC_OscConfig+0x32>
 8000768:	69e3      	ldr	r3, [r4, #28]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d050      	beq.n	8000810 <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800076e:	22e0      	movs	r2, #224	; 0xe0
 8000770:	686b      	ldr	r3, [r5, #4]
 8000772:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000774:	0212      	lsls	r2, r2, #8
 8000776:	4013      	ands	r3, r2
 8000778:	4298      	cmp	r0, r3
 800077a:	d800      	bhi.n	800077e <HAL_RCC_OscConfig+0x42>
 800077c:	e0c9      	b.n	8000912 <HAL_RCC_OscConfig+0x1d6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800077e:	f7ff ffa3 	bl	80006c8 <RCC_SetFlashLatencyFromMSIRange>
 8000782:	2800      	cmp	r0, #0
 8000784:	d144      	bne.n	8000810 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000786:	686b      	ldr	r3, [r5, #4]
 8000788:	4ab1      	ldr	r2, [pc, #708]	; (8000a50 <HAL_RCC_OscConfig+0x314>)
 800078a:	4013      	ands	r3, r2
 800078c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800078e:	4313      	orrs	r3, r2
 8000790:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000792:	686a      	ldr	r2, [r5, #4]
 8000794:	6a23      	ldr	r3, [r4, #32]
 8000796:	0212      	lsls	r2, r2, #8
 8000798:	061b      	lsls	r3, r3, #24
 800079a:	0a12      	lsrs	r2, r2, #8
 800079c:	4313      	orrs	r3, r2
 800079e:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007a2:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007a4:	0b59      	lsrs	r1, r3, #13
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	3101      	adds	r1, #1
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007ae:	0612      	lsls	r2, r2, #24
 80007b0:	49a8      	ldr	r1, [pc, #672]	; (8000a54 <HAL_RCC_OscConfig+0x318>)
 80007b2:	0f12      	lsrs	r2, r2, #28
 80007b4:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80007b6:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007ba:	4aa7      	ldr	r2, [pc, #668]	; (8000a58 <HAL_RCC_OscConfig+0x31c>)
 80007bc:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80007be:	f002 f9f3 	bl	8002ba8 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	071b      	lsls	r3, r3, #28
 80007c6:	d500      	bpl.n	80007ca <HAL_RCC_OscConfig+0x8e>
 80007c8:	e0ec      	b.n	80009a4 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007ca:	6823      	ldr	r3, [r4, #0]
 80007cc:	075b      	lsls	r3, r3, #29
 80007ce:	d500      	bpl.n	80007d2 <HAL_RCC_OscConfig+0x96>
 80007d0:	e10f      	b.n	80009f2 <HAL_RCC_OscConfig+0x2b6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	069b      	lsls	r3, r3, #26
 80007d6:	d500      	bpl.n	80007da <HAL_RCC_OscConfig+0x9e>
 80007d8:	e190      	b.n	8000afc <HAL_RCC_OscConfig+0x3c0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80007dc:	2900      	cmp	r1, #0
 80007de:	d000      	beq.n	80007e2 <HAL_RCC_OscConfig+0xa6>
 80007e0:	e1c0      	b.n	8000b64 <HAL_RCC_OscConfig+0x428>
  return HAL_OK;
 80007e2:	2000      	movs	r0, #0
 80007e4:	e015      	b.n	8000812 <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007e6:	210c      	movs	r1, #12
 80007e8:	4d98      	ldr	r5, [pc, #608]	; (8000a4c <HAL_RCC_OscConfig+0x310>)
 80007ea:	68eb      	ldr	r3, [r5, #12]
 80007ec:	400b      	ands	r3, r1
 80007ee:	2b08      	cmp	r3, #8
 80007f0:	d008      	beq.n	8000804 <HAL_RCC_OscConfig+0xc8>
 80007f2:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007f4:	68ea      	ldr	r2, [r5, #12]
 80007f6:	025b      	lsls	r3, r3, #9
 80007f8:	400a      	ands	r2, r1
 80007fa:	428a      	cmp	r2, r1
 80007fc:	d10b      	bne.n	8000816 <HAL_RCC_OscConfig+0xda>
 80007fe:	68ea      	ldr	r2, [r5, #12]
 8000800:	421a      	tst	r2, r3
 8000802:	d008      	beq.n	8000816 <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000804:	682b      	ldr	r3, [r5, #0]
 8000806:	039b      	lsls	r3, r3, #14
 8000808:	d59e      	bpl.n	8000748 <HAL_RCC_OscConfig+0xc>
 800080a:	6863      	ldr	r3, [r4, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d19b      	bne.n	8000748 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000810:	2001      	movs	r0, #1
}
 8000812:	b005      	add	sp, #20
 8000814:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000816:	6862      	ldr	r2, [r4, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	d112      	bne.n	8000842 <HAL_RCC_OscConfig+0x106>
 800081c:	682a      	ldr	r2, [r5, #0]
 800081e:	4313      	orrs	r3, r2
 8000820:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000822:	f7ff fe29 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000826:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000828:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082a:	02b6      	lsls	r6, r6, #10
 800082c:	682b      	ldr	r3, [r5, #0]
 800082e:	4233      	tst	r3, r6
 8000830:	d000      	beq.n	8000834 <HAL_RCC_OscConfig+0xf8>
 8000832:	e789      	b.n	8000748 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000834:	f7ff fe20 	bl	8000478 <HAL_GetTick>
 8000838:	1bc0      	subs	r0, r0, r7
 800083a:	2864      	cmp	r0, #100	; 0x64
 800083c:	d9f6      	bls.n	800082c <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 800083e:	2003      	movs	r0, #3
 8000840:	e7e7      	b.n	8000812 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000842:	21a0      	movs	r1, #160	; 0xa0
 8000844:	02c9      	lsls	r1, r1, #11
 8000846:	428a      	cmp	r2, r1
 8000848:	d105      	bne.n	8000856 <HAL_RCC_OscConfig+0x11a>
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	6829      	ldr	r1, [r5, #0]
 800084e:	02d2      	lsls	r2, r2, #11
 8000850:	430a      	orrs	r2, r1
 8000852:	602a      	str	r2, [r5, #0]
 8000854:	e7e2      	b.n	800081c <HAL_RCC_OscConfig+0xe0>
 8000856:	6829      	ldr	r1, [r5, #0]
 8000858:	4880      	ldr	r0, [pc, #512]	; (8000a5c <HAL_RCC_OscConfig+0x320>)
 800085a:	4001      	ands	r1, r0
 800085c:	6029      	str	r1, [r5, #0]
 800085e:	6829      	ldr	r1, [r5, #0]
 8000860:	400b      	ands	r3, r1
 8000862:	9303      	str	r3, [sp, #12]
 8000864:	9b03      	ldr	r3, [sp, #12]
 8000866:	497e      	ldr	r1, [pc, #504]	; (8000a60 <HAL_RCC_OscConfig+0x324>)
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	400b      	ands	r3, r1
 800086c:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800086e:	2a00      	cmp	r2, #0
 8000870:	d1d7      	bne.n	8000822 <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 8000872:	f7ff fe01 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000876:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000878:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800087a:	02b6      	lsls	r6, r6, #10
 800087c:	682b      	ldr	r3, [r5, #0]
 800087e:	4233      	tst	r3, r6
 8000880:	d100      	bne.n	8000884 <HAL_RCC_OscConfig+0x148>
 8000882:	e761      	b.n	8000748 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000884:	f7ff fdf8 	bl	8000478 <HAL_GetTick>
 8000888:	1bc0      	subs	r0, r0, r7
 800088a:	2864      	cmp	r0, #100	; 0x64
 800088c:	d9f6      	bls.n	800087c <HAL_RCC_OscConfig+0x140>
 800088e:	e7d6      	b.n	800083e <HAL_RCC_OscConfig+0x102>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000890:	210c      	movs	r1, #12
 8000892:	4d6e      	ldr	r5, [pc, #440]	; (8000a4c <HAL_RCC_OscConfig+0x310>)
 8000894:	68ea      	ldr	r2, [r5, #12]
 8000896:	400a      	ands	r2, r1
 8000898:	2a04      	cmp	r2, #4
 800089a:	d006      	beq.n	80008aa <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800089c:	68eb      	ldr	r3, [r5, #12]
 800089e:	400b      	ands	r3, r1
 80008a0:	428b      	cmp	r3, r1
 80008a2:	d110      	bne.n	80008c6 <HAL_RCC_OscConfig+0x18a>
 80008a4:	68eb      	ldr	r3, [r5, #12]
 80008a6:	03db      	lsls	r3, r3, #15
 80008a8:	d40d      	bmi.n	80008c6 <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	075b      	lsls	r3, r3, #29
 80008ae:	d502      	bpl.n	80008b6 <HAL_RCC_OscConfig+0x17a>
 80008b0:	68e3      	ldr	r3, [r4, #12]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d1ac      	bne.n	8000810 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008b6:	686a      	ldr	r2, [r5, #4]
 80008b8:	6923      	ldr	r3, [r4, #16]
 80008ba:	496a      	ldr	r1, [pc, #424]	; (8000a64 <HAL_RCC_OscConfig+0x328>)
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	400a      	ands	r2, r1
 80008c0:	4313      	orrs	r3, r2
 80008c2:	606b      	str	r3, [r5, #4]
 80008c4:	e744      	b.n	8000750 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008c6:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80008c8:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008ca:	2a00      	cmp	r2, #0
 80008cc:	d010      	beq.n	80008f0 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80008ce:	2109      	movs	r1, #9
 80008d0:	438b      	bics	r3, r1
 80008d2:	4313      	orrs	r3, r2
 80008d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008d6:	f7ff fdcf 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008da:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 80008dc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	4233      	tst	r3, r6
 80008e2:	d1e8      	bne.n	80008b6 <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008e4:	f7ff fdc8 	bl	8000478 <HAL_GetTick>
 80008e8:	1bc0      	subs	r0, r0, r7
 80008ea:	2802      	cmp	r0, #2
 80008ec:	d9f7      	bls.n	80008de <HAL_RCC_OscConfig+0x1a2>
 80008ee:	e7a6      	b.n	800083e <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI_DISABLE();
 80008f0:	2201      	movs	r2, #1
 80008f2:	4393      	bics	r3, r2
 80008f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008f6:	f7ff fdbf 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008fa:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 80008fc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008fe:	682b      	ldr	r3, [r5, #0]
 8000900:	4233      	tst	r3, r6
 8000902:	d100      	bne.n	8000906 <HAL_RCC_OscConfig+0x1ca>
 8000904:	e724      	b.n	8000750 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000906:	f7ff fdb7 	bl	8000478 <HAL_GetTick>
 800090a:	1bc0      	subs	r0, r0, r7
 800090c:	2802      	cmp	r0, #2
 800090e:	d9f6      	bls.n	80008fe <HAL_RCC_OscConfig+0x1c2>
 8000910:	e795      	b.n	800083e <HAL_RCC_OscConfig+0x102>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000912:	686b      	ldr	r3, [r5, #4]
 8000914:	4a4e      	ldr	r2, [pc, #312]	; (8000a50 <HAL_RCC_OscConfig+0x314>)
 8000916:	4013      	ands	r3, r2
 8000918:	4303      	orrs	r3, r0
 800091a:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800091c:	686a      	ldr	r2, [r5, #4]
 800091e:	6a23      	ldr	r3, [r4, #32]
 8000920:	0212      	lsls	r2, r2, #8
 8000922:	061b      	lsls	r3, r3, #24
 8000924:	0a12      	lsrs	r2, r2, #8
 8000926:	4313      	orrs	r3, r2
 8000928:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800092a:	f7ff fecd 	bl	80006c8 <RCC_SetFlashLatencyFromMSIRange>
 800092e:	2800      	cmp	r0, #0
 8000930:	d100      	bne.n	8000934 <HAL_RCC_OscConfig+0x1f8>
 8000932:	e735      	b.n	80007a0 <HAL_RCC_OscConfig+0x64>
 8000934:	e76c      	b.n	8000810 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000936:	69e3      	ldr	r3, [r4, #28]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d020      	beq.n	800097e <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	682a      	ldr	r2, [r5, #0]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4313      	orrs	r3, r2
 8000944:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000946:	f7ff fd97 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800094a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800094c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800094e:	00b6      	lsls	r6, r6, #2
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	4233      	tst	r3, r6
 8000954:	d00d      	beq.n	8000972 <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000956:	686b      	ldr	r3, [r5, #4]
 8000958:	4a3d      	ldr	r2, [pc, #244]	; (8000a50 <HAL_RCC_OscConfig+0x314>)
 800095a:	4013      	ands	r3, r2
 800095c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800095e:	4313      	orrs	r3, r2
 8000960:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000962:	686a      	ldr	r2, [r5, #4]
 8000964:	6a23      	ldr	r3, [r4, #32]
 8000966:	0212      	lsls	r2, r2, #8
 8000968:	061b      	lsls	r3, r3, #24
 800096a:	0a12      	lsrs	r2, r2, #8
 800096c:	4313      	orrs	r3, r2
 800096e:	606b      	str	r3, [r5, #4]
 8000970:	e727      	b.n	80007c2 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000972:	f7ff fd81 	bl	8000478 <HAL_GetTick>
 8000976:	1bc0      	subs	r0, r0, r7
 8000978:	2802      	cmp	r0, #2
 800097a:	d9e9      	bls.n	8000950 <HAL_RCC_OscConfig+0x214>
 800097c:	e75f      	b.n	800083e <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_DISABLE();
 800097e:	682b      	ldr	r3, [r5, #0]
 8000980:	4a39      	ldr	r2, [pc, #228]	; (8000a68 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000982:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 8000984:	4013      	ands	r3, r2
 8000986:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000988:	f7ff fd76 	bl	8000478 <HAL_GetTick>
 800098c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800098e:	00b6      	lsls	r6, r6, #2
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	4233      	tst	r3, r6
 8000994:	d100      	bne.n	8000998 <HAL_RCC_OscConfig+0x25c>
 8000996:	e714      	b.n	80007c2 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000998:	f7ff fd6e 	bl	8000478 <HAL_GetTick>
 800099c:	1bc0      	subs	r0, r0, r7
 800099e:	2802      	cmp	r0, #2
 80009a0:	d9f6      	bls.n	8000990 <HAL_RCC_OscConfig+0x254>
 80009a2:	e74c      	b.n	800083e <HAL_RCC_OscConfig+0x102>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009a4:	6962      	ldr	r2, [r4, #20]
 80009a6:	2301      	movs	r3, #1
 80009a8:	4d28      	ldr	r5, [pc, #160]	; (8000a4c <HAL_RCC_OscConfig+0x310>)
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d010      	beq.n	80009d0 <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 80009ae:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80009b2:	4313      	orrs	r3, r2
 80009b4:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80009b6:	f7ff fd5f 	bl	8000478 <HAL_GetTick>
 80009ba:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009bc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009be:	4233      	tst	r3, r6
 80009c0:	d000      	beq.n	80009c4 <HAL_RCC_OscConfig+0x288>
 80009c2:	e702      	b.n	80007ca <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c4:	f7ff fd58 	bl	8000478 <HAL_GetTick>
 80009c8:	1bc0      	subs	r0, r0, r7
 80009ca:	2802      	cmp	r0, #2
 80009cc:	d9f6      	bls.n	80009bc <HAL_RCC_OscConfig+0x280>
 80009ce:	e736      	b.n	800083e <HAL_RCC_OscConfig+0x102>
      __HAL_RCC_LSI_DISABLE();
 80009d0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d2:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80009d4:	439a      	bics	r2, r3
 80009d6:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80009d8:	f7ff fd4e 	bl	8000478 <HAL_GetTick>
 80009dc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009de:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009e0:	4233      	tst	r3, r6
 80009e2:	d100      	bne.n	80009e6 <HAL_RCC_OscConfig+0x2aa>
 80009e4:	e6f1      	b.n	80007ca <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e6:	f7ff fd47 	bl	8000478 <HAL_GetTick>
 80009ea:	1bc0      	subs	r0, r0, r7
 80009ec:	2802      	cmp	r0, #2
 80009ee:	d9f6      	bls.n	80009de <HAL_RCC_OscConfig+0x2a2>
 80009f0:	e725      	b.n	800083e <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80009f4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f6:	4d15      	ldr	r5, [pc, #84]	; (8000a4c <HAL_RCC_OscConfig+0x310>)
 80009f8:	055b      	lsls	r3, r3, #21
 80009fa:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80009fc:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009fe:	421a      	tst	r2, r3
 8000a00:	d104      	bne.n	8000a0c <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000a04:	4313      	orrs	r3, r2
 8000a06:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a0c:	2780      	movs	r7, #128	; 0x80
 8000a0e:	4e17      	ldr	r6, [pc, #92]	; (8000a6c <HAL_RCC_OscConfig+0x330>)
 8000a10:	007f      	lsls	r7, r7, #1
 8000a12:	6833      	ldr	r3, [r6, #0]
 8000a14:	423b      	tst	r3, r7
 8000a16:	d008      	beq.n	8000a2a <HAL_RCC_OscConfig+0x2ee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	68a3      	ldr	r3, [r4, #8]
 8000a1c:	0052      	lsls	r2, r2, #1
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d126      	bne.n	8000a70 <HAL_RCC_OscConfig+0x334>
 8000a22:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8000a24:	4313      	orrs	r3, r2
 8000a26:	652b      	str	r3, [r5, #80]	; 0x50
 8000a28:	e047      	b.n	8000aba <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a2a:	6833      	ldr	r3, [r6, #0]
 8000a2c:	433b      	orrs	r3, r7
 8000a2e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a30:	f7ff fd22 	bl	8000478 <HAL_GetTick>
 8000a34:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a36:	6833      	ldr	r3, [r6, #0]
 8000a38:	423b      	tst	r3, r7
 8000a3a:	d1ed      	bne.n	8000a18 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a3c:	f7ff fd1c 	bl	8000478 <HAL_GetTick>
 8000a40:	9b01      	ldr	r3, [sp, #4]
 8000a42:	1ac0      	subs	r0, r0, r3
 8000a44:	2864      	cmp	r0, #100	; 0x64
 8000a46:	d9f6      	bls.n	8000a36 <HAL_RCC_OscConfig+0x2fa>
 8000a48:	e6f9      	b.n	800083e <HAL_RCC_OscConfig+0x102>
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	ffff1fff 	.word	0xffff1fff
 8000a54:	08003d2e 	.word	0x08003d2e
 8000a58:	20000004 	.word	0x20000004
 8000a5c:	fffeffff 	.word	0xfffeffff
 8000a60:	fffbffff 	.word	0xfffbffff
 8000a64:	ffffe0ff 	.word	0xffffe0ff
 8000a68:	fffffeff 	.word	0xfffffeff
 8000a6c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d116      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x366>
 8000a74:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a76:	4a60      	ldr	r2, [pc, #384]	; (8000bf8 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a78:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	652b      	str	r3, [r5, #80]	; 0x50
 8000a7e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a80:	4a5e      	ldr	r2, [pc, #376]	; (8000bfc <HAL_RCC_OscConfig+0x4c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a82:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a84:	4013      	ands	r3, r2
 8000a86:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a88:	f7ff fcf6 	bl	8000478 <HAL_GetTick>
 8000a8c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a8e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a90:	423b      	tst	r3, r7
 8000a92:	d02a      	beq.n	8000aea <HAL_RCC_OscConfig+0x3ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a94:	f7ff fcf0 	bl	8000478 <HAL_GetTick>
 8000a98:	4b59      	ldr	r3, [pc, #356]	; (8000c00 <HAL_RCC_OscConfig+0x4c4>)
 8000a9a:	1b80      	subs	r0, r0, r6
 8000a9c:	4298      	cmp	r0, r3
 8000a9e:	d9f6      	bls.n	8000a8e <HAL_RCC_OscConfig+0x352>
 8000aa0:	e6cd      	b.n	800083e <HAL_RCC_OscConfig+0x102>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa2:	21a0      	movs	r1, #160	; 0xa0
 8000aa4:	00c9      	lsls	r1, r1, #3
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d10d      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x38a>
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	652b      	str	r3, [r5, #80]	; 0x50
 8000ab4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000aba:	f7ff fcdd 	bl	8000478 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000abe:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8000ac0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac2:	00bf      	lsls	r7, r7, #2
 8000ac4:	e00e      	b.n	8000ae4 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ac8:	4a4b      	ldr	r2, [pc, #300]	; (8000bf8 <HAL_RCC_OscConfig+0x4bc>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	652b      	str	r3, [r5, #80]	; 0x50
 8000ace:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ad0:	4a4a      	ldr	r2, [pc, #296]	; (8000bfc <HAL_RCC_OscConfig+0x4c0>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	e7a7      	b.n	8000a26 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad6:	f7ff fccf 	bl	8000478 <HAL_GetTick>
 8000ada:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <HAL_RCC_OscConfig+0x4c4>)
 8000adc:	1b80      	subs	r0, r0, r6
 8000ade:	4298      	cmp	r0, r3
 8000ae0:	d900      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x3a8>
 8000ae2:	e6ac      	b.n	800083e <HAL_RCC_OscConfig+0x102>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ae6:	423b      	tst	r3, r7
 8000ae8:	d0f5      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8000aea:	9b00      	ldr	r3, [sp, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d000      	beq.n	8000af2 <HAL_RCC_OscConfig+0x3b6>
 8000af0:	e66f      	b.n	80007d2 <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000af2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000af4:	4a43      	ldr	r2, [pc, #268]	; (8000c04 <HAL_RCC_OscConfig+0x4c8>)
 8000af6:	4013      	ands	r3, r2
 8000af8:	63ab      	str	r3, [r5, #56]	; 0x38
 8000afa:	e66a      	b.n	80007d2 <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000afc:	69a1      	ldr	r1, [r4, #24]
 8000afe:	2301      	movs	r3, #1
 8000b00:	4d41      	ldr	r5, [pc, #260]	; (8000c08 <HAL_RCC_OscConfig+0x4cc>)
 8000b02:	4a42      	ldr	r2, [pc, #264]	; (8000c0c <HAL_RCC_OscConfig+0x4d0>)
 8000b04:	2900      	cmp	r1, #0
 8000b06:	d018      	beq.n	8000b3a <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI48_ENABLE();
 8000b08:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b0a:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8000b0c:	4319      	orrs	r1, r3
 8000b0e:	60a9      	str	r1, [r5, #8]
 8000b10:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000b12:	430b      	orrs	r3, r1
 8000b14:	636b      	str	r3, [r5, #52]	; 0x34
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	6a11      	ldr	r1, [r2, #32]
 8000b1a:	019b      	lsls	r3, r3, #6
 8000b1c:	430b      	orrs	r3, r1
 8000b1e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b20:	f7ff fcaa 	bl	8000478 <HAL_GetTick>
 8000b24:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b26:	68ab      	ldr	r3, [r5, #8]
 8000b28:	4233      	tst	r3, r6
 8000b2a:	d000      	beq.n	8000b2e <HAL_RCC_OscConfig+0x3f2>
 8000b2c:	e655      	b.n	80007da <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b2e:	f7ff fca3 	bl	8000478 <HAL_GetTick>
 8000b32:	1bc0      	subs	r0, r0, r7
 8000b34:	2802      	cmp	r0, #2
 8000b36:	d9f6      	bls.n	8000b26 <HAL_RCC_OscConfig+0x3ea>
 8000b38:	e681      	b.n	800083e <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI48_DISABLE();
 8000b3a:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000b3c:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 8000b3e:	4399      	bics	r1, r3
 8000b40:	60a9      	str	r1, [r5, #8]
 8000b42:	6a13      	ldr	r3, [r2, #32]
 8000b44:	4932      	ldr	r1, [pc, #200]	; (8000c10 <HAL_RCC_OscConfig+0x4d4>)
 8000b46:	400b      	ands	r3, r1
 8000b48:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b4a:	f7ff fc95 	bl	8000478 <HAL_GetTick>
 8000b4e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000b50:	68ab      	ldr	r3, [r5, #8]
 8000b52:	4233      	tst	r3, r6
 8000b54:	d100      	bne.n	8000b58 <HAL_RCC_OscConfig+0x41c>
 8000b56:	e640      	b.n	80007da <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b58:	f7ff fc8e 	bl	8000478 <HAL_GetTick>
 8000b5c:	1bc0      	subs	r0, r0, r7
 8000b5e:	2802      	cmp	r0, #2
 8000b60:	d9f6      	bls.n	8000b50 <HAL_RCC_OscConfig+0x414>
 8000b62:	e66c      	b.n	800083e <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b64:	220c      	movs	r2, #12
 8000b66:	4d28      	ldr	r5, [pc, #160]	; (8000c08 <HAL_RCC_OscConfig+0x4cc>)
      return HAL_ERROR;
 8000b68:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b6a:	68eb      	ldr	r3, [r5, #12]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d100      	bne.n	8000b74 <HAL_RCC_OscConfig+0x438>
 8000b72:	e64e      	b.n	8000812 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	4a27      	ldr	r2, [pc, #156]	; (8000c14 <HAL_RCC_OscConfig+0x4d8>)
 8000b78:	4013      	ands	r3, r2
 8000b7a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b7c:	2902      	cmp	r1, #2
 8000b7e:	d12b      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x49c>
        tickstart = HAL_GetTick();
 8000b80:	f7ff fc7a 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b84:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b86:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b88:	04b6      	lsls	r6, r6, #18
 8000b8a:	682b      	ldr	r3, [r5, #0]
 8000b8c:	4233      	tst	r3, r6
 8000b8e:	d11d      	bne.n	8000bcc <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b90:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000b92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b94:	68ea      	ldr	r2, [r5, #12]
 8000b96:	430b      	orrs	r3, r1
 8000b98:	491f      	ldr	r1, [pc, #124]	; (8000c18 <HAL_RCC_OscConfig+0x4dc>)
 8000b9a:	400a      	ands	r2, r1
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ba0:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	682a      	ldr	r2, [r5, #0]
 8000baa:	045b      	lsls	r3, r3, #17
 8000bac:	4313      	orrs	r3, r2
 8000bae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fc62 	bl	8000478 <HAL_GetTick>
 8000bb4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bb6:	04a4      	lsls	r4, r4, #18
 8000bb8:	682b      	ldr	r3, [r5, #0]
 8000bba:	4223      	tst	r3, r4
 8000bbc:	d000      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x484>
 8000bbe:	e610      	b.n	80007e2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc0:	f7ff fc5a 	bl	8000478 <HAL_GetTick>
 8000bc4:	1b80      	subs	r0, r0, r6
 8000bc6:	2802      	cmp	r0, #2
 8000bc8:	d9f6      	bls.n	8000bb8 <HAL_RCC_OscConfig+0x47c>
 8000bca:	e638      	b.n	800083e <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bcc:	f7ff fc54 	bl	8000478 <HAL_GetTick>
 8000bd0:	1bc0      	subs	r0, r0, r7
 8000bd2:	2802      	cmp	r0, #2
 8000bd4:	d9d9      	bls.n	8000b8a <HAL_RCC_OscConfig+0x44e>
 8000bd6:	e632      	b.n	800083e <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fc4e 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bdc:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8000bde:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000be0:	04a4      	lsls	r4, r4, #18
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	4223      	tst	r3, r4
 8000be6:	d100      	bne.n	8000bea <HAL_RCC_OscConfig+0x4ae>
 8000be8:	e5fb      	b.n	80007e2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bea:	f7ff fc45 	bl	8000478 <HAL_GetTick>
 8000bee:	1b80      	subs	r0, r0, r6
 8000bf0:	2802      	cmp	r0, #2
 8000bf2:	d9f6      	bls.n	8000be2 <HAL_RCC_OscConfig+0x4a6>
 8000bf4:	e623      	b.n	800083e <HAL_RCC_OscConfig+0x102>
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	fffffeff 	.word	0xfffffeff
 8000bfc:	fffffbff 	.word	0xfffffbff
 8000c00:	00001388 	.word	0x00001388
 8000c04:	efffffff 	.word	0xefffffff
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	ffffdfff 	.word	0xffffdfff
 8000c14:	feffffff 	.word	0xfeffffff
 8000c18:	ff02ffff 	.word	0xff02ffff

08000c1c <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8000c1c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000c20:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000c22:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c24:	400a      	ands	r2, r1
 8000c26:	2a08      	cmp	r2, #8
 8000c28:	d026      	beq.n	8000c78 <HAL_RCC_GetSysClockFreq+0x5c>
 8000c2a:	2a0c      	cmp	r2, #12
 8000c2c:	d006      	beq.n	8000c3c <HAL_RCC_GetSysClockFreq+0x20>
 8000c2e:	2a04      	cmp	r2, #4
 8000c30:	d11a      	bne.n	8000c68 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	06db      	lsls	r3, r3, #27
 8000c36:	d421      	bmi.n	8000c7c <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 8000c38:	4812      	ldr	r0, [pc, #72]	; (8000c84 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000c3a:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000c3c:	028a      	lsls	r2, r1, #10
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000c40:	0f12      	lsrs	r2, r2, #28
 8000c42:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000c44:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c46:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000c48:	0f89      	lsrs	r1, r1, #30
 8000c4a:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c4c:	03c0      	lsls	r0, r0, #15
 8000c4e:	d504      	bpl.n	8000c5a <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000c50:	480e      	ldr	r0, [pc, #56]	; (8000c8c <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000c52:	4350      	muls	r0, r2
 8000c54:	f7ff fa62 	bl	800011c <__udivsi3>
 8000c58:	e7ef      	b.n	8000c3a <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	06db      	lsls	r3, r3, #27
 8000c5e:	d501      	bpl.n	8000c64 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <HAL_RCC_GetSysClockFreq+0x74>)
 8000c62:	e7f6      	b.n	8000c52 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <HAL_RCC_GetSysClockFreq+0x68>)
 8000c66:	e7f4      	b.n	8000c52 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000c68:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000c6a:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000c6c:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000c6e:	041b      	lsls	r3, r3, #16
 8000c70:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000c72:	3301      	adds	r3, #1
 8000c74:	4098      	lsls	r0, r3
 8000c76:	e7e0      	b.n	8000c3a <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <HAL_RCC_GetSysClockFreq+0x70>)
 8000c7a:	e7de      	b.n	8000c3a <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000c7e:	e7dc      	b.n	8000c3a <HAL_RCC_GetSysClockFreq+0x1e>
 8000c80:	40021000 	.word	0x40021000
 8000c84:	00f42400 	.word	0x00f42400
 8000c88:	08003d46 	.word	0x08003d46
 8000c8c:	007a1200 	.word	0x007a1200
 8000c90:	003d0900 	.word	0x003d0900

08000c94 <HAL_RCC_ClockConfig>:
{
 8000c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c96:	2201      	movs	r2, #1
 8000c98:	4c53      	ldr	r4, [pc, #332]	; (8000de8 <HAL_RCC_ClockConfig+0x154>)
{
 8000c9a:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c9c:	6823      	ldr	r3, [r4, #0]
{
 8000c9e:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d328      	bcc.n	8000cf8 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca6:	6832      	ldr	r2, [r6, #0]
 8000ca8:	0793      	lsls	r3, r2, #30
 8000caa:	d431      	bmi.n	8000d10 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cac:	07d3      	lsls	r3, r2, #31
 8000cae:	d437      	bmi.n	8000d20 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	6822      	ldr	r2, [r4, #0]
 8000cb4:	9901      	ldr	r1, [sp, #4]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	4291      	cmp	r1, r2
 8000cba:	d200      	bcs.n	8000cbe <HAL_RCC_ClockConfig+0x2a>
 8000cbc:	e085      	b.n	8000dca <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cbe:	6832      	ldr	r2, [r6, #0]
 8000cc0:	4c4a      	ldr	r4, [pc, #296]	; (8000dec <HAL_RCC_ClockConfig+0x158>)
 8000cc2:	0753      	lsls	r3, r2, #29
 8000cc4:	d500      	bpl.n	8000cc8 <HAL_RCC_ClockConfig+0x34>
 8000cc6:	e087      	b.n	8000dd8 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc8:	0713      	lsls	r3, r2, #28
 8000cca:	d506      	bpl.n	8000cda <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ccc:	68e2      	ldr	r2, [r4, #12]
 8000cce:	6933      	ldr	r3, [r6, #16]
 8000cd0:	4947      	ldr	r1, [pc, #284]	; (8000df0 <HAL_RCC_ClockConfig+0x15c>)
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000cda:	f7ff ff9f 	bl	8000c1c <HAL_RCC_GetSysClockFreq>
 8000cde:	68e3      	ldr	r3, [r4, #12]
 8000ce0:	4a44      	ldr	r2, [pc, #272]	; (8000df4 <HAL_RCC_ClockConfig+0x160>)
 8000ce2:	061b      	lsls	r3, r3, #24
 8000ce4:	0f1b      	lsrs	r3, r3, #28
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	40d8      	lsrs	r0, r3
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <HAL_RCC_ClockConfig+0x164>)
 8000cec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f001 ff5a 	bl	8002ba8 <HAL_InitTick>
  return HAL_OK;
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	e00a      	b.n	8000d0e <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cf8:	6823      	ldr	r3, [r4, #0]
 8000cfa:	9901      	ldr	r1, [sp, #4]
 8000cfc:	4393      	bics	r3, r2
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	4013      	ands	r3, r2
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d0cc      	beq.n	8000ca6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
}
 8000d0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d10:	20f0      	movs	r0, #240	; 0xf0
 8000d12:	4936      	ldr	r1, [pc, #216]	; (8000dec <HAL_RCC_ClockConfig+0x158>)
 8000d14:	68cb      	ldr	r3, [r1, #12]
 8000d16:	4383      	bics	r3, r0
 8000d18:	68b0      	ldr	r0, [r6, #8]
 8000d1a:	4303      	orrs	r3, r0
 8000d1c:	60cb      	str	r3, [r1, #12]
 8000d1e:	e7c5      	b.n	8000cac <HAL_RCC_ClockConfig+0x18>
 8000d20:	4d32      	ldr	r5, [pc, #200]	; (8000dec <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d22:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d24:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d26:	2a02      	cmp	r2, #2
 8000d28:	d119      	bne.n	8000d5e <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	039b      	lsls	r3, r3, #14
 8000d2c:	d5ee      	bpl.n	8000d0c <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d2e:	2103      	movs	r1, #3
 8000d30:	68eb      	ldr	r3, [r5, #12]
 8000d32:	438b      	bics	r3, r1
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000d38:	f7ff fb9e 	bl	8000478 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d3c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d3e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d119      	bne.n	8000d78 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d44:	220c      	movs	r2, #12
 8000d46:	68eb      	ldr	r3, [r5, #12]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d0b0      	beq.n	8000cb0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d4e:	f7ff fb93 	bl	8000478 <HAL_GetTick>
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <HAL_RCC_ClockConfig+0x168>)
 8000d54:	1bc0      	subs	r0, r0, r7
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d9f4      	bls.n	8000d44 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	e7d7      	b.n	8000d0e <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d5e:	2a03      	cmp	r2, #3
 8000d60:	d102      	bne.n	8000d68 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d62:	019b      	lsls	r3, r3, #6
 8000d64:	d4e3      	bmi.n	8000d2e <HAL_RCC_ClockConfig+0x9a>
 8000d66:	e7d1      	b.n	8000d0c <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d68:	2a01      	cmp	r2, #1
 8000d6a:	d102      	bne.n	8000d72 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	075b      	lsls	r3, r3, #29
 8000d6e:	d4de      	bmi.n	8000d2e <HAL_RCC_ClockConfig+0x9a>
 8000d70:	e7cc      	b.n	8000d0c <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000d72:	059b      	lsls	r3, r3, #22
 8000d74:	d4db      	bmi.n	8000d2e <HAL_RCC_ClockConfig+0x9a>
 8000d76:	e7c9      	b.n	8000d0c <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d10c      	bne.n	8000d96 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d7c:	220c      	movs	r2, #12
 8000d7e:	68eb      	ldr	r3, [r5, #12]
 8000d80:	4013      	ands	r3, r2
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d100      	bne.n	8000d88 <HAL_RCC_ClockConfig+0xf4>
 8000d86:	e793      	b.n	8000cb0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d88:	f7ff fb76 	bl	8000478 <HAL_GetTick>
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_RCC_ClockConfig+0x168>)
 8000d8e:	1bc0      	subs	r0, r0, r7
 8000d90:	4298      	cmp	r0, r3
 8000d92:	d9f3      	bls.n	8000d7c <HAL_RCC_ClockConfig+0xe8>
 8000d94:	e7e1      	b.n	8000d5a <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d011      	beq.n	8000dbe <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	68eb      	ldr	r3, [r5, #12]
 8000d9e:	4213      	tst	r3, r2
 8000da0:	d100      	bne.n	8000da4 <HAL_RCC_ClockConfig+0x110>
 8000da2:	e785      	b.n	8000cb0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da4:	f7ff fb68 	bl	8000478 <HAL_GetTick>
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_RCC_ClockConfig+0x168>)
 8000daa:	1bc0      	subs	r0, r0, r7
 8000dac:	4298      	cmp	r0, r3
 8000dae:	d9f4      	bls.n	8000d9a <HAL_RCC_ClockConfig+0x106>
 8000db0:	e7d3      	b.n	8000d5a <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db2:	f7ff fb61 	bl	8000478 <HAL_GetTick>
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_RCC_ClockConfig+0x168>)
 8000db8:	1bc0      	subs	r0, r0, r7
 8000dba:	4298      	cmp	r0, r3
 8000dbc:	d8cd      	bhi.n	8000d5a <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	68eb      	ldr	r3, [r5, #12]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d1f4      	bne.n	8000db2 <HAL_RCC_ClockConfig+0x11e>
 8000dc8:	e772      	b.n	8000cb0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dca:	6822      	ldr	r2, [r4, #0]
 8000dcc:	439a      	bics	r2, r3
 8000dce:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dd0:	6822      	ldr	r2, [r4, #0]
 8000dd2:	421a      	tst	r2, r3
 8000dd4:	d19a      	bne.n	8000d0c <HAL_RCC_ClockConfig+0x78>
 8000dd6:	e772      	b.n	8000cbe <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dd8:	68e3      	ldr	r3, [r4, #12]
 8000dda:	4909      	ldr	r1, [pc, #36]	; (8000e00 <HAL_RCC_ClockConfig+0x16c>)
 8000ddc:	400b      	ands	r3, r1
 8000dde:	68f1      	ldr	r1, [r6, #12]
 8000de0:	430b      	orrs	r3, r1
 8000de2:	60e3      	str	r3, [r4, #12]
 8000de4:	e770      	b.n	8000cc8 <HAL_RCC_ClockConfig+0x34>
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	40022000 	.word	0x40022000
 8000dec:	40021000 	.word	0x40021000
 8000df0:	ffffc7ff 	.word	0xffffc7ff
 8000df4:	08003d2e 	.word	0x08003d2e
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	00001388 	.word	0x00001388
 8000e00:	fffff8ff 	.word	0xfffff8ff

08000e04 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8000e04:	4b01      	ldr	r3, [pc, #4]	; (8000e0c <HAL_RCC_GetHCLKFreq+0x8>)
 8000e06:	6818      	ldr	r0, [r3, #0]
}
 8000e08:	4770      	bx	lr
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	055b      	lsls	r3, r3, #21
 8000e18:	0f5b      	lsrs	r3, r3, #29
 8000e1a:	5cd3      	ldrb	r3, [r2, r3]
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e1e:	6810      	ldr	r0, [r2, #0]
 8000e20:	40d8      	lsrs	r0, r3
}    
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	08003d3e 	.word	0x08003d3e
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	049b      	lsls	r3, r3, #18
 8000e38:	0f5b      	lsrs	r3, r3, #29
 8000e3a:	5cd3      	ldrb	r3, [r2, r3]
 8000e3c:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e3e:	6810      	ldr	r0, [r2, #0]
 8000e40:	40d8      	lsrs	r0, r3
} 
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000
 8000e48:	08003d3e 	.word	0x08003d3e
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e50:	230f      	movs	r3, #15
{
 8000e52:	b530      	push	{r4, r5, lr}
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e54:	2403      	movs	r4, #3
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000e56:	25e0      	movs	r5, #224	; 0xe0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e5a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e5c:	68d3      	ldr	r3, [r2, #12]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000e5e:	00ed      	lsls	r5, r5, #3
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e60:	4023      	ands	r3, r4
 8000e62:	6043      	str	r3, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000e64:	68d3      	ldr	r3, [r2, #12]
 8000e66:	34ed      	adds	r4, #237	; 0xed
 8000e68:	4023      	ands	r3, r4
 8000e6a:	6083      	str	r3, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000e6c:	68d4      	ldr	r4, [r2, #12]
 8000e6e:	402c      	ands	r4, r5
 8000e70:	60c4      	str	r4, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000e72:	68d3      	ldr	r3, [r2, #12]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000e74:	2201      	movs	r2, #1
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	402b      	ands	r3, r5
 8000e7a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_RCC_GetClockConfig+0x3c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4013      	ands	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
}
 8000e84:	bd30      	pop	{r4, r5, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e90:	2382      	movs	r3, #130	; 0x82
{
 8000e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8000e94:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e96:	011b      	lsls	r3, r3, #4
{
 8000e98:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8000e9a:	421a      	tst	r2, r3
 8000e9c:	d047      	beq.n	8000f2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ea0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea2:	4c5f      	ldr	r4, [pc, #380]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000ea4:	055b      	lsls	r3, r3, #21
 8000ea6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000ea8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eaa:	421a      	tst	r2, r3
 8000eac:	d104      	bne.n	8000eb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb8:	2780      	movs	r7, #128	; 0x80
 8000eba:	4e5a      	ldr	r6, [pc, #360]	; (8001024 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8000ebc:	007f      	lsls	r7, r7, #1
 8000ebe:	6833      	ldr	r3, [r6, #0]
 8000ec0:	423b      	tst	r3, r7
 8000ec2:	d06d      	beq.n	8000fa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ec4:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000ec6:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ec8:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	0392      	lsls	r2, r2, #14
 8000ece:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ed0:	4010      	ands	r0, r2
 8000ed2:	4283      	cmp	r3, r0
 8000ed4:	d103      	bne.n	8000ede <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8000ed6:	68a8      	ldr	r0, [r5, #8]
 8000ed8:	4002      	ands	r2, r0
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d009      	beq.n	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	000a      	movs	r2, r1
 8000ee2:	029b      	lsls	r3, r3, #10
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d103      	bne.n	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8000eea:	6823      	ldr	r3, [r4, #0]
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8000eec:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000eee:	039b      	lsls	r3, r3, #14
 8000ef0:	d466      	bmi.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000ef2:	22c0      	movs	r2, #192	; 0xc0
 8000ef4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ef6:	0292      	lsls	r2, r2, #10
 8000ef8:	4013      	ands	r3, r2
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000efa:	d162      	bne.n	8000fc2 <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000efc:	6869      	ldr	r1, [r5, #4]
 8000efe:	23c0      	movs	r3, #192	; 0xc0
 8000f00:	000a      	movs	r2, r1
 8000f02:	029b      	lsls	r3, r3, #10
 8000f04:	401a      	ands	r2, r3
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d107      	bne.n	8000f1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	4846      	ldr	r0, [pc, #280]	; (8001028 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8000f0e:	4003      	ands	r3, r0
 8000f10:	20c0      	movs	r0, #192	; 0xc0
 8000f12:	0380      	lsls	r0, r0, #14
 8000f14:	4001      	ands	r1, r0
 8000f16:	430b      	orrs	r3, r1
 8000f18:	6023      	str	r3, [r4, #0]
 8000f1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f1c:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f1e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f20:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d103      	bne.n	8000f2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f28:	4a40      	ldr	r2, [pc, #256]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f2e:	682b      	ldr	r3, [r5, #0]
 8000f30:	07da      	lsls	r2, r3, #31
 8000f32:	d506      	bpl.n	8000f42 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f34:	2003      	movs	r0, #3
 8000f36:	493a      	ldr	r1, [pc, #232]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f38:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f3a:	4382      	bics	r2, r0
 8000f3c:	68e8      	ldr	r0, [r5, #12]
 8000f3e:	4302      	orrs	r2, r0
 8000f40:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f42:	079a      	lsls	r2, r3, #30
 8000f44:	d506      	bpl.n	8000f54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f46:	200c      	movs	r0, #12
 8000f48:	4935      	ldr	r1, [pc, #212]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f4a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f4c:	4382      	bics	r2, r0
 8000f4e:	6928      	ldr	r0, [r5, #16]
 8000f50:	4302      	orrs	r2, r0
 8000f52:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000f54:	075a      	lsls	r2, r3, #29
 8000f56:	d506      	bpl.n	8000f66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000f58:	4931      	ldr	r1, [pc, #196]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f5a:	4835      	ldr	r0, [pc, #212]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000f5c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f5e:	4002      	ands	r2, r0
 8000f60:	6968      	ldr	r0, [r5, #20]
 8000f62:	4302      	orrs	r2, r0
 8000f64:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f66:	071a      	lsls	r2, r3, #28
 8000f68:	d506      	bpl.n	8000f78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f6a:	492d      	ldr	r1, [pc, #180]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f6c:	4831      	ldr	r0, [pc, #196]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8000f6e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f70:	4002      	ands	r2, r0
 8000f72:	69a8      	ldr	r0, [r5, #24]
 8000f74:	4302      	orrs	r2, r0
 8000f76:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000f78:	065a      	lsls	r2, r3, #25
 8000f7a:	d506      	bpl.n	8000f8a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000f7c:	4928      	ldr	r1, [pc, #160]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f7e:	482e      	ldr	r0, [pc, #184]	; (8001038 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f80:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f82:	4002      	ands	r2, r0
 8000f84:	6a28      	ldr	r0, [r5, #32]
 8000f86:	4302      	orrs	r2, r0
 8000f88:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8000f8a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000f8c:	061b      	lsls	r3, r3, #24
 8000f8e:	d517      	bpl.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8000f90:	4a23      	ldr	r2, [pc, #140]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f92:	492a      	ldr	r1, [pc, #168]	; (800103c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8000f94:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000f96:	400b      	ands	r3, r1
 8000f98:	69e9      	ldr	r1, [r5, #28]
 8000f9a:	430b      	orrs	r3, r1
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	e00f      	b.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fa0:	6833      	ldr	r3, [r6, #0]
 8000fa2:	433b      	orrs	r3, r7
 8000fa4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fa67 	bl	8000478 <HAL_GetTick>
 8000faa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fac:	6833      	ldr	r3, [r6, #0]
 8000fae:	423b      	tst	r3, r7
 8000fb0:	d188      	bne.n	8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb2:	f7ff fa61 	bl	8000478 <HAL_GetTick>
 8000fb6:	9b01      	ldr	r3, [sp, #4]
 8000fb8:	1ac0      	subs	r0, r0, r3
 8000fba:	2864      	cmp	r0, #100	; 0x64
 8000fbc:	d9f6      	bls.n	8000fac <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 8000fbe:	2003      	movs	r0, #3
}
 8000fc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000fc2:	4011      	ands	r1, r2
 8000fc4:	428b      	cmp	r3, r1
 8000fc6:	d002      	beq.n	8000fce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000fc8:	6829      	ldr	r1, [r5, #0]
 8000fca:	0689      	lsls	r1, r1, #26
 8000fcc:	d408      	bmi.n	8000fe0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8000fce:	68a9      	ldr	r1, [r5, #8]
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d100      	bne.n	8000fd8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8000fd6:	e791      	b.n	8000efc <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	051b      	lsls	r3, r3, #20
 8000fdc:	d400      	bmi.n	8000fe0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8000fde:	e78d      	b.n	8000efc <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fe0:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fe2:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fe4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000fe6:	0312      	lsls	r2, r2, #12
 8000fe8:	4302      	orrs	r2, r0
 8000fea:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fec:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ff0:	4814      	ldr	r0, [pc, #80]	; (8001044 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000ff2:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ff4:	4002      	ands	r2, r0
 8000ff6:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8000ff8:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8000ffa:	05cb      	lsls	r3, r1, #23
 8000ffc:	d400      	bmi.n	8001000 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8000ffe:	e77d      	b.n	8000efc <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8001000:	f7ff fa3a 	bl	8000478 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001004:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001006:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001008:	00bf      	lsls	r7, r7, #2
 800100a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800100c:	423b      	tst	r3, r7
 800100e:	d000      	beq.n	8001012 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001010:	e774      	b.n	8000efc <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f7ff fa31 	bl	8000478 <HAL_GetTick>
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001018:	1b80      	subs	r0, r0, r6
 800101a:	4298      	cmp	r0, r3
 800101c:	d9f5      	bls.n	800100a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800101e:	e7ce      	b.n	8000fbe <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001020:	40021000 	.word	0x40021000
 8001024:	40007000 	.word	0x40007000
 8001028:	ffcfffff 	.word	0xffcfffff
 800102c:	efffffff 	.word	0xefffffff
 8001030:	fffff3ff 	.word	0xfffff3ff
 8001034:	ffffcfff 	.word	0xffffcfff
 8001038:	fbffffff 	.word	0xfbffffff
 800103c:	fff3ffff 	.word	0xfff3ffff
 8001040:	fffcffff 	.word	0xfffcffff
 8001044:	fff7ffff 	.word	0xfff7ffff
 8001048:	00001388 	.word	0x00001388

0800104c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800104c:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800104e:	2808      	cmp	r0, #8
 8001050:	d100      	bne.n	8001054 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 8001052:	e0b5      	b.n	80011c0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8001054:	d810      	bhi.n	8001078 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8001056:	2802      	cmp	r0, #2
 8001058:	d100      	bne.n	800105c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800105a:	e087      	b.n	800116c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800105c:	2804      	cmp	r0, #4
 800105e:	d100      	bne.n	8001062 <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 8001060:	e094      	b.n	800118c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8001062:	2801      	cmp	r0, #1
 8001064:	d10e      	bne.n	8001084 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
#endif /* USB */
#if defined(RCC_CCIPR_USART1SEL)
  case RCC_PERIPHCLK_USART1:
    {
      /* Get the current USART1 source */
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8001066:	2103      	movs	r1, #3
 8001068:	4a62      	ldr	r2, [pc, #392]	; (80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800106a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800106c:	400b      	ands	r3, r1

      /* Check if USART1 clock selection is PCLK2 */
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800106e:	d000      	beq.n	8001072 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8001070:	e06b      	b.n	800114a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
      {
        frequency = HAL_RCC_GetPCLK2Freq();
 8001072:	f7ff fedd 	bl	8000e30 <HAL_RCC_GetPCLK2Freq>
 8001076:	e024      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
  switch (PeriphClk)
 8001078:	2820      	cmp	r0, #32
 800107a:	d00b      	beq.n	8001094 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 800107c:	d804      	bhi.n	8001088 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800107e:	2810      	cmp	r0, #16
 8001080:	d100      	bne.n	8001084 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001082:	e0ad      	b.n	80011e0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8001084:	2000      	movs	r0, #0
 8001086:	e01c      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
  switch (PeriphClk)
 8001088:	2840      	cmp	r0, #64	; 0x40
 800108a:	d036      	beq.n	80010fa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4298      	cmp	r0, r3
 8001092:	d1f7      	bne.n	8001084 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8001094:	25c0      	movs	r5, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8001096:	2080      	movs	r0, #128	; 0x80
      temp_reg = RCC->CSR;
 8001098:	4956      	ldr	r1, [pc, #344]	; (80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800109a:	02ad      	lsls	r5, r5, #10
      temp_reg = RCC->CSR;
 800109c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800109e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010a0:	0240      	lsls	r0, r0, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010a2:	402a      	ands	r2, r5
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010a4:	4282      	cmp	r2, r0
 80010a6:	d103      	bne.n	80010b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80010a8:	0598      	lsls	r0, r3, #22
        frequency = LSE_VALUE;
 80010aa:	0fc0      	lsrs	r0, r0, #31
 80010ac:	03c0      	lsls	r0, r0, #15
 80010ae:	e008      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80010b0:	2480      	movs	r4, #128	; 0x80
 80010b2:	02a4      	lsls	r4, r4, #10
 80010b4:	42a2      	cmp	r2, r4
 80010b6:	d105      	bne.n	80010c4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80010b8:	2002      	movs	r0, #2
 80010ba:	4003      	ands	r3, r0
            frequency = 0U;
 80010bc:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80010be:	d000      	beq.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSI_VALUE;
 80010c0:	484d      	ldr	r0, [pc, #308]	; (80011f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
    {
      break;
    }
  }
  return(frequency);
}
 80010c2:	bd70      	pop	{r4, r5, r6, pc}
            frequency = 0U;
 80010c4:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80010c6:	42aa      	cmp	r2, r5
 80010c8:	d1fb      	bne.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80010ca:	680b      	ldr	r3, [r1, #0]
 80010cc:	4223      	tst	r3, r4
 80010ce:	d0f8      	beq.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 80010d0:	22c0      	movs	r2, #192	; 0xc0
 80010d2:	680b      	ldr	r3, [r1, #0]
        switch (clkprediv)
 80010d4:	2180      	movs	r1, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 80010d6:	0392      	lsls	r2, r2, #14
 80010d8:	4013      	ands	r3, r2
        switch (clkprediv)
 80010da:	0389      	lsls	r1, r1, #14
 80010dc:	428b      	cmp	r3, r1
 80010de:	d008      	beq.n	80010f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d100      	bne.n	80010e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80010e4:	e084      	b.n	80011f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	0352      	lsls	r2, r2, #13
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d103      	bne.n	80010f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            frequency = HSE_VALUE / 4U;
 80010ee:	4843      	ldr	r0, [pc, #268]	; (80011fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
            break;
 80010f0:	e7e7      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            frequency = HSE_VALUE / 8U;
 80010f2:	4843      	ldr	r0, [pc, #268]	; (8001200 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80010f4:	e7e5      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            frequency = HSE_VALUE / 2U;
 80010f6:	4843      	ldr	r0, [pc, #268]	; (8001204 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
            break;
 80010f8:	e7e3      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80010fa:	2080      	movs	r0, #128	; 0x80
 80010fc:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80010fe:	04c0      	lsls	r0, r0, #19
 8001100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001102:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8001104:	d11a      	bne.n	800113c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	0192      	lsls	r2, r2, #6
 800110a:	d5da      	bpl.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800110c:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 800110e:	483e      	ldr	r0, [pc, #248]	; (8001208 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001110:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8001112:	0292      	lsls	r2, r2, #10
 8001114:	0f12      	lsrs	r2, r2, #28
 8001116:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8001118:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 800111a:	68da      	ldr	r2, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800111c:	0f89      	lsrs	r1, r1, #30
 800111e:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8001120:	03d2      	lsls	r2, r2, #15
 8001122:	d407      	bmi.n	8001134 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	06db      	lsls	r3, r3, #27
 8001128:	d406      	bmi.n	8001138 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
                    pllvco =  HSI_VALUE;
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
            pllvco = (pllvco * pllmul);
 800112c:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 800112e:	f7fe fff5 	bl	800011c <__udivsi3>
 8001132:	e7c6      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
                pllvco = HSE_VALUE;
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8001136:	e7f9      	b.n	800112c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
                    pllvco =  (HSI_VALUE >> 2U);
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800113a:	e7f7      	b.n	800112c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 800113c:	2202      	movs	r2, #2
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4013      	ands	r3, r2
            frequency = 0U;
 8001142:	1e18      	subs	r0, r3, #0
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8001144:	d0bd      	beq.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            frequency = HSI48_VALUE;
 8001146:	4833      	ldr	r0, [pc, #204]	; (8001214 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8001148:	e7bb      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800114a:	2b02      	cmp	r3, #2
 800114c:	d103      	bne.n	8001156 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800114e:	6813      	ldr	r3, [r2, #0]
 8001150:	2204      	movs	r2, #4
 8001152:	4013      	ands	r3, r2
 8001154:	e026      	b.n	80011a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8001156:	2b01      	cmp	r3, #1
 8001158:	d102      	bne.n	8001160 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        frequency = HAL_RCC_GetSysClockFreq();
 800115a:	f7ff fd5f 	bl	8000c1c <HAL_RCC_GetSysClockFreq>
 800115e:	e7b0      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            frequency = 0U;
 8001160:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8001162:	2b03      	cmp	r3, #3
 8001164:	d1ad      	bne.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8001166:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8001168:	0580      	lsls	r0, r0, #22
 800116a:	e79e      	b.n	80010aa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800116c:	210c      	movs	r1, #12
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8001170:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001172:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8001174:	d102      	bne.n	800117c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = HAL_RCC_GetPCLK1Freq();
 8001176:	f7ff fe4b 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 800117a:	e7a2      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800117c:	2b08      	cmp	r3, #8
 800117e:	d0e6      	beq.n	800114e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8001180:	2b04      	cmp	r3, #4
 8001182:	d0ea      	beq.n	800115a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
            frequency = 0U;
 8001184:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8001186:	2b0c      	cmp	r3, #12
 8001188:	d19b      	bne.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800118a:	e7ec      	b.n	8001166 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800118c:	21c0      	movs	r1, #192	; 0xc0
 800118e:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8001190:	0109      	lsls	r1, r1, #4
 8001192:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001194:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8001196:	d0ee      	beq.n	8001176 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001198:	2480      	movs	r4, #128	; 0x80
 800119a:	0124      	lsls	r4, r4, #4
 800119c:	42a3      	cmp	r3, r4
 800119e:	d106      	bne.n	80011ae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80011a0:	6813      	ldr	r3, [r2, #0]
 80011a2:	4003      	ands	r3, r0
            frequency = 0U;
 80011a4:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011a6:	d100      	bne.n	80011aa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80011a8:	e78b      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = HSI_VALUE;
 80011aa:	4818      	ldr	r0, [pc, #96]	; (800120c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80011ac:	e789      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80011ae:	2080      	movs	r0, #128	; 0x80
 80011b0:	00c0      	lsls	r0, r0, #3
 80011b2:	4283      	cmp	r3, r0
 80011b4:	d0d1      	beq.n	800115a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
            frequency = 0U;
 80011b6:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80011b8:	428b      	cmp	r3, r1
 80011ba:	d000      	beq.n	80011be <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80011bc:	e781      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80011be:	e7d2      	b.n	8001166 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80011c0:	21c0      	movs	r1, #192	; 0xc0
 80011c2:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80011c4:	0189      	lsls	r1, r1, #6
 80011c6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80011c8:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80011ca:	d0d4      	beq.n	8001176 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	0189      	lsls	r1, r1, #6
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d0bc      	beq.n	800114e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	0152      	lsls	r2, r2, #5
 80011d8:	4293      	cmp	r3, r2
 80011da:	d000      	beq.n	80011de <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 80011dc:	e752      	b.n	8001084 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80011de:	e7bc      	b.n	800115a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80011e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	03db      	lsls	r3, r3, #15
 80011e8:	4018      	ands	r0, r3
 80011ea:	d100      	bne.n	80011ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80011ec:	e769      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80011ee:	e7c2      	b.n	8001176 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = HSE_VALUE / 16U;
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80011f2:	e766      	b.n	80010c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80011f4:	40021000 	.word	0x40021000
 80011f8:	00009088 	.word	0x00009088
 80011fc:	001e8480 	.word	0x001e8480
 8001200:	000f4240 	.word	0x000f4240
 8001204:	003d0900 	.word	0x003d0900
 8001208:	08003d46 	.word	0x08003d46
 800120c:	00f42400 	.word	0x00f42400
 8001210:	007a1200 	.word	0x007a1200
 8001214:	02dc6c00 	.word	0x02dc6c00
 8001218:	0007a120 	.word	0x0007a120

0800121c <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 800121c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800121e:	001d      	movs	r5, r3
 8001220:	0004      	movs	r4, r0
 8001222:	000e      	movs	r6, r1
 8001224:	9201      	str	r2, [sp, #4]
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001226:	f7ff f927 	bl	8000478 <HAL_GetTick>

  /* Wait until flag is set */
  if(Status == RESET)
 800122a:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800122c:	0007      	movs	r7, r0
  if(Status == RESET)
 800122e:	2b00      	cmp	r3, #0
 8001230:	d035      	beq.n	800129e <SPI_WaitOnFlagUntilTimeout+0x82>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	6893      	ldr	r3, [r2, #8]
 8001236:	4033      	ands	r3, r6
 8001238:	429e      	cmp	r6, r3
 800123a:	d135      	bne.n	80012a8 <SPI_WaitOnFlagUntilTimeout+0x8c>
    {
      if(Timeout != HAL_MAX_DELAY)
 800123c:	1c6b      	adds	r3, r5, #1
 800123e:	d0f9      	beq.n	8001234 <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001240:	2d00      	cmp	r5, #0
 8001242:	d009      	beq.n	8001258 <SPI_WaitOnFlagUntilTimeout+0x3c>
 8001244:	f7ff f918 	bl	8000478 <HAL_GetTick>
 8001248:	1bc0      	subs	r0, r0, r7
 800124a:	4285      	cmp	r5, r0
 800124c:	d2f1      	bcs.n	8001232 <SPI_WaitOnFlagUntilTimeout+0x16>
 800124e:	e003      	b.n	8001258 <SPI_WaitOnFlagUntilTimeout+0x3c>
      if(Timeout != HAL_MAX_DELAY)
 8001250:	1c6b      	adds	r3, r5, #1
 8001252:	d025      	beq.n	80012a0 <SPI_WaitOnFlagUntilTimeout+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001254:	2d00      	cmp	r5, #0
 8001256:	d11d      	bne.n	8001294 <SPI_WaitOnFlagUntilTimeout+0x78>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001258:	21e0      	movs	r1, #224	; 0xe0
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	438a      	bics	r2, r1
 8001260:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	39a0      	subs	r1, #160	; 0xa0
 8001266:	438a      	bics	r2, r1

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001268:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 800126a:	601a      	str	r2, [r3, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800126c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800126e:	0189      	lsls	r1, r1, #6
 8001270:	428a      	cmp	r2, r1
 8001272:	d106      	bne.n	8001282 <SPI_WaitOnFlagUntilTimeout+0x66>
          {
            SPI_RESET_CRC(hspi);
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <SPI_WaitOnFlagUntilTimeout+0x90>)
 8001278:	4001      	ands	r1, r0
 800127a:	6019      	str	r1, [r3, #0]
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8001282:	0023      	movs	r3, r4
 8001284:	2201      	movs	r2, #1
 8001286:	3351      	adds	r3, #81	; 0x51
 8001288:	701a      	strb	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800128a:	2300      	movs	r3, #0
 800128c:	3450      	adds	r4, #80	; 0x50
 800128e:	7023      	strb	r3, [r4, #0]

          return HAL_TIMEOUT;
 8001290:	2003      	movs	r0, #3
 8001292:	e00a      	b.n	80012aa <SPI_WaitOnFlagUntilTimeout+0x8e>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001294:	f7ff f8f0 	bl	8000478 <HAL_GetTick>
 8001298:	1bc0      	subs	r0, r0, r7
 800129a:	4285      	cmp	r5, r0
 800129c:	d3dc      	bcc.n	8001258 <SPI_WaitOnFlagUntilTimeout+0x3c>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800129e:	6822      	ldr	r2, [r4, #0]
 80012a0:	6893      	ldr	r3, [r2, #8]
 80012a2:	4033      	ands	r3, r6
 80012a4:	429e      	cmp	r6, r3
 80012a6:	d1d3      	bne.n	8001250 <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 80012a8:	2000      	movs	r0, #0
}
 80012aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80012ac:	ffffdfff 	.word	0xffffdfff

080012b0 <HAL_SPI_Init>:
{
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80012b4:	2001      	movs	r0, #1
  if(hspi == NULL)
 80012b6:	2c00      	cmp	r4, #0
 80012b8:	d037      	beq.n	800132a <HAL_SPI_Init+0x7a>
  if(hspi->State == HAL_SPI_STATE_RESET)
 80012ba:	0025      	movs	r5, r4
 80012bc:	3551      	adds	r5, #81	; 0x51
 80012be:	782b      	ldrb	r3, [r5, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <HAL_SPI_Init+0x22>
    hspi->Lock = HAL_UNLOCKED;
 80012c6:	0022      	movs	r2, r4
 80012c8:	3250      	adds	r2, #80	; 0x50
 80012ca:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 80012cc:	0020      	movs	r0, r4
 80012ce:	f001 fc2b 	bl	8002b28 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80012d2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80012d4:	2240      	movs	r2, #64	; 0x40
 80012d6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80012d8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80012da:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80012dc:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80012de:	4393      	bics	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80012e2:	6863      	ldr	r3, [r4, #4]
 80012e4:	69a2      	ldr	r2, [r4, #24]
 80012e6:	4303      	orrs	r3, r0
 80012e8:	68e0      	ldr	r0, [r4, #12]
 80012ea:	4303      	orrs	r3, r0
 80012ec:	6920      	ldr	r0, [r4, #16]
 80012ee:	4303      	orrs	r3, r0
 80012f0:	6960      	ldr	r0, [r4, #20]
 80012f2:	4303      	orrs	r3, r0
 80012f4:	69e0      	ldr	r0, [r4, #28]
 80012f6:	4303      	orrs	r3, r0
 80012f8:	6a20      	ldr	r0, [r4, #32]
 80012fa:	4303      	orrs	r3, r0
 80012fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80012fe:	4303      	orrs	r3, r0
 8001300:	2080      	movs	r0, #128	; 0x80
 8001302:	0080      	lsls	r0, r0, #2
 8001304:	4010      	ands	r0, r2
 8001306:	4303      	orrs	r3, r0
 8001308:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800130a:	2304      	movs	r3, #4
 800130c:	0c12      	lsrs	r2, r2, #16
 800130e:	401a      	ands	r2, r3
 8001310:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001312:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001314:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001318:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800131a:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800131c:	69cb      	ldr	r3, [r1, #28]
 800131e:	4a03      	ldr	r2, [pc, #12]	; (800132c <HAL_SPI_Init+0x7c>)
 8001320:	4013      	ands	r3, r2
 8001322:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001324:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001326:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001328:	702b      	strb	r3, [r5, #0]
}
 800132a:	bd70      	pop	{r4, r5, r6, pc}
 800132c:	fffff7ff 	.word	0xfffff7ff

08001330 <HAL_SPI_TransmitReceive>:
{
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	0004      	movs	r4, r0
  __IO uint16_t tmpreg = 0U;
 8001336:	a802      	add	r0, sp, #8
 8001338:	3006      	adds	r0, #6
 800133a:	9001      	str	r0, [sp, #4]
 800133c:	2000      	movs	r0, #0
 800133e:	9d01      	ldr	r5, [sp, #4]
 8001340:	8028      	strh	r0, [r5, #0]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8001342:	0025      	movs	r5, r4
 8001344:	3551      	adds	r5, #81	; 0x51
 8001346:	7828      	ldrb	r0, [r5, #0]
 8001348:	2801      	cmp	r0, #1
 800134a:	d004      	beq.n	8001356 <HAL_SPI_TransmitReceive+0x26>
 800134c:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 800134e:	2002      	movs	r0, #2
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8001350:	2e22      	cmp	r6, #34	; 0x22
 8001352:	d000      	beq.n	8001356 <HAL_SPI_TransmitReceive+0x26>
 8001354:	e083      	b.n	800145e <HAL_SPI_TransmitReceive+0x12e>
      return  HAL_ERROR;
 8001356:	2001      	movs	r0, #1
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8001358:	2900      	cmp	r1, #0
 800135a:	d100      	bne.n	800135e <HAL_SPI_TransmitReceive+0x2e>
 800135c:	e07f      	b.n	800145e <HAL_SPI_TransmitReceive+0x12e>
 800135e:	2a00      	cmp	r2, #0
 8001360:	d100      	bne.n	8001364 <HAL_SPI_TransmitReceive+0x34>
 8001362:	e07c      	b.n	800145e <HAL_SPI_TransmitReceive+0x12e>
 8001364:	2b00      	cmp	r3, #0
 8001366:	d07a      	beq.n	800145e <HAL_SPI_TransmitReceive+0x12e>
    __HAL_LOCK(hspi);
 8001368:	0026      	movs	r6, r4
 800136a:	3650      	adds	r6, #80	; 0x50
 800136c:	7830      	ldrb	r0, [r6, #0]
 800136e:	4684      	mov	ip, r0
 8001370:	4667      	mov	r7, ip
    return HAL_BUSY;
 8001372:	2002      	movs	r0, #2
    __HAL_LOCK(hspi);
 8001374:	2f01      	cmp	r7, #1
 8001376:	d072      	beq.n	800145e <HAL_SPI_TransmitReceive+0x12e>
 8001378:	3801      	subs	r0, #1
 800137a:	7030      	strb	r0, [r6, #0]
    if(hspi->State == HAL_SPI_STATE_READY)
 800137c:	7828      	ldrb	r0, [r5, #0]
 800137e:	2801      	cmp	r0, #1
 8001380:	d101      	bne.n	8001386 <HAL_SPI_TransmitReceive+0x56>
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001382:	3031      	adds	r0, #49	; 0x31
 8001384:	7028      	strb	r0, [r5, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001386:	2000      	movs	r0, #0
    hspi->RxXferSize  = Size;
 8001388:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800138a:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->TxXferSize  = Size; 
 800138c:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->RxXferCount = Size;  
 800138e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->TxXferCount = Size;
 8001390:	86e3      	strh	r3, [r4, #54]	; 0x36
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001392:	2380      	movs	r3, #128	; 0x80
    hspi->RxISR = 0U;
 8001394:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 8001396:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001398:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hspi->pRxBuffPtr  = pRxData;
 800139a:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->pTxBuffPtr  = pTxData;
 800139c:	6321      	str	r1, [r4, #48]	; 0x30
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800139e:	019b      	lsls	r3, r3, #6
 80013a0:	4298      	cmp	r0, r3
 80013a2:	d107      	bne.n	80013b4 <HAL_SPI_TransmitReceive+0x84>
      SPI_RESET_CRC(hspi);
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	4f9d      	ldr	r7, [pc, #628]	; (800161c <HAL_SPI_TransmitReceive+0x2ec>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	403a      	ands	r2, r7
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4302      	orrs	r2, r0
 80013b2:	601a      	str	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4694      	mov	ip, r2
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	4667      	mov	r7, ip
 80013be:	4217      	tst	r7, r2
 80013c0:	d102      	bne.n	80013c8 <HAL_SPI_TransmitReceive+0x98>
      __HAL_SPI_ENABLE(hspi);
 80013c2:	681f      	ldr	r7, [r3, #0]
 80013c4:	433a      	orrs	r2, r7
 80013c6:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	4694      	mov	ip, r2
 80013ce:	68e7      	ldr	r7, [r4, #12]
 80013d0:	6862      	ldr	r2, [r4, #4]
 80013d2:	4567      	cmp	r7, ip
 80013d4:	d000      	beq.n	80013d8 <HAL_SPI_TransmitReceive+0xa8>
 80013d6:	e07e      	b.n	80014d6 <HAL_SPI_TransmitReceive+0x1a6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80013d8:	2a00      	cmp	r2, #0
 80013da:	d006      	beq.n	80013ea <HAL_SPI_TransmitReceive+0xba>
 80013dc:	2782      	movs	r7, #130	; 0x82
 80013de:	007f      	lsls	r7, r7, #1
 80013e0:	42ba      	cmp	r2, r7
 80013e2:	d10a      	bne.n	80013fa <HAL_SPI_TransmitReceive+0xca>
 80013e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80013e6:	2a01      	cmp	r2, #1
 80013e8:	d107      	bne.n	80013fa <HAL_SPI_TransmitReceive+0xca>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80013ea:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr+=2U;
 80013ec:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80013ee:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80013f0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr+=2U;
 80013f2:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80013f4:	3a01      	subs	r2, #1
 80013f6:	b292      	uxth	r2, r2
 80013f8:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 80013fa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d162      	bne.n	80014c6 <HAL_SPI_TransmitReceive+0x196>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	0192      	lsls	r2, r2, #6
 8001404:	4290      	cmp	r0, r2
 8001406:	d104      	bne.n	8001412 <HAL_SPI_TransmitReceive+0xe2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	6819      	ldr	r1, [r3, #0]
 800140c:	0152      	lsls	r2, r2, #5
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001412:	2200      	movs	r2, #0
 8001414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001416:	2101      	movs	r1, #1
 8001418:	0020      	movs	r0, r4
 800141a:	f7ff feff 	bl	800121c <SPI_WaitOnFlagUntilTimeout>
 800141e:	2800      	cmp	r0, #0
 8001420:	d11c      	bne.n	800145c <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001426:	68d2      	ldr	r2, [r2, #12]
 8001428:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 800142a:	3302      	adds	r3, #2
 800142c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 800142e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001430:	3b01      	subs	r3, #1
 8001432:	b29b      	uxth	r3, r3
 8001434:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800143a:	019b      	lsls	r3, r3, #6
 800143c:	429a      	cmp	r2, r3
 800143e:	d000      	beq.n	8001442 <HAL_SPI_TransmitReceive+0x112>
 8001440:	e0c4      	b.n	80015cc <HAL_SPI_TransmitReceive+0x29c>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001444:	2200      	movs	r2, #0
 8001446:	2101      	movs	r1, #1
 8001448:	0020      	movs	r0, r4
 800144a:	f7ff fee7 	bl	800121c <SPI_WaitOnFlagUntilTimeout>
 800144e:	2800      	cmp	r0, #0
 8001450:	d100      	bne.n	8001454 <HAL_SPI_TransmitReceive+0x124>
 8001452:	e0b4      	b.n	80015be <HAL_SPI_TransmitReceive+0x28e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001454:	2302      	movs	r3, #2
 8001456:	6d62      	ldr	r2, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001458:	4313      	orrs	r3, r2
 800145a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800145c:	2003      	movs	r0, #3
}
 800145e:	b005      	add	sp, #20
 8001460:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001464:	2200      	movs	r2, #0
 8001466:	2102      	movs	r1, #2
 8001468:	0020      	movs	r0, r4
 800146a:	f7ff fed7 	bl	800121c <SPI_WaitOnFlagUntilTimeout>
 800146e:	2800      	cmp	r0, #0
 8001470:	d1f4      	bne.n	800145c <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001472:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001474:	6822      	ldr	r2, [r4, #0]
 8001476:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr+=2U;
 8001478:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800147a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2U;
 800147c:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 800147e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001480:	3b01      	subs	r3, #1
 8001482:	b29b      	uxth	r3, r3
 8001484:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001486:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10a      	bne.n	80014a2 <HAL_SPI_TransmitReceive+0x172>
 800148c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800148e:	0019      	movs	r1, r3
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	019b      	lsls	r3, r3, #6
 8001494:	4299      	cmp	r1, r3
 8001496:	d104      	bne.n	80014a2 <HAL_SPI_TransmitReceive+0x172>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	0149      	lsls	r1, r1, #5
 800149e:	430b      	orrs	r3, r1
 80014a0:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80014a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014a4:	2200      	movs	r2, #0
 80014a6:	2101      	movs	r1, #1
 80014a8:	0020      	movs	r0, r4
 80014aa:	f7ff feb7 	bl	800121c <SPI_WaitOnFlagUntilTimeout>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d1d4      	bne.n	800145c <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80014b2:	6822      	ldr	r2, [r4, #0]
 80014b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014b6:	68d2      	ldr	r2, [r2, #12]
 80014b8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 80014ba:	3302      	adds	r3, #2
 80014bc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 80014be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 80014c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1ca      	bne.n	8001462 <HAL_SPI_TransmitReceive+0x132>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80014cc:	6862      	ldr	r2, [r4, #4]
 80014ce:	2a00      	cmp	r2, #0
 80014d0:	d1b1      	bne.n	8001436 <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80014d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014d4:	e79f      	b.n	8001416 <HAL_SPI_TransmitReceive+0xe6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	d006      	beq.n	80014e8 <HAL_SPI_TransmitReceive+0x1b8>
 80014da:	2782      	movs	r7, #130	; 0x82
 80014dc:	007f      	lsls	r7, r7, #1
 80014de:	42ba      	cmp	r2, r7
 80014e0:	d10a      	bne.n	80014f8 <HAL_SPI_TransmitReceive+0x1c8>
 80014e2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80014e4:	2a01      	cmp	r2, #1
 80014e6:	d107      	bne.n	80014f8 <HAL_SPI_TransmitReceive+0x1c8>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80014e8:	1c4a      	adds	r2, r1, #1
 80014ea:	6322      	str	r2, [r4, #48]	; 0x30
 80014ec:	780a      	ldrb	r2, [r1, #0]
 80014ee:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80014f0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80014f2:	3a01      	subs	r2, #1
 80014f4:	b292      	uxth	r2, r2
 80014f6:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 80014f8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d149      	bne.n	8001592 <HAL_SPI_TransmitReceive+0x262>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	0192      	lsls	r2, r2, #6
 8001502:	4290      	cmp	r0, r2
 8001504:	d104      	bne.n	8001510 <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	0152      	lsls	r2, r2, #5
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	2101      	movs	r1, #1
 8001516:	0020      	movs	r0, r4
 8001518:	f7ff fe80 	bl	800121c <SPI_WaitOnFlagUntilTimeout>
 800151c:	2800      	cmp	r0, #0
 800151e:	d19d      	bne.n	800145c <HAL_SPI_TransmitReceive+0x12c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	7013      	strb	r3, [r2, #0]
 8001528:	e781      	b.n	800142e <HAL_SPI_TransmitReceive+0xfe>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800152a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800152c:	2200      	movs	r2, #0
 800152e:	2102      	movs	r1, #2
 8001530:	0020      	movs	r0, r4
 8001532:	f7ff fe73 	bl	800121c <SPI_WaitOnFlagUntilTimeout>
 8001536:	2800      	cmp	r0, #0
 8001538:	d000      	beq.n	800153c <HAL_SPI_TransmitReceive+0x20c>
 800153a:	e78f      	b.n	800145c <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800153c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800153e:	6822      	ldr	r2, [r4, #0]
 8001540:	1c59      	adds	r1, r3, #1
 8001542:	6321      	str	r1, [r4, #48]	; 0x30
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8001548:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800154a:	3b01      	subs	r3, #1
 800154c:	b29b      	uxth	r3, r3
 800154e:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001550:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10a      	bne.n	800156c <HAL_SPI_TransmitReceive+0x23c>
 8001556:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001558:	0019      	movs	r1, r3
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	4299      	cmp	r1, r3
 8001560:	d104      	bne.n	800156c <HAL_SPI_TransmitReceive+0x23c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	6813      	ldr	r3, [r2, #0]
 8001566:	0149      	lsls	r1, r1, #5
 8001568:	430b      	orrs	r3, r1
 800156a:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800156c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800156e:	2200      	movs	r2, #0
 8001570:	2101      	movs	r1, #1
 8001572:	0020      	movs	r0, r4
 8001574:	f7ff fe52 	bl	800121c <SPI_WaitOnFlagUntilTimeout>
 8001578:	2800      	cmp	r0, #0
 800157a:	d000      	beq.n	800157e <HAL_SPI_TransmitReceive+0x24e>
 800157c:	e76e      	b.n	800145c <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800157e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	63a2      	str	r2, [r4, #56]	; 0x38
 8001584:	6822      	ldr	r2, [r4, #0]
 8001586:	68d2      	ldr	r2, [r2, #12]
 8001588:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800158a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800158c:	3b01      	subs	r3, #1
 800158e:	b29b      	uxth	r3, r3
 8001590:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8001592:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1c8      	bne.n	800152a <HAL_SPI_TransmitReceive+0x1fa>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8001598:	6862      	ldr	r2, [r4, #4]
 800159a:	2a00      	cmp	r2, #0
 800159c:	d000      	beq.n	80015a0 <HAL_SPI_TransmitReceive+0x270>
 800159e:	e74a      	b.n	8001436 <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80015a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015a2:	2101      	movs	r1, #1
 80015a4:	0020      	movs	r0, r4
 80015a6:	f7ff fe39 	bl	800121c <SPI_WaitOnFlagUntilTimeout>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d000      	beq.n	80015b0 <HAL_SPI_TransmitReceive+0x280>
 80015ae:	e755      	b.n	800145c <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80015b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	63a2      	str	r2, [r4, #56]	; 0x38
 80015b6:	6822      	ldr	r2, [r4, #0]
 80015b8:	68d2      	ldr	r2, [r2, #12]
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e737      	b.n	800142e <HAL_SPI_TransmitReceive+0xfe>
      tmpreg = hspi->Instance->DR;
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	9a01      	ldr	r2, [sp, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	8013      	strh	r3, [r2, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 80015c8:	0013      	movs	r3, r2
 80015ca:	881b      	ldrh	r3, [r3, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 80015cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015ce:	2201      	movs	r2, #1
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	0020      	movs	r0, r4
 80015d4:	f7ff fe22 	bl	800121c <SPI_WaitOnFlagUntilTimeout>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d002      	beq.n	80015e2 <HAL_SPI_TransmitReceive+0x2b2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80015de:	2320      	movs	r3, #32
 80015e0:	e73a      	b.n	8001458 <HAL_SPI_TransmitReceive+0x128>
    hspi->State = HAL_SPI_STATE_READY;
 80015e2:	2701      	movs	r7, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 80015e8:	702f      	strb	r7, [r5, #0]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 80015ea:	019b      	lsls	r3, r3, #6
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d111      	bne.n	8001614 <HAL_SPI_TransmitReceive+0x2e4>
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	6899      	ldr	r1, [r3, #8]
 80015f4:	06c9      	lsls	r1, r1, #27
 80015f6:	d50d      	bpl.n	8001614 <HAL_SPI_TransmitReceive+0x2e4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80015f8:	2102      	movs	r1, #2
 80015fa:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80015fc:	4329      	orrs	r1, r5
 80015fe:	6561      	str	r1, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 8001600:	6819      	ldr	r1, [r3, #0]
 8001602:	4c06      	ldr	r4, [pc, #24]	; (800161c <HAL_SPI_TransmitReceive+0x2ec>)
 8001604:	4021      	ands	r1, r4
 8001606:	6019      	str	r1, [r3, #0]
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 800160e:	7030      	strb	r0, [r6, #0]
      return HAL_ERROR; 
 8001610:	0038      	movs	r0, r7
 8001612:	e724      	b.n	800145e <HAL_SPI_TransmitReceive+0x12e>
    __HAL_UNLOCK(hspi);
 8001614:	2300      	movs	r3, #0
 8001616:	7033      	strb	r3, [r6, #0]
    return HAL_OK;
 8001618:	e721      	b.n	800145e <HAL_SPI_TransmitReceive+0x12e>
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	ffffdfff 	.word	0xffffdfff

08001620 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)
 8001620:	2280      	movs	r2, #128	; 0x80
{
 8001622:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001624:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)
 8001626:	05d2      	lsls	r2, r2, #23
 8001628:	4290      	cmp	r0, r2
 800162a:	d005      	beq.n	8001638 <TIM_Base_SetConfig+0x18>
 800162c:	4c0f      	ldr	r4, [pc, #60]	; (800166c <TIM_Base_SetConfig+0x4c>)
 800162e:	42a0      	cmp	r0, r4
 8001630:	d002      	beq.n	8001638 <TIM_Base_SetConfig+0x18>
 8001632:	4c0f      	ldr	r4, [pc, #60]	; (8001670 <TIM_Base_SetConfig+0x50>)
 8001634:	42a0      	cmp	r0, r4
 8001636:	d110      	bne.n	800165a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001638:	2470      	movs	r4, #112	; 0x70
 800163a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800163c:	684c      	ldr	r4, [r1, #4]
 800163e:	4323      	orrs	r3, r4
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001640:	4290      	cmp	r0, r2
 8001642:	d104      	bne.n	800164e <TIM_Base_SetConfig+0x2e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <TIM_Base_SetConfig+0x54>)
 8001646:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001648:	68ca      	ldr	r2, [r1, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	e005      	b.n	800165a <TIM_Base_SetConfig+0x3a>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <TIM_Base_SetConfig+0x4c>)
 8001650:	4290      	cmp	r0, r2
 8001652:	d0f7      	beq.n	8001644 <TIM_Base_SetConfig+0x24>
 8001654:	4a06      	ldr	r2, [pc, #24]	; (8001670 <TIM_Base_SetConfig+0x50>)
 8001656:	4290      	cmp	r0, r2
 8001658:	d0f4      	beq.n	8001644 <TIM_Base_SetConfig+0x24>
  }

  TIMx->CR1 = tmpcr1;
 800165a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800165c:	688b      	ldr	r3, [r1, #8]
 800165e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001660:	680b      	ldr	r3, [r1, #0]
 8001662:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001664:	2301      	movs	r3, #1
 8001666:	6143      	str	r3, [r0, #20]
}
 8001668:	bd10      	pop	{r4, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40010800 	.word	0x40010800
 8001670:	40011400 	.word	0x40011400
 8001674:	fffffcff 	.word	0xfffffcff

08001678 <HAL_TIM_Base_MspInit>:
 8001678:	4770      	bx	lr

0800167a <HAL_TIM_Base_Init>:
{ 
 800167a:	b570      	push	{r4, r5, r6, lr}
 800167c:	0004      	movs	r4, r0
    return HAL_ERROR;
 800167e:	2001      	movs	r0, #1
  if(htim == NULL)
 8001680:	2c00      	cmp	r4, #0
 8001682:	d014      	beq.n	80016ae <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001684:	0025      	movs	r5, r4
 8001686:	3535      	adds	r5, #53	; 0x35
 8001688:	782b      	ldrb	r3, [r5, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001690:	0022      	movs	r2, r4
 8001692:	3234      	adds	r2, #52	; 0x34
 8001694:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8001696:	0020      	movs	r0, r4
 8001698:	f7ff ffee 	bl	8001678 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800169c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800169e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80016a0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80016a2:	1d21      	adds	r1, r4, #4
 80016a4:	f7ff ffbc 	bl	8001620 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016a8:	2301      	movs	r3, #1
  return HAL_OK;
 80016aa:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80016ac:	702b      	strb	r3, [r5, #0]
}
 80016ae:	bd70      	pop	{r4, r5, r6, pc}

080016b0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016b0:	2201      	movs	r2, #1
 80016b2:	6803      	ldr	r3, [r0, #0]
 80016b4:	68d9      	ldr	r1, [r3, #12]
}
 80016b6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016b8:	4311      	orrs	r1, r2
 80016ba:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
}
 80016c2:	4770      	bx	lr

080016c4 <HAL_TIM_OC_DelayElapsedCallback>:
 80016c4:	4770      	bx	lr

080016c6 <HAL_TIM_IC_CaptureCallback>:
 80016c6:	4770      	bx	lr

080016c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80016c8:	4770      	bx	lr

080016ca <HAL_TIM_TriggerCallback>:
 80016ca:	4770      	bx	lr

080016cc <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016cc:	2202      	movs	r2, #2
 80016ce:	6803      	ldr	r3, [r0, #0]
{
 80016d0:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016d2:	6919      	ldr	r1, [r3, #16]
{
 80016d4:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016d6:	4211      	tst	r1, r2
 80016d8:	d00d      	beq.n	80016f6 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80016da:	68d9      	ldr	r1, [r3, #12]
 80016dc:	4211      	tst	r1, r2
 80016de:	d00a      	beq.n	80016f6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016e0:	3a05      	subs	r2, #5
 80016e2:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016e4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016e6:	3204      	adds	r2, #4
 80016e8:	7502      	strb	r2, [r0, #20]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016ea:	079b      	lsls	r3, r3, #30
 80016ec:	d05e      	beq.n	80017ac <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 80016ee:	f7ff ffea 	bl	80016c6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f2:	2300      	movs	r3, #0
 80016f4:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016f6:	2204      	movs	r2, #4
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	6919      	ldr	r1, [r3, #16]
 80016fc:	4211      	tst	r1, r2
 80016fe:	d010      	beq.n	8001722 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	4211      	tst	r1, r2
 8001704:	d00d      	beq.n	8001722 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001706:	3a09      	subs	r2, #9
 8001708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800170a:	3207      	adds	r2, #7
 800170c:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800170e:	699a      	ldr	r2, [r3, #24]
 8001710:	23c0      	movs	r3, #192	; 0xc0
 8001712:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001714:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001716:	421a      	tst	r2, r3
 8001718:	d04e      	beq.n	80017b8 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 800171a:	f7ff ffd4 	bl	80016c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171e:	2300      	movs	r3, #0
 8001720:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001722:	2208      	movs	r2, #8
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	6919      	ldr	r1, [r3, #16]
 8001728:	4211      	tst	r1, r2
 800172a:	d00e      	beq.n	800174a <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800172c:	68d9      	ldr	r1, [r3, #12]
 800172e:	4211      	tst	r1, r2
 8001730:	d00b      	beq.n	800174a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001732:	3a11      	subs	r2, #17
 8001734:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001736:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001738:	320d      	adds	r2, #13
 800173a:	7522      	strb	r2, [r4, #20]
        HAL_TIM_IC_CaptureCallback(htim);
 800173c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800173e:	079b      	lsls	r3, r3, #30
 8001740:	d040      	beq.n	80017c4 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8001742:	f7ff ffc0 	bl	80016c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001746:	2300      	movs	r3, #0
 8001748:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800174a:	2210      	movs	r2, #16
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	6919      	ldr	r1, [r3, #16]
 8001750:	4211      	tst	r1, r2
 8001752:	d010      	beq.n	8001776 <HAL_TIM_IRQHandler+0xaa>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001754:	68d9      	ldr	r1, [r3, #12]
 8001756:	4211      	tst	r1, r2
 8001758:	d00d      	beq.n	8001776 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800175a:	3a21      	subs	r2, #33	; 0x21
 800175c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800175e:	3219      	adds	r2, #25
 8001760:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001762:	69da      	ldr	r2, [r3, #28]
 8001764:	23c0      	movs	r3, #192	; 0xc0
 8001766:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001768:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800176a:	421a      	tst	r2, r3
 800176c:	d030      	beq.n	80017d0 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 800176e:	f7ff ffaa 	bl	80016c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001772:	2300      	movs	r3, #0
 8001774:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001776:	2201      	movs	r2, #1
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	6919      	ldr	r1, [r3, #16]
 800177c:	4211      	tst	r1, r2
 800177e:	d007      	beq.n	8001790 <HAL_TIM_IRQHandler+0xc4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001780:	68d9      	ldr	r1, [r3, #12]
 8001782:	4211      	tst	r1, r2
 8001784:	d004      	beq.n	8001790 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001786:	3a03      	subs	r2, #3
 8001788:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800178a:	0020      	movs	r0, r4
 800178c:	f001 f83e 	bl	800280c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	6919      	ldr	r1, [r3, #16]
 8001796:	4211      	tst	r1, r2
 8001798:	d007      	beq.n	80017aa <HAL_TIM_IRQHandler+0xde>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800179a:	68d9      	ldr	r1, [r3, #12]
 800179c:	4211      	tst	r1, r2
 800179e:	d004      	beq.n	80017aa <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017a0:	3a81      	subs	r2, #129	; 0x81
 80017a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80017a4:	0020      	movs	r0, r4
 80017a6:	f7ff ff90 	bl	80016ca <HAL_TIM_TriggerCallback>
}
 80017aa:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ac:	f7ff ff8a 	bl	80016c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	0020      	movs	r0, r4
 80017b2:	f7ff ff89 	bl	80016c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80017b6:	e79c      	b.n	80016f2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b8:	f7ff ff84 	bl	80016c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017bc:	0020      	movs	r0, r4
 80017be:	f7ff ff83 	bl	80016c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80017c2:	e7ac      	b.n	800171e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c4:	f7ff ff7e 	bl	80016c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c8:	0020      	movs	r0, r4
 80017ca:	f7ff ff7d 	bl	80016c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80017ce:	e7ba      	b.n	8001746 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d0:	f7ff ff78 	bl	80016c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d4:	0020      	movs	r0, r4
 80017d6:	f7ff ff77 	bl	80016c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80017da:	e7ca      	b.n	8001772 <HAL_TIM_IRQHandler+0xa6>

080017dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	0005      	movs	r5, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 80017e0:	6803      	ldr	r3, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017e2:	6882      	ldr	r2, [r0, #8]
 80017e4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80017e6:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017e8:	4302      	orrs	r2, r0
 80017ea:	6968      	ldr	r0, [r5, #20]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80017ec:	4e7e      	ldr	r6, [pc, #504]	; (80019e8 <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017ee:	4302      	orrs	r2, r0
 80017f0:	69e8      	ldr	r0, [r5, #28]
 80017f2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80017f4:	487d      	ldr	r0, [pc, #500]	; (80019ec <UART_SetConfig+0x210>)
 80017f6:	4001      	ands	r1, r0
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	497c      	ldr	r1, [pc, #496]	; (80019f0 <UART_SetConfig+0x214>)
 8001800:	400a      	ands	r2, r1
 8001802:	68e9      	ldr	r1, [r5, #12]
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001808:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800180a:	42b3      	cmp	r3, r6
 800180c:	d001      	beq.n	8001812 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800180e:	6a2a      	ldr	r2, [r5, #32]
 8001810:	4311      	orrs	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4877      	ldr	r0, [pc, #476]	; (80019f4 <UART_SetConfig+0x218>)
 8001816:	4002      	ands	r2, r0
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800181c:	4a76      	ldr	r2, [pc, #472]	; (80019f8 <UART_SetConfig+0x21c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d117      	bne.n	8001852 <UART_SetConfig+0x76>
 8001822:	2203      	movs	r2, #3
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <UART_SetConfig+0x220>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	4013      	ands	r3, r2
 800182a:	4a75      	ldr	r2, [pc, #468]	; (8001a00 <UART_SetConfig+0x224>)
 800182c:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 800182e:	2002      	movs	r0, #2
 8001830:	f7ff fc0c 	bl	800104c <HAL_RCCEx_GetPeriphCLKFreq>

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8001834:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8001836:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8001838:	42b7      	cmp	r7, r6
 800183a:	d15f      	bne.n	80018fc <UART_SetConfig+0x120>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;

    switch (clocksource)
 800183c:	2c08      	cmp	r4, #8
 800183e:	d900      	bls.n	8001842 <UART_SetConfig+0x66>
 8001840:	e0d0      	b.n	80019e4 <UART_SetConfig+0x208>
 8001842:	0020      	movs	r0, r4
 8001844:	f7fe fc60 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001848:	ce32ce2a 	.word	0xce32ce2a
 800184c:	cecece52 	.word	0xcecece52
 8001850:	55          	.byte	0x55
 8001851:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001852:	4a6c      	ldr	r2, [pc, #432]	; (8001a04 <UART_SetConfig+0x228>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d105      	bne.n	8001864 <UART_SetConfig+0x88>
 8001858:	220c      	movs	r2, #12
 800185a:	4b68      	ldr	r3, [pc, #416]	; (80019fc <UART_SetConfig+0x220>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4013      	ands	r3, r2
 8001860:	4a69      	ldr	r2, [pc, #420]	; (8001a08 <UART_SetConfig+0x22c>)
 8001862:	e7e3      	b.n	800182c <UART_SetConfig+0x50>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001864:	2410      	movs	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001866:	42b3      	cmp	r3, r6
 8001868:	d1e1      	bne.n	800182e <UART_SetConfig+0x52>
 800186a:	22c0      	movs	r2, #192	; 0xc0
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	4b63      	ldr	r3, [pc, #396]	; (80019fc <UART_SetConfig+0x220>)
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	00c9      	lsls	r1, r1, #3
 8001876:	4013      	ands	r3, r2
 8001878:	3c0c      	subs	r4, #12
 800187a:	428b      	cmp	r3, r1
 800187c:	d0d7      	beq.n	800182e <UART_SetConfig+0x52>
 800187e:	d804      	bhi.n	800188a <UART_SetConfig+0xae>
 8001880:	2400      	movs	r4, #0
 8001882:	42a3      	cmp	r3, r4
 8001884:	d0d3      	beq.n	800182e <UART_SetConfig+0x52>
 8001886:	2410      	movs	r4, #16
 8001888:	e7d1      	b.n	800182e <UART_SetConfig+0x52>
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	2402      	movs	r4, #2
 800188e:	0109      	lsls	r1, r1, #4
 8001890:	428b      	cmp	r3, r1
 8001892:	d0cc      	beq.n	800182e <UART_SetConfig+0x52>
 8001894:	3406      	adds	r4, #6
 8001896:	4293      	cmp	r3, r2
 8001898:	d0c9      	beq.n	800182e <UART_SetConfig+0x52>
 800189a:	e7f4      	b.n	8001886 <UART_SetConfig+0xaa>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800189c:	f7ff fab8 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 80018a0:	2400      	movs	r4, #0
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 80018a2:	0003      	movs	r3, r0
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 80018a4:	42a0      	cmp	r0, r4
 80018a6:	d106      	bne.n	80018b6 <UART_SetConfig+0xda>
    }
  }

  return ret;

}
 80018a8:	0020      	movs	r0, r4
 80018aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <UART_SetConfig+0x220>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	06db      	lsls	r3, r3, #27
 80018b2:	d421      	bmi.n	80018f8 <UART_SetConfig+0x11c>
        tmpreg = (uint32_t) HSI_VALUE;
 80018b4:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <UART_SetConfig+0x230>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80018b6:	2103      	movs	r1, #3
 80018b8:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 80018ba:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80018bc:	4351      	muls	r1, r2
 80018be:	4299      	cmp	r1, r3
 80018c0:	d8f2      	bhi.n	80018a8 <UART_SetConfig+0xcc>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 80018c2:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80018c4:	4299      	cmp	r1, r3
 80018c6:	d3ef      	bcc.n	80018a8 <UART_SetConfig+0xcc>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 80018c8:	2700      	movs	r7, #0
 80018ca:	0856      	lsrs	r6, r2, #1
 80018cc:	0e19      	lsrs	r1, r3, #24
 80018ce:	0218      	lsls	r0, r3, #8
 80018d0:	1980      	adds	r0, r0, r6
 80018d2:	4179      	adcs	r1, r7
 80018d4:	003b      	movs	r3, r7
 80018d6:	f7fe fcad 	bl	8000234 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 80018da:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <UART_SetConfig+0x234>)
 80018dc:	18c2      	adds	r2, r0, r3
 80018de:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <UART_SetConfig+0x238>)
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8e1      	bhi.n	80018a8 <UART_SetConfig+0xcc>
           huart->Instance->BRR = tmpreg;
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80018e8:	2400      	movs	r4, #0
      break;
 80018ea:	e7dd      	b.n	80018a8 <UART_SetConfig+0xcc>
      tmpreg = HAL_RCC_GetSysClockFreq();
 80018ec:	f7ff f996 	bl	8000c1c <HAL_RCC_GetSysClockFreq>
 80018f0:	e7d6      	b.n	80018a0 <UART_SetConfig+0xc4>
      tmpreg = (uint32_t) LSE_VALUE;
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	e7de      	b.n	80018b6 <UART_SetConfig+0xda>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 80018f8:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <UART_SetConfig+0x23c>)
 80018fa:	e7dc      	b.n	80018b6 <UART_SetConfig+0xda>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	69e9      	ldr	r1, [r5, #28]
 8001900:	0212      	lsls	r2, r2, #8
 8001902:	4291      	cmp	r1, r2
 8001904:	d13f      	bne.n	8001986 <UART_SetConfig+0x1aa>
    switch (clocksource)
 8001906:	2c08      	cmp	r4, #8
 8001908:	d83a      	bhi.n	8001980 <UART_SetConfig+0x1a4>
 800190a:	0020      	movs	r0, r4
 800190c:	f7fe fbfc 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001910:	38170f05 	.word	0x38170f05
 8001914:	38383830 	.word	0x38383830
 8001918:	33          	.byte	0x33
 8001919:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 800191a:	686a      	ldr	r2, [r5, #4]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	0011      	movs	r1, r2
 8001920:	0850      	lsrs	r0, r2, #1
 8001922:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001924:	f7fe fbfa 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001928:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800192a:	b280      	uxth	r0, r0
      break;
 800192c:	e016      	b.n	800195c <UART_SetConfig+0x180>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800192e:	f7ff fa7f 	bl	8000e30 <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001932:	686b      	ldr	r3, [r5, #4]
 8001934:	0040      	lsls	r0, r0, #1
 8001936:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001938:	18c0      	adds	r0, r0, r3
 800193a:	6869      	ldr	r1, [r5, #4]
 800193c:	e7f2      	b.n	8001924 <UART_SetConfig+0x148>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <UART_SetConfig+0x220>)
 8001940:	6869      	ldr	r1, [r5, #4]
 8001942:	681c      	ldr	r4, [r3, #0]
 8001944:	2310      	movs	r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001946:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001948:	401c      	ands	r4, r3
 800194a:	d002      	beq.n	8001952 <UART_SetConfig+0x176>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <UART_SetConfig+0x240>)
 800194e:	18c0      	adds	r0, r0, r3
 8001950:	e7e8      	b.n	8001924 <UART_SetConfig+0x148>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8001952:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <UART_SetConfig+0x244>)
 8001954:	18c0      	adds	r0, r0, r3
 8001956:	f7fe fbe1 	bl	800011c <__udivsi3>
 800195a:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 800195c:	230f      	movs	r3, #15
 800195e:	0002      	movs	r2, r0
 8001960:	439a      	bics	r2, r3
 8001962:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8001964:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 8001966:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8001968:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 800196a:	4318      	orrs	r0, r3
 800196c:	60d0      	str	r0, [r2, #12]
 800196e:	e79b      	b.n	80018a8 <UART_SetConfig+0xcc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001970:	f7ff f954 	bl	8000c1c <HAL_RCC_GetSysClockFreq>
 8001974:	e7dd      	b.n	8001932 <UART_SetConfig+0x156>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001976:	686b      	ldr	r3, [r5, #4]
 8001978:	0858      	lsrs	r0, r3, #1
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	e7db      	b.n	8001938 <UART_SetConfig+0x15c>
        ret = HAL_ERROR;
 8001980:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 8001982:	2000      	movs	r0, #0
 8001984:	e7ea      	b.n	800195c <UART_SetConfig+0x180>
    switch (clocksource)
 8001986:	2c08      	cmp	r4, #8
 8001988:	d82c      	bhi.n	80019e4 <UART_SetConfig+0x208>
 800198a:	0020      	movs	r0, r4
 800198c:	f7fe fbbc 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001990:	2a120f05 	.word	0x2a120f05
 8001994:	2a2a2a22 	.word	0x2a2a2a22
 8001998:	25          	.byte	0x25
 8001999:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800199a:	f7ff fa39 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 800199e:	6869      	ldr	r1, [r5, #4]
 80019a0:	084b      	lsrs	r3, r1, #1
 80019a2:	1818      	adds	r0, r3, r0
 80019a4:	f7fe fbba 	bl	800011c <__udivsi3>
 80019a8:	b280      	uxth	r0, r0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	e79c      	b.n	80018e8 <UART_SetConfig+0x10c>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80019ae:	f7ff fa3f 	bl	8000e30 <HAL_RCC_GetPCLK2Freq>
 80019b2:	e7f4      	b.n	800199e <UART_SetConfig+0x1c2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <UART_SetConfig+0x220>)
 80019b6:	6869      	ldr	r1, [r5, #4]
 80019b8:	681c      	ldr	r4, [r3, #0]
 80019ba:	2310      	movs	r3, #16
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80019bc:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019be:	401c      	ands	r4, r3
 80019c0:	d001      	beq.n	80019c6 <UART_SetConfig+0x1ea>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <UART_SetConfig+0x23c>)
 80019c4:	e7ed      	b.n	80019a2 <UART_SetConfig+0x1c6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <UART_SetConfig+0x230>)
 80019c8:	18c0      	adds	r0, r0, r3
 80019ca:	f7fe fba7 	bl	800011c <__udivsi3>
 80019ce:	b280      	uxth	r0, r0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	e769      	b.n	80018a8 <UART_SetConfig+0xcc>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019d4:	f7ff f922 	bl	8000c1c <HAL_RCC_GetSysClockFreq>
 80019d8:	e7e1      	b.n	800199e <UART_SetConfig+0x1c2>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	6869      	ldr	r1, [r5, #4]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	0848      	lsrs	r0, r1, #1
 80019e2:	e7de      	b.n	80019a2 <UART_SetConfig+0x1c6>
        ret = HAL_ERROR;
 80019e4:	2401      	movs	r4, #1
 80019e6:	e75f      	b.n	80018a8 <UART_SetConfig+0xcc>
 80019e8:	40004800 	.word	0x40004800
 80019ec:	efff69f3 	.word	0xefff69f3
 80019f0:	ffffcfff 	.word	0xffffcfff
 80019f4:	fffff4ff 	.word	0xfffff4ff
 80019f8:	40013800 	.word	0x40013800
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08003cfc 	.word	0x08003cfc
 8001a04:	40004400 	.word	0x40004400
 8001a08:	08003d00 	.word	0x08003d00
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	fffffd00 	.word	0xfffffd00
 8001a14:	000ffcff 	.word	0x000ffcff
 8001a18:	003d0900 	.word	0x003d0900
 8001a1c:	007a1200 	.word	0x007a1200
 8001a20:	01e84800 	.word	0x01e84800

08001a24 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a24:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001a26:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a28:	07da      	lsls	r2, r3, #31
 8001a2a:	d506      	bpl.n	8001a3a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a2c:	6801      	ldr	r1, [r0, #0]
 8001a2e:	4c28      	ldr	r4, [pc, #160]	; (8001ad0 <UART_AdvFeatureConfig+0xac>)
 8001a30:	684a      	ldr	r2, [r1, #4]
 8001a32:	4022      	ands	r2, r4
 8001a34:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001a36:	4322      	orrs	r2, r4
 8001a38:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a3a:	079a      	lsls	r2, r3, #30
 8001a3c:	d506      	bpl.n	8001a4c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a3e:	6801      	ldr	r1, [r0, #0]
 8001a40:	4c24      	ldr	r4, [pc, #144]	; (8001ad4 <UART_AdvFeatureConfig+0xb0>)
 8001a42:	684a      	ldr	r2, [r1, #4]
 8001a44:	4022      	ands	r2, r4
 8001a46:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001a48:	4322      	orrs	r2, r4
 8001a4a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a4c:	075a      	lsls	r2, r3, #29
 8001a4e:	d506      	bpl.n	8001a5e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a50:	6801      	ldr	r1, [r0, #0]
 8001a52:	4c21      	ldr	r4, [pc, #132]	; (8001ad8 <UART_AdvFeatureConfig+0xb4>)
 8001a54:	684a      	ldr	r2, [r1, #4]
 8001a56:	4022      	ands	r2, r4
 8001a58:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001a5a:	4322      	orrs	r2, r4
 8001a5c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a5e:	071a      	lsls	r2, r3, #28
 8001a60:	d506      	bpl.n	8001a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a62:	6801      	ldr	r1, [r0, #0]
 8001a64:	4c1d      	ldr	r4, [pc, #116]	; (8001adc <UART_AdvFeatureConfig+0xb8>)
 8001a66:	684a      	ldr	r2, [r1, #4]
 8001a68:	4022      	ands	r2, r4
 8001a6a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001a6c:	4322      	orrs	r2, r4
 8001a6e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a70:	06da      	lsls	r2, r3, #27
 8001a72:	d506      	bpl.n	8001a82 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a74:	6801      	ldr	r1, [r0, #0]
 8001a76:	4c1a      	ldr	r4, [pc, #104]	; (8001ae0 <UART_AdvFeatureConfig+0xbc>)
 8001a78:	688a      	ldr	r2, [r1, #8]
 8001a7a:	4022      	ands	r2, r4
 8001a7c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001a7e:	4322      	orrs	r2, r4
 8001a80:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a82:	069a      	lsls	r2, r3, #26
 8001a84:	d506      	bpl.n	8001a94 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a86:	6801      	ldr	r1, [r0, #0]
 8001a88:	4c16      	ldr	r4, [pc, #88]	; (8001ae4 <UART_AdvFeatureConfig+0xc0>)
 8001a8a:	688a      	ldr	r2, [r1, #8]
 8001a8c:	4022      	ands	r2, r4
 8001a8e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001a90:	4322      	orrs	r2, r4
 8001a92:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a94:	065a      	lsls	r2, r3, #25
 8001a96:	d510      	bpl.n	8001aba <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a98:	6801      	ldr	r1, [r0, #0]
 8001a9a:	4d13      	ldr	r5, [pc, #76]	; (8001ae8 <UART_AdvFeatureConfig+0xc4>)
 8001a9c:	684a      	ldr	r2, [r1, #4]
 8001a9e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001aa0:	402a      	ands	r2, r5
 8001aa2:	4322      	orrs	r2, r4
 8001aa4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	0352      	lsls	r2, r2, #13
 8001aaa:	4294      	cmp	r4, r2
 8001aac:	d105      	bne.n	8001aba <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001aae:	684a      	ldr	r2, [r1, #4]
 8001ab0:	4c0e      	ldr	r4, [pc, #56]	; (8001aec <UART_AdvFeatureConfig+0xc8>)
 8001ab2:	4022      	ands	r2, r4
 8001ab4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ab6:	4322      	orrs	r2, r4
 8001ab8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001aba:	061b      	lsls	r3, r3, #24
 8001abc:	d506      	bpl.n	8001acc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001abe:	6802      	ldr	r2, [r0, #0]
 8001ac0:	490b      	ldr	r1, [pc, #44]	; (8001af0 <UART_AdvFeatureConfig+0xcc>)
 8001ac2:	6853      	ldr	r3, [r2, #4]
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	6053      	str	r3, [r2, #4]
  }
}
 8001acc:	bd30      	pop	{r4, r5, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	fffdffff 	.word	0xfffdffff
 8001ad4:	fffeffff 	.word	0xfffeffff
 8001ad8:	fffbffff 	.word	0xfffbffff
 8001adc:	ffff7fff 	.word	0xffff7fff
 8001ae0:	ffffefff 	.word	0xffffefff
 8001ae4:	ffffdfff 	.word	0xffffdfff
 8001ae8:	ffefffff 	.word	0xffefffff
 8001aec:	ff9fffff 	.word	0xff9fffff
 8001af0:	fff7ffff 	.word	0xfff7ffff

08001af4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	0004      	movs	r4, r0
 8001af8:	000e      	movs	r6, r1
 8001afa:	0015      	movs	r5, r2
 8001afc:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001afe:	6822      	ldr	r2, [r4, #0]
 8001b00:	69d3      	ldr	r3, [r2, #28]
 8001b02:	4033      	ands	r3, r6
 8001b04:	1b9b      	subs	r3, r3, r6
 8001b06:	4259      	negs	r1, r3
 8001b08:	414b      	adcs	r3, r1
 8001b0a:	42ab      	cmp	r3, r5
 8001b0c:	d001      	beq.n	8001b12 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001b0e:	2000      	movs	r0, #0
 8001b10:	e018      	b.n	8001b44 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001b12:	9b06      	ldr	r3, [sp, #24]
 8001b14:	3301      	adds	r3, #1
 8001b16:	d0f3      	beq.n	8001b00 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b18:	9b06      	ldr	r3, [sp, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d113      	bne.n	8001b46 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <UART_WaitOnFlagUntilTimeout+0x60>)
 8001b22:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001b24:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b26:	400a      	ands	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	31a3      	adds	r1, #163	; 0xa3
 8001b2e:	31ff      	adds	r1, #255	; 0xff
 8001b30:	438a      	bics	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001b34:	0022      	movs	r2, r4
 8001b36:	2320      	movs	r3, #32
 8001b38:	3269      	adds	r2, #105	; 0x69
 8001b3a:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001b3c:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	3468      	adds	r4, #104	; 0x68
 8001b42:	7023      	strb	r3, [r4, #0]
}
 8001b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b46:	f7fe fc97 	bl	8000478 <HAL_GetTick>
 8001b4a:	9b06      	ldr	r3, [sp, #24]
 8001b4c:	1bc0      	subs	r0, r0, r7
 8001b4e:	4283      	cmp	r3, r0
 8001b50:	d2d5      	bcs.n	8001afe <UART_WaitOnFlagUntilTimeout+0xa>
 8001b52:	e7e4      	b.n	8001b1e <UART_WaitOnFlagUntilTimeout+0x2a>
 8001b54:	fffffe5f 	.word	0xfffffe5f

08001b58 <UART_CheckIdleState>:
{
 8001b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5a:	2600      	movs	r6, #0
{
 8001b5c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001b60:	f7fe fc8a 	bl	8000478 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b64:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001b66:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	071b      	lsls	r3, r3, #28
 8001b6c:	d417      	bmi.n	8001b9e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	075b      	lsls	r3, r3, #29
 8001b74:	d50a      	bpl.n	8001b8c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <UART_CheckIdleState+0x60>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	03c9      	lsls	r1, r1, #15
 8001b80:	002b      	movs	r3, r5
 8001b82:	0020      	movs	r0, r4
 8001b84:	f7ff ffb6 	bl	8001af4 <UART_WaitOnFlagUntilTimeout>
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d113      	bne.n	8001bb4 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8001b8c:	0022      	movs	r2, r4
 8001b8e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001b90:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001b92:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8001b94:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001b96:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001b98:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8001b9a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001b9c:	e00b      	b.n	8001bb6 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <UART_CheckIdleState+0x60>)
 8001ba2:	0032      	movs	r2, r6
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	0389      	lsls	r1, r1, #14
 8001ba8:	0003      	movs	r3, r0
 8001baa:	0020      	movs	r0, r4
 8001bac:	f7ff ffa2 	bl	8001af4 <UART_WaitOnFlagUntilTimeout>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d0dc      	beq.n	8001b6e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001bb4:	2003      	movs	r0, #3
}
 8001bb6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001bb8:	01ffffff 	.word	0x01ffffff

08001bbc <HAL_UART_Init>:
{
 8001bbc:	b570      	push	{r4, r5, r6, lr}
 8001bbe:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001bc2:	2001      	movs	r0, #1
}
 8001bc4:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001bc6:	0005      	movs	r5, r0
 8001bc8:	3569      	adds	r5, #105	; 0x69
 8001bca:	782b      	ldrb	r3, [r5, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d104      	bne.n	8001bdc <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	3268      	adds	r2, #104	; 0x68
 8001bd6:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001bd8:	f000 ffc6 	bl	8002b68 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001bdc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001bde:	2101      	movs	r1, #1
 8001be0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001be2:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	438b      	bics	r3, r1
 8001be8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 8001bf0:	0020      	movs	r0, r4
 8001bf2:	f7ff ff17 	bl	8001a24 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bf6:	0020      	movs	r0, r4
 8001bf8:	f7ff fdf0 	bl	80017dc <UART_SetConfig>
 8001bfc:	2801      	cmp	r0, #1
 8001bfe:	d0e0      	beq.n	8001bc2 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	4908      	ldr	r1, [pc, #32]	; (8001c24 <HAL_UART_Init+0x68>)
 8001c04:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001c06:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c08:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0a:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	438a      	bics	r2, r1
 8001c12:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001c14:	2201      	movs	r2, #1
 8001c16:	6819      	ldr	r1, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001c1c:	f7ff ff9c 	bl	8001b58 <UART_CheckIdleState>
 8001c20:	e7d0      	b.n	8001bc4 <HAL_UART_Init+0x8>
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	ffffb7ff 	.word	0xffffb7ff

08001c28 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c28:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8001c2a:	f000 fb0d 	bl	8002248 <vTaskStartScheduler>
  
  return osOK;
}
 8001c2e:	2000      	movs	r0, #0
 8001c30:	bd10      	pop	{r4, pc}

08001c32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c32:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001c34:	000b      	movs	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c36:	6846      	ldr	r6, [r0, #4]
 8001c38:	6801      	ldr	r1, [r0, #0]
 8001c3a:	8a02      	ldrh	r2, [r0, #16]
 8001c3c:	2508      	movs	r5, #8
 8001c3e:	5f45      	ldrsh	r5, [r0, r5]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c40:	2400      	movs	r4, #0
  if (priority != osPriorityError) {
 8001c42:	2d84      	cmp	r5, #132	; 0x84
 8001c44:	d000      	beq.n	8001c48 <osThreadCreate+0x16>
    fpriority += (priority - osPriorityIdle);
 8001c46:	1cec      	adds	r4, r5, #3
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c48:	a803      	add	r0, sp, #12
 8001c4a:	9001      	str	r0, [sp, #4]
 8001c4c:	9400      	str	r4, [sp, #0]
 8001c4e:	0030      	movs	r0, r6
 8001c50:	f000 fa36 	bl	80020c0 <xTaskCreate>
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8001c54:	2300      	movs	r3, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c56:	2801      	cmp	r0, #1
 8001c58:	d100      	bne.n	8001c5c <osThreadCreate+0x2a>
  }     
#endif
  
  return handle;
 8001c5a:	9b03      	ldr	r3, [sp, #12]
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	b004      	add	sp, #16
 8001c60:	bd70      	pop	{r4, r5, r6, pc}

08001c62 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001c62:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c64:	f000 fc8c 	bl	8002580 <xTaskGetSchedulerState>
 8001c68:	2801      	cmp	r0, #1
 8001c6a:	d001      	beq.n	8001c70 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001c6c:	f000 f8d2 	bl	8001e14 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001c70:	bd10      	pop	{r4, pc}

08001c72 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c72:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c74:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c76:	3308      	adds	r3, #8
 8001c78:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c7a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c7c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c7e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c80:	4252      	negs	r2, r2
 8001c82:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c84:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c86:	4770      	bx	lr

08001c88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c8c:	4770      	bx	lr

08001c8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c8e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c90:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001c92:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c94:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c9a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001c9c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c9e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	6003      	str	r3, [r0, #0]
}
 8001ca4:	4770      	bx	lr

08001ca6 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ca6:	0003      	movs	r3, r0
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ca8:	680a      	ldr	r2, [r1, #0]
{
 8001caa:	b530      	push	{r4, r5, lr}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cac:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8001cae:	1c54      	adds	r4, r2, #1
 8001cb0:	d10b      	bne.n	8001cca <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cb2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cb8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001cba:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cbc:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001cbe:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cc0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	6003      	str	r3, [r0, #0]
}
 8001cc6:	bd30      	pop	{r4, r5, pc}
 8001cc8:	0023      	movs	r3, r4
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cca:	685c      	ldr	r4, [r3, #4]
 8001ccc:	6825      	ldr	r5, [r4, #0]
 8001cce:	42aa      	cmp	r2, r5
 8001cd0:	d2fa      	bcs.n	8001cc8 <vListInsert+0x22>
 8001cd2:	e7ef      	b.n	8001cb4 <vListInsert+0xe>

08001cd4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cd4:	6841      	ldr	r1, [r0, #4]
 8001cd6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001cd8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cda:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cdc:	6882      	ldr	r2, [r0, #8]
 8001cde:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ce0:	6859      	ldr	r1, [r3, #4]
 8001ce2:	4288      	cmp	r0, r1
 8001ce4:	d100      	bne.n	8001ce8 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ce6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001ce8:	2200      	movs	r2, #0
 8001cea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	1e50      	subs	r0, r2, #1
 8001cf0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001cf2:	4770      	bx	lr

08001cf4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <prvTaskExitError+0x10>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	d001      	beq.n	8001d00 <prvTaskExitError+0xc>
 8001cfc:	b672      	cpsid	i
 8001cfe:	e7fe      	b.n	8001cfe <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8001d00:	b672      	cpsid	i
 8001d02:	e7fe      	b.n	8001d02 <prvTaskExitError+0xe>
 8001d04:	20000000 	.word	0x20000000
	...

08001d10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8001d10:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <pxCurrentTCBConst2>)
 8001d12:	6813      	ldr	r3, [r2, #0]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	3020      	adds	r0, #32
 8001d18:	f380 8809 	msr	PSP, r0
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f380 8814 	msr	CONTROL, r0
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8001d28:	46ae      	mov	lr, r5
 8001d2a:	bc08      	pop	{r3}
 8001d2c:	bc04      	pop	{r2}
 8001d2e:	b662      	cpsie	i
 8001d30:	4718      	bx	r3
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46c0      	nop			; (mov r8, r8)

08001d40 <pxCurrentTCBConst2>:
 8001d40:	20000ca0 	.word	0x20000ca0

08001d44 <pxPortInitialiseStack>:
{
 8001d44:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d46:	2480      	movs	r4, #128	; 0x80
 8001d48:	1f03      	subs	r3, r0, #4
 8001d4a:	0464      	lsls	r4, r4, #17
 8001d4c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d52:	4903      	ldr	r1, [pc, #12]	; (8001d60 <pxPortInitialiseStack+0x1c>)
 8001d54:	3b04      	subs	r3, #4
 8001d56:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001d58:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 8001d5a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001d5c:	601a      	str	r2, [r3, #0]
}
 8001d5e:	bd10      	pop	{r4, pc}
 8001d60:	08001cf5 	.word	0x08001cf5

08001d64 <SVC_Handler>:
}
 8001d64:	4770      	bx	lr
	...

08001d68 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <vPortYield+0x14>)
 8001d6c:	0552      	lsls	r2, r2, #21
 8001d6e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8001d70:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001d74:	f3bf 8f6f 	isb	sy
}
 8001d78:	4770      	bx	lr
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	e000ed04 	.word	0xe000ed04

08001d80 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
 8001d80:	b672      	cpsid	i
    uxCriticalNesting++;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <vPortEnterCritical+0x14>)
 8001d84:	6813      	ldr	r3, [r2, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8001d8a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001d8e:	f3bf 8f6f 	isb	sy
}
 8001d92:	4770      	bx	lr
 8001d94:	20000000 	.word	0x20000000

08001d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <vPortExitCritical+0x18>)
 8001d9a:	6813      	ldr	r3, [r2, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <vPortExitCritical+0xc>
 8001da0:	b672      	cpsid	i
 8001da2:	e7fe      	b.n	8001da2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8001da4:	3b01      	subs	r3, #1
 8001da6:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d100      	bne.n	8001dae <vPortExitCritical+0x16>
    {
        portENABLE_INTERRUPTS();
 8001dac:	b662      	cpsie	i
    }
}
 8001dae:	4770      	bx	lr
 8001db0:	20000000 	.word	0x20000000

08001db4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8001db4:	f3ef 8010 	mrs	r0, PRIMASK
 8001db8:	b672      	cpsid	i
 8001dba:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
 8001dbc:	2000      	movs	r0, #0

08001dbe <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 8001dbe:	f380 8810 	msr	PRIMASK, r0
 8001dc2:	4770      	bx	lr
	...

08001dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001dd0:	f3ef 8009 	mrs	r0, PSP
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <pxCurrentTCBConst>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	3820      	subs	r0, #32
 8001dda:	6010      	str	r0, [r2, #0]
 8001ddc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001dde:	4644      	mov	r4, r8
 8001de0:	464d      	mov	r5, r9
 8001de2:	4656      	mov	r6, sl
 8001de4:	465f      	mov	r7, fp
 8001de6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001de8:	b508      	push	{r3, lr}
 8001dea:	b672      	cpsid	i
 8001dec:	f000 fb92 	bl	8002514 <vTaskSwitchContext>
 8001df0:	b662      	cpsie	i
 8001df2:	bc0c      	pop	{r2, r3}
 8001df4:	6811      	ldr	r1, [r2, #0]
 8001df6:	6808      	ldr	r0, [r1, #0]
 8001df8:	3010      	adds	r0, #16
 8001dfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001dfc:	46a0      	mov	r8, r4
 8001dfe:	46a9      	mov	r9, r5
 8001e00:	46b2      	mov	sl, r6
 8001e02:	46bb      	mov	fp, r7
 8001e04:	f380 8809 	msr	PSP, r0
 8001e08:	3820      	subs	r0, #32
 8001e0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001e0c:	4718      	bx	r3
 8001e0e:	46c0      	nop			; (mov r8, r8)

08001e10 <pxCurrentTCBConst>:
 8001e10:	20000ca0 	.word	0x20000ca0

08001e14 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001e14:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e16:	f7ff ffcd 	bl	8001db4 <ulSetInterruptMaskFromISR>
 8001e1a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001e1c:	f000 fa46 	bl	80022ac <xTaskIncrementTick>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d003      	beq.n	8001e2c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <xPortSysTickHandler+0x20>)
 8001e28:	0552      	lsls	r2, r2, #21
 8001e2a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8001e2c:	0020      	movs	r0, r4
 8001e2e:	f7ff ffc6 	bl	8001dbe <vClearInterruptMaskFromISR>
}
 8001e32:	bd10      	pop	{r4, pc}
 8001e34:	e000ed04 	.word	0xe000ed04

08001e38 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001e38:	21fa      	movs	r1, #250	; 0xfa
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <vPortSetupTimerInterrupt+0x1c>)
{
 8001e3c:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	0089      	lsls	r1, r1, #2
 8001e42:	f7fe f96b 	bl	800011c <__udivsi3>
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8001e46:	2207      	movs	r2, #7
	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <vPortSetupTimerInterrupt+0x20>)
 8001e4a:	3801      	subs	r0, #1
 8001e4c:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8001e4e:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <vPortSetupTimerInterrupt+0x24>)
 8001e50:	601a      	str	r2, [r3, #0]
}
 8001e52:	bd10      	pop	{r4, pc}
 8001e54:	20000004 	.word	0x20000004
 8001e58:	e000e014 	.word	0xe000e014
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <xPortStartScheduler>:
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8001e60:	22ff      	movs	r2, #255	; 0xff
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <xPortStartScheduler+0x2c>)
 8001e64:	0412      	lsls	r2, r2, #16
 8001e66:	6819      	ldr	r1, [r3, #0]
{
 8001e68:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8001e6e:	22ff      	movs	r2, #255	; 0xff
 8001e70:	6819      	ldr	r1, [r3, #0]
 8001e72:	0612      	lsls	r2, r2, #24
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001e78:	f7ff ffde 	bl	8001e38 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <xPortStartScheduler+0x30>)
 8001e80:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8001e82:	f7ff ff45 	bl	8001d10 <vPortStartFirstTask>
	prvTaskExitError();
 8001e86:	f7ff ff35 	bl	8001cf4 <prvTaskExitError>
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	e000ed20 	.word	0xe000ed20
 8001e90:	20000000 	.word	0x20000000

08001e94 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001e94:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <prvInsertBlockIntoFreeList+0x40>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4282      	cmp	r2, r0
 8001e9c:	d318      	bcc.n	8001ed0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001e9e:	685c      	ldr	r4, [r3, #4]
 8001ea0:	1919      	adds	r1, r3, r4
 8001ea2:	4288      	cmp	r0, r1
 8001ea4:	d103      	bne.n	8001eae <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ea6:	6841      	ldr	r1, [r0, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	1909      	adds	r1, r1, r4
 8001eac:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001eae:	6841      	ldr	r1, [r0, #4]
 8001eb0:	1844      	adds	r4, r0, r1
 8001eb2:	42a2      	cmp	r2, r4
 8001eb4:	d107      	bne.n	8001ec6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001eb6:	4c08      	ldr	r4, [pc, #32]	; (8001ed8 <prvInsertBlockIntoFreeList+0x44>)
 8001eb8:	6824      	ldr	r4, [r4, #0]
 8001eba:	42a2      	cmp	r2, r4
 8001ebc:	d003      	beq.n	8001ec6 <prvInsertBlockIntoFreeList+0x32>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ebe:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001ec0:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ec2:	1861      	adds	r1, r4, r1
 8001ec4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ec6:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ec8:	4298      	cmp	r0, r3
 8001eca:	d000      	beq.n	8001ece <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ecc:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ece:	bd10      	pop	{r4, pc}
 8001ed0:	0013      	movs	r3, r2
 8001ed2:	e7e1      	b.n	8001e98 <prvInsertBlockIntoFreeList+0x4>
 8001ed4:	20000c98 	.word	0x20000c98
 8001ed8:	20000088 	.word	0x20000088

08001edc <pvPortMalloc>:
{
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ede:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8001ee0:	f000 f9dc 	bl	800229c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001ee4:	4a38      	ldr	r2, [pc, #224]	; (8001fc8 <pvPortMalloc+0xec>)
 8001ee6:	4839      	ldr	r0, [pc, #228]	; (8001fcc <pvPortMalloc+0xf0>)
 8001ee8:	6813      	ldr	r3, [r2, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11e      	bne.n	8001f2c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8001eee:	4938      	ldr	r1, [pc, #224]	; (8001fd0 <pvPortMalloc+0xf4>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ef0:	3307      	adds	r3, #7
 8001ef2:	4219      	tst	r1, r3
 8001ef4:	d036      	beq.n	8001f64 <pvPortMalloc+0x88>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ef6:	18cd      	adds	r5, r1, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ef8:	439d      	bics	r5, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001efa:	23c0      	movs	r3, #192	; 0xc0
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	18c9      	adds	r1, r1, r3
 8001f00:	1b4b      	subs	r3, r1, r5
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f02:	0029      	movs	r1, r5
	xStart.xBlockSize = ( size_t ) 0;
 8001f04:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f06:	4e33      	ldr	r6, [pc, #204]	; (8001fd4 <pvPortMalloc+0xf8>)
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001f08:	18cb      	adds	r3, r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 8001f0a:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f0c:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f0e:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 8001f10:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f12:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 8001f14:	601d      	str	r5, [r3, #0]
	pxEnd->xBlockSize = 0;
 8001f16:	605d      	str	r5, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f18:	1a5d      	subs	r5, r3, r1
	pxEnd = ( void * ) uxAddress;
 8001f1a:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001f1c:	c128      	stmia	r1!, {r3, r5}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <pvPortMalloc+0xfc>)
 8001f20:	601d      	str	r5, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <pvPortMalloc+0x100>)
 8001f24:	601d      	str	r5, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	061b      	lsls	r3, r3, #24
 8001f2a:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001f2c:	6806      	ldr	r6, [r0, #0]
 8001f2e:	4234      	tst	r4, r6
 8001f30:	d116      	bne.n	8001f60 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 8001f32:	2c00      	cmp	r4, #0
 8001f34:	d014      	beq.n	8001f60 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 8001f36:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f38:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 8001f3a:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f3c:	420b      	tst	r3, r1
 8001f3e:	d001      	beq.n	8001f44 <pvPortMalloc+0x68>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f40:	438b      	bics	r3, r1
 8001f42:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00b      	beq.n	8001f60 <pvPortMalloc+0x84>
 8001f48:	4924      	ldr	r1, [pc, #144]	; (8001fdc <pvPortMalloc+0x100>)
 8001f4a:	680d      	ldr	r5, [r1, #0]
 8001f4c:	42ab      	cmp	r3, r5
 8001f4e:	d807      	bhi.n	8001f60 <pvPortMalloc+0x84>
				pxBlock = xStart.pxNextFreeBlock;
 8001f50:	4920      	ldr	r1, [pc, #128]	; (8001fd4 <pvPortMalloc+0xf8>)
 8001f52:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f54:	6860      	ldr	r0, [r4, #4]
 8001f56:	4283      	cmp	r3, r0
 8001f58:	d807      	bhi.n	8001f6a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	4294      	cmp	r4, r2
 8001f5e:	d10b      	bne.n	8001f78 <pvPortMalloc+0x9c>
void *pvReturn = NULL;
 8001f60:	2500      	movs	r5, #0
 8001f62:	e028      	b.n	8001fb6 <pvPortMalloc+0xda>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001f64:	23c0      	movs	r3, #192	; 0xc0
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	e7cc      	b.n	8001f04 <pvPortMalloc+0x28>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f6a:	6827      	ldr	r7, [r4, #0]
 8001f6c:	46bc      	mov	ip, r7
 8001f6e:	2f00      	cmp	r7, #0
 8001f70:	d0f3      	beq.n	8001f5a <pvPortMalloc+0x7e>
 8001f72:	0021      	movs	r1, r4
 8001f74:	4664      	mov	r4, ip
 8001f76:	e7ed      	b.n	8001f54 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001f78:	680a      	ldr	r2, [r1, #0]
 8001f7a:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001f80:	1ac2      	subs	r2, r0, r3
 8001f82:	2a10      	cmp	r2, #16
 8001f84:	d908      	bls.n	8001f98 <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001f86:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f88:	0741      	lsls	r1, r0, #29
 8001f8a:	d001      	beq.n	8001f90 <pvPortMalloc+0xb4>
 8001f8c:	b672      	cpsid	i
 8001f8e:	e7fe      	b.n	8001f8e <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001f90:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001f92:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001f94:	f7ff ff7e 	bl	8001e94 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001f98:	6863      	ldr	r3, [r4, #4]
 8001f9a:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <pvPortMalloc+0x100>)
 8001f9c:	1aed      	subs	r5, r5, r3
 8001f9e:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <pvPortMalloc+0xfc>)
 8001fa2:	6811      	ldr	r1, [r2, #0]
 8001fa4:	428d      	cmp	r5, r1
 8001fa6:	d200      	bcs.n	8001faa <pvPortMalloc+0xce>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001fa8:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001faa:	431e      	orrs	r6, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001fac:	003d      	movs	r5, r7
					pxBlock->pxNextFreeBlock = NULL;
 8001fae:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001fb0:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001fb2:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001fb4:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8001fb6:	f000 f9f7 	bl	80023a8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001fba:	076b      	lsls	r3, r5, #29
 8001fbc:	d001      	beq.n	8001fc2 <pvPortMalloc+0xe6>
 8001fbe:	b672      	cpsid	i
 8001fc0:	e7fe      	b.n	8001fc0 <pvPortMalloc+0xe4>
}
 8001fc2:	0028      	movs	r0, r5
 8001fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	20000088 	.word	0x20000088
 8001fcc:	20000c8c 	.word	0x20000c8c
 8001fd0:	2000008c 	.word	0x2000008c
 8001fd4:	20000c98 	.word	0x20000c98
 8001fd8:	20000c94 	.word	0x20000c94
 8001fdc:	20000c90 	.word	0x20000c90

08001fe0 <vPortFree>:
{
 8001fe0:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	d01b      	beq.n	800201e <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <vPortFree+0x40>)
 8001fe8:	3808      	subs	r0, #8
 8001fea:	6843      	ldr	r3, [r0, #4]
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	0004      	movs	r4, r0
 8001ff0:	421a      	tst	r2, r3
 8001ff2:	d101      	bne.n	8001ff8 <vPortFree+0x18>
 8001ff4:	b672      	cpsid	i
 8001ff6:	e7fe      	b.n	8001ff6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ff8:	6801      	ldr	r1, [r0, #0]
 8001ffa:	2900      	cmp	r1, #0
 8001ffc:	d001      	beq.n	8002002 <vPortFree+0x22>
 8001ffe:	b672      	cpsid	i
 8002000:	e7fe      	b.n	8002000 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002002:	4393      	bics	r3, r2
 8002004:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8002006:	f000 f949 	bl	800229c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <vPortFree+0x44>)
 800200c:	6863      	ldr	r3, [r4, #4]
 800200e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002010:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002012:	185b      	adds	r3, r3, r1
 8002014:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002016:	f7ff ff3d 	bl	8001e94 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800201a:	f000 f9c5 	bl	80023a8 <xTaskResumeAll>
}
 800201e:	bd10      	pop	{r4, pc}
 8002020:	20000c8c 	.word	0x20000c8c
 8002024:	20000c90 	.word	0x20000c90

08002028 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <prvResetNextTaskUnblockTime+0x20>)
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	6819      	ldr	r1, [r3, #0]
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <prvResetNextTaskUnblockTime+0x24>)
 8002030:	2900      	cmp	r1, #0
 8002032:	d103      	bne.n	800203c <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002034:	2201      	movs	r2, #1
 8002036:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002038:	601a      	str	r2, [r3, #0]
	}
}
 800203a:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002040:	68d2      	ldr	r2, [r2, #12]
 8002042:	6852      	ldr	r2, [r2, #4]
 8002044:	e7f8      	b.n	8002038 <prvResetNextTaskUnblockTime+0x10>
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	20000ca4 	.word	0x20000ca4
 800204c:	20000d7c 	.word	0x20000d7c

08002050 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002052:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002056:	4d15      	ldr	r5, [pc, #84]	; (80020ac <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8002058:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800205a:	6828      	ldr	r0, [r5, #0]
{
 800205c:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800205e:	3004      	adds	r0, #4
 8002060:	f7ff fe38 	bl	8001cd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002064:	1c63      	adds	r3, r4, #1
 8002066:	d107      	bne.n	8002078 <prvAddCurrentTaskToDelayedList+0x28>
 8002068:	2f00      	cmp	r7, #0
 800206a:	d005      	beq.n	8002078 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800206c:	6829      	ldr	r1, [r5, #0]
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <prvAddCurrentTaskToDelayedList+0x60>)
 8002070:	3104      	adds	r1, #4
 8002072:	f7ff fe0c 	bl	8001c8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002078:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800207a:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800207c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800207e:	42a6      	cmp	r6, r4
 8002080:	d906      	bls.n	8002090 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <prvAddCurrentTaskToDelayedList+0x64>)
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	6829      	ldr	r1, [r5, #0]
 8002088:	3104      	adds	r1, #4
 800208a:	f7ff fe0c 	bl	8001ca6 <vListInsert>
 800208e:	e7f2      	b.n	8002076 <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <prvAddCurrentTaskToDelayedList+0x68>)
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	6829      	ldr	r1, [r5, #0]
 8002096:	3104      	adds	r1, #4
 8002098:	f7ff fe05 	bl	8001ca6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <prvAddCurrentTaskToDelayedList+0x6c>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4294      	cmp	r4, r2
 80020a2:	d2e8      	bcs.n	8002076 <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 80020a4:	601c      	str	r4, [r3, #0]
}
 80020a6:	e7e6      	b.n	8002076 <prvAddCurrentTaskToDelayedList+0x26>
 80020a8:	20000dc4 	.word	0x20000dc4
 80020ac:	20000ca0 	.word	0x20000ca0
 80020b0:	20000d9c 	.word	0x20000d9c
 80020b4:	20000ca8 	.word	0x20000ca8
 80020b8:	20000ca4 	.word	0x20000ca4
 80020bc:	20000d7c 	.word	0x20000d7c

080020c0 <xTaskCreate>:
	{
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020c2:	0095      	lsls	r5, r2, #2
	{
 80020c4:	b085      	sub	sp, #20
 80020c6:	9002      	str	r0, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020c8:	0028      	movs	r0, r5
	{
 80020ca:	000f      	movs	r7, r1
 80020cc:	9303      	str	r3, [sp, #12]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020ce:	f7ff ff05 	bl	8001edc <pvPortMalloc>
 80020d2:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 80020d4:	d100      	bne.n	80020d8 <xTaskCreate+0x18>
 80020d6:	e08e      	b.n	80021f6 <xTaskCreate+0x136>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80020d8:	2054      	movs	r0, #84	; 0x54
 80020da:	f7ff feff 	bl	8001edc <pvPortMalloc>
 80020de:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 80020e0:	d100      	bne.n	80020e4 <xTaskCreate+0x24>
 80020e2:	e085      	b.n	80021f0 <xTaskCreate+0x130>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80020e4:	2307      	movs	r3, #7
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80020e6:	3d04      	subs	r5, #4
					pxNewTCB->pxStack = pxStack;
 80020e8:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80020ea:	1976      	adds	r6, r6, r5
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80020ec:	439e      	bics	r6, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020ee:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80020f0:	9600      	str	r6, [sp, #0]
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80020f2:	001a      	movs	r2, r3
 80020f4:	5cf9      	ldrb	r1, [r7, r3]
 80020f6:	3234      	adds	r2, #52	; 0x34
 80020f8:	54a1      	strb	r1, [r4, r2]
		if( pcName[ x ] == 0x00 )
 80020fa:	5cfa      	ldrb	r2, [r7, r3]
 80020fc:	2a00      	cmp	r2, #0
 80020fe:	d002      	beq.n	8002106 <xTaskCreate+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002100:	3301      	adds	r3, #1
 8002102:	2b10      	cmp	r3, #16
 8002104:	d1f5      	bne.n	80020f2 <xTaskCreate+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002106:	0023      	movs	r3, r4
 8002108:	2500      	movs	r5, #0
 800210a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800210c:	3343      	adds	r3, #67	; 0x43
 800210e:	701d      	strb	r5, [r3, #0]
 8002110:	2e06      	cmp	r6, #6
 8002112:	d900      	bls.n	8002116 <xTaskCreate+0x56>
 8002114:	2606      	movs	r6, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002116:	1d23      	adds	r3, r4, #4
 8002118:	0018      	movs	r0, r3
	pxNewTCB->uxPriority = uxPriority;
 800211a:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800211c:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800211e:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	f7ff fdb1 	bl	8001c88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002126:	0020      	movs	r0, r4
 8002128:	3018      	adds	r0, #24
 800212a:	f7ff fdad 	bl	8001c88 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800212e:	2307      	movs	r3, #7
 8002130:	1b9e      	subs	r6, r3, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002132:	0023      	movs	r3, r4
 8002134:	3350      	adds	r3, #80	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002136:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002138:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800213a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800213c:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800213e:	9a03      	ldr	r2, [sp, #12]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002140:	701d      	strb	r5, [r3, #0]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002142:	9902      	ldr	r1, [sp, #8]
 8002144:	9800      	ldr	r0, [sp, #0]
 8002146:	f7ff fdfd 	bl	8001d44 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 800214a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800214c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800214e:	2b00      	cmp	r3, #0
 8002150:	d000      	beq.n	8002154 <xTaskCreate+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002152:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8002154:	f7ff fe14 	bl	8001d80 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002158:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <xTaskCreate+0x154>)
		if( pxCurrentTCB == NULL )
 800215a:	4d2f      	ldr	r5, [pc, #188]	; (8002218 <xTaskCreate+0x158>)
		uxCurrentNumberOfTasks++;
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	3201      	adds	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002162:	682a      	ldr	r2, [r5, #0]
 8002164:	2a00      	cmp	r2, #0
 8002166:	d149      	bne.n	80021fc <xTaskCreate+0x13c>
			pxCurrentTCB = pxNewTCB;
 8002168:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d11d      	bne.n	80021ac <xTaskCreate+0xec>
 8002170:	4e2a      	ldr	r6, [pc, #168]	; (800221c <xTaskCreate+0x15c>)
 8002172:	0037      	movs	r7, r6
 8002174:	378c      	adds	r7, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002176:	0030      	movs	r0, r6
 8002178:	3614      	adds	r6, #20
 800217a:	f7ff fd7a 	bl	8001c72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800217e:	42b7      	cmp	r7, r6
 8002180:	d1f9      	bne.n	8002176 <xTaskCreate+0xb6>
	vListInitialise( &xDelayedTaskList1 );
 8002182:	4e27      	ldr	r6, [pc, #156]	; (8002220 <xTaskCreate+0x160>)
 8002184:	0030      	movs	r0, r6
 8002186:	f7ff fd74 	bl	8001c72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800218a:	4f26      	ldr	r7, [pc, #152]	; (8002224 <xTaskCreate+0x164>)
 800218c:	0038      	movs	r0, r7
 800218e:	f7ff fd70 	bl	8001c72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002192:	4825      	ldr	r0, [pc, #148]	; (8002228 <xTaskCreate+0x168>)
 8002194:	f7ff fd6d 	bl	8001c72 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002198:	4824      	ldr	r0, [pc, #144]	; (800222c <xTaskCreate+0x16c>)
 800219a:	f7ff fd6a 	bl	8001c72 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800219e:	4824      	ldr	r0, [pc, #144]	; (8002230 <xTaskCreate+0x170>)
 80021a0:	f7ff fd67 	bl	8001c72 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <xTaskCreate+0x174>)
 80021a6:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <xTaskCreate+0x178>)
 80021aa:	601f      	str	r7, [r3, #0]
		uxTaskNumber++;
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <xTaskCreate+0x17c>)
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80021b4:	4a22      	ldr	r2, [pc, #136]	; (8002240 <xTaskCreate+0x180>)
 80021b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021b8:	6811      	ldr	r1, [r2, #0]
 80021ba:	428b      	cmp	r3, r1
 80021bc:	d900      	bls.n	80021c0 <xTaskCreate+0x100>
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	2014      	movs	r0, #20
 80021c2:	4358      	muls	r0, r3
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <xTaskCreate+0x15c>)
 80021c6:	9901      	ldr	r1, [sp, #4]
 80021c8:	1818      	adds	r0, r3, r0
 80021ca:	f7ff fd60 	bl	8001c8e <vListInsertEnd>
	taskEXIT_CRITICAL();
 80021ce:	f7ff fde3 	bl	8001d98 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <xTaskCreate+0x184>)
			xReturn = pdPASS;
 80021d4:	2601      	movs	r6, #1
	if( xSchedulerRunning != pdFALSE )
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <xTaskCreate+0x12a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80021dc:	682b      	ldr	r3, [r5, #0]
 80021de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d201      	bcs.n	80021ea <xTaskCreate+0x12a>
			taskYIELD_IF_USING_PREEMPTION();
 80021e6:	f7ff fdbf 	bl	8001d68 <vPortYield>
	}
 80021ea:	0030      	movs	r0, r6
 80021ec:	b005      	add	sp, #20
 80021ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 80021f0:	0030      	movs	r0, r6
 80021f2:	f7ff fef5 	bl	8001fe0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021f6:	2601      	movs	r6, #1
 80021f8:	4276      	negs	r6, r6
 80021fa:	e7f6      	b.n	80021ea <xTaskCreate+0x12a>
			if( xSchedulerRunning == pdFALSE )
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <xTaskCreate+0x184>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1d3      	bne.n	80021ac <xTaskCreate+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	4293      	cmp	r3, r2
 800220c:	d8ce      	bhi.n	80021ac <xTaskCreate+0xec>
					pxCurrentTCB = pxNewTCB;
 800220e:	602c      	str	r4, [r5, #0]
 8002210:	e7cc      	b.n	80021ac <xTaskCreate+0xec>
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	20000d38 	.word	0x20000d38
 8002218:	20000ca0 	.word	0x20000ca0
 800221c:	20000cac 	.word	0x20000cac
 8002220:	20000d50 	.word	0x20000d50
 8002224:	20000d64 	.word	0x20000d64
 8002228:	20000d84 	.word	0x20000d84
 800222c:	20000db0 	.word	0x20000db0
 8002230:	20000d9c 	.word	0x20000d9c
 8002234:	20000ca4 	.word	0x20000ca4
 8002238:	20000ca8 	.word	0x20000ca8
 800223c:	20000d48 	.word	0x20000d48
 8002240:	20000d4c 	.word	0x20000d4c
 8002244:	20000d98 	.word	0x20000d98

08002248 <vTaskStartScheduler>:
{
 8002248:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800224a:	2400      	movs	r4, #0
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <vTaskStartScheduler+0x3c>)
 800224e:	9400      	str	r4, [sp, #0]
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	0023      	movs	r3, r4
 8002256:	490c      	ldr	r1, [pc, #48]	; (8002288 <vTaskStartScheduler+0x40>)
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <vTaskStartScheduler+0x44>)
 800225a:	f7ff ff31 	bl	80020c0 <xTaskCreate>
	if( xReturn == pdPASS )
 800225e:	2801      	cmp	r0, #1
 8002260:	d10b      	bne.n	800227a <vTaskStartScheduler+0x32>
		portDISABLE_INTERRUPTS();
 8002262:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8002264:	2201      	movs	r2, #1
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <vTaskStartScheduler+0x48>)
 8002268:	4252      	negs	r2, r2
 800226a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <vTaskStartScheduler+0x4c>)
 800226e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <vTaskStartScheduler+0x50>)
 8002272:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002274:	f7ff fdf4 	bl	8001e60 <xPortStartScheduler>
}
 8002278:	bd13      	pop	{r0, r1, r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800227a:	1c43      	adds	r3, r0, #1
 800227c:	d1fc      	bne.n	8002278 <vTaskStartScheduler+0x30>
 800227e:	b672      	cpsid	i
 8002280:	e7fe      	b.n	8002280 <vTaskStartScheduler+0x38>
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	20000d78 	.word	0x20000d78
 8002288:	08003d0d 	.word	0x08003d0d
 800228c:	080024ad 	.word	0x080024ad
 8002290:	20000d7c 	.word	0x20000d7c
 8002294:	20000d98 	.word	0x20000d98
 8002298:	20000dc4 	.word	0x20000dc4

0800229c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800229c:	4a02      	ldr	r2, [pc, #8]	; (80022a8 <vTaskSuspendAll+0xc>)
 800229e:	6813      	ldr	r3, [r2, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	4770      	bx	lr
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	20000d44 	.word	0x20000d44

080022ac <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ac:	4b33      	ldr	r3, [pc, #204]	; (800237c <xTaskIncrementTick+0xd0>)
{
 80022ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d135      	bne.n	8002322 <xTaskIncrementTick+0x76>
		const TickType_t xConstTickCount = xTickCount + 1;
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <xTaskIncrementTick+0xd4>)
 80022b8:	681c      	ldr	r4, [r3, #0]
 80022ba:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80022bc:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80022be:	2c00      	cmp	r4, #0
 80022c0:	d111      	bne.n	80022e6 <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <xTaskIncrementTick+0xd8>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	d001      	beq.n	80022d0 <xTaskIncrementTick+0x24>
 80022cc:	b672      	cpsid	i
 80022ce:	e7fe      	b.n	80022ce <xTaskIncrementTick+0x22>
 80022d0:	4a2d      	ldr	r2, [pc, #180]	; (8002388 <xTaskIncrementTick+0xdc>)
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	6810      	ldr	r0, [r2, #0]
 80022d6:	6018      	str	r0, [r3, #0]
 80022d8:	6011      	str	r1, [r2, #0]
 80022da:	4a2c      	ldr	r2, [pc, #176]	; (800238c <xTaskIncrementTick+0xe0>)
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	f7ff fea1 	bl	8002028 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80022e6:	4f2a      	ldr	r7, [pc, #168]	; (8002390 <xTaskIncrementTick+0xe4>)
BaseType_t xSwitchRequired = pdFALSE;
 80022e8:	2600      	movs	r6, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	429c      	cmp	r4, r3
 80022ee:	d307      	bcc.n	8002300 <xTaskIncrementTick+0x54>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <xTaskIncrementTick+0xd8>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	2a00      	cmp	r2, #0
 80022f8:	d119      	bne.n	800232e <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022fa:	2301      	movs	r3, #1
 80022fc:	425b      	negs	r3, r3
 80022fe:	603b      	str	r3, [r7, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002300:	4b24      	ldr	r3, [pc, #144]	; (8002394 <xTaskIncrementTick+0xe8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002306:	2314      	movs	r3, #20
 8002308:	4353      	muls	r3, r2
 800230a:	4a23      	ldr	r2, [pc, #140]	; (8002398 <xTaskIncrementTick+0xec>)
 800230c:	58d3      	ldr	r3, [r2, r3]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d900      	bls.n	8002314 <xTaskIncrementTick+0x68>
				xSwitchRequired = pdTRUE;
 8002312:	2601      	movs	r6, #1
		if( xYieldPending != pdFALSE )
 8002314:	4b21      	ldr	r3, [pc, #132]	; (800239c <xTaskIncrementTick+0xf0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d000      	beq.n	800231e <xTaskIncrementTick+0x72>
			xSwitchRequired = pdTRUE;
 800231c:	2601      	movs	r6, #1
}
 800231e:	0030      	movs	r0, r6
 8002320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		++uxPendedTicks;
 8002322:	4a1f      	ldr	r2, [pc, #124]	; (80023a0 <xTaskIncrementTick+0xf4>)
BaseType_t xSwitchRequired = pdFALSE;
 8002324:	2600      	movs	r6, #0
		++uxPendedTicks;
 8002326:	6813      	ldr	r3, [r2, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	e7f2      	b.n	8002314 <xTaskIncrementTick+0x68>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002334:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8002336:	429c      	cmp	r4, r3
 8002338:	d3e1      	bcc.n	80022fe <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800233a:	1d2b      	adds	r3, r5, #4
 800233c:	0018      	movs	r0, r3
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	f7ff fcc8 	bl	8001cd4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002344:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800234a:	0028      	movs	r0, r5
 800234c:	3018      	adds	r0, #24
 800234e:	f7ff fcc1 	bl	8001cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <xTaskIncrementTick+0xf8>)
 8002354:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4290      	cmp	r0, r2
 800235a:	d900      	bls.n	800235e <xTaskIncrementTick+0xb2>
 800235c:	6018      	str	r0, [r3, #0]
 800235e:	2314      	movs	r3, #20
 8002360:	4358      	muls	r0, r3
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <xTaskIncrementTick+0xec>)
 8002364:	1d29      	adds	r1, r5, #4
 8002366:	1818      	adds	r0, r3, r0
 8002368:	f7ff fc91 	bl	8001c8e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <xTaskIncrementTick+0xe8>)
 800236e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	429a      	cmp	r2, r3
 8002376:	d3bb      	bcc.n	80022f0 <xTaskIncrementTick+0x44>
							xSwitchRequired = pdTRUE;
 8002378:	2601      	movs	r6, #1
 800237a:	e7b9      	b.n	80022f0 <xTaskIncrementTick+0x44>
 800237c:	20000d44 	.word	0x20000d44
 8002380:	20000dc4 	.word	0x20000dc4
 8002384:	20000ca4 	.word	0x20000ca4
 8002388:	20000ca8 	.word	0x20000ca8
 800238c:	20000d80 	.word	0x20000d80
 8002390:	20000d7c 	.word	0x20000d7c
 8002394:	20000ca0 	.word	0x20000ca0
 8002398:	20000cac 	.word	0x20000cac
 800239c:	20000dc8 	.word	0x20000dc8
 80023a0:	20000d40 	.word	0x20000d40
 80023a4:	20000d4c 	.word	0x20000d4c

080023a8 <xTaskResumeAll>:
{
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 80023aa:	4c2b      	ldr	r4, [pc, #172]	; (8002458 <xTaskResumeAll+0xb0>)
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <xTaskResumeAll+0xe>
 80023b2:	b672      	cpsid	i
 80023b4:	e7fe      	b.n	80023b4 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 80023b6:	f7ff fce3 	bl	8001d80 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	3b01      	subs	r3, #1
 80023be:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023c0:	6824      	ldr	r4, [r4, #0]
 80023c2:	2c00      	cmp	r4, #0
 80023c4:	d004      	beq.n	80023d0 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 80023c6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80023c8:	f7ff fce6 	bl	8001d98 <vPortExitCritical>
}
 80023cc:	0020      	movs	r0, r4
 80023ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80023d0:	4b22      	ldr	r3, [pc, #136]	; (800245c <xTaskResumeAll+0xb4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f6      	beq.n	80023c6 <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 80023d8:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 80023da:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <xTaskResumeAll+0xb8>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2a00      	cmp	r2, #0
 80023e2:	d11a      	bne.n	800241a <xTaskResumeAll+0x72>
				if( pxTCB != NULL )
 80023e4:	2c00      	cmp	r4, #0
 80023e6:	d001      	beq.n	80023ec <xTaskResumeAll+0x44>
					prvResetNextTaskUnblockTime();
 80023e8:	f7ff fe1e 	bl	8002028 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80023ec:	4d1d      	ldr	r5, [pc, #116]	; (8002464 <xTaskResumeAll+0xbc>)
 80023ee:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80023f0:	2c00      	cmp	r4, #0
 80023f2:	d00a      	beq.n	800240a <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 80023f4:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 80023f6:	f7ff ff59 	bl	80022ac <xTaskIncrementTick>
 80023fa:	2800      	cmp	r0, #0
 80023fc:	d001      	beq.n	8002402 <xTaskResumeAll+0x5a>
								xYieldPending = pdTRUE;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <xTaskResumeAll+0xc0>)
 8002400:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
 8002402:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002404:	2c00      	cmp	r4, #0
 8002406:	d1f6      	bne.n	80023f6 <xTaskResumeAll+0x4e>
						uxPendedTicks = 0;
 8002408:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <xTaskResumeAll+0xc0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0d9      	beq.n	80023c6 <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 8002412:	f7ff fca9 	bl	8001d68 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8002416:	2401      	movs	r4, #1
 8002418:	e7d6      	b.n	80023c8 <xTaskResumeAll+0x20>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800241e:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002420:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002422:	3018      	adds	r0, #24
 8002424:	f7ff fc56 	bl	8001cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002428:	0028      	movs	r0, r5
 800242a:	f7ff fc53 	bl	8001cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <xTaskResumeAll+0xc4>)
 8002430:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4290      	cmp	r0, r2
 8002436:	d900      	bls.n	800243a <xTaskResumeAll+0x92>
 8002438:	6018      	str	r0, [r3, #0]
 800243a:	4370      	muls	r0, r6
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <xTaskResumeAll+0xc8>)
 800243e:	0029      	movs	r1, r5
 8002440:	1818      	adds	r0, r3, r0
 8002442:	f7ff fc24 	bl	8001c8e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <xTaskResumeAll+0xcc>)
 8002448:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	429a      	cmp	r2, r3
 8002450:	d3c4      	bcc.n	80023dc <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <xTaskResumeAll+0xc0>)
 8002454:	601f      	str	r7, [r3, #0]
 8002456:	e7c1      	b.n	80023dc <xTaskResumeAll+0x34>
 8002458:	20000d44 	.word	0x20000d44
 800245c:	20000d38 	.word	0x20000d38
 8002460:	20000d84 	.word	0x20000d84
 8002464:	20000d40 	.word	0x20000d40
 8002468:	20000dc8 	.word	0x20000dc8
 800246c:	20000d4c 	.word	0x20000d4c
 8002470:	20000cac 	.word	0x20000cac
 8002474:	20000ca0 	.word	0x20000ca0

08002478 <vTaskDelay>:
	{
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800247c:	d102      	bne.n	8002484 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 800247e:	f7ff fc73 	bl	8001d68 <vPortYield>
	}
 8002482:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <vTaskDelay+0x30>)
 8002486:	681d      	ldr	r5, [r3, #0]
 8002488:	2d00      	cmp	r5, #0
 800248a:	d001      	beq.n	8002490 <vTaskDelay+0x18>
 800248c:	b672      	cpsid	i
 800248e:	e7fe      	b.n	800248e <vTaskDelay+0x16>
			vTaskSuspendAll();
 8002490:	f7ff ff04 	bl	800229c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002494:	0029      	movs	r1, r5
 8002496:	0020      	movs	r0, r4
 8002498:	f7ff fdda 	bl	8002050 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800249c:	f7ff ff84 	bl	80023a8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d1ee      	bne.n	8002482 <vTaskDelay+0xa>
 80024a4:	e7eb      	b.n	800247e <vTaskDelay+0x6>
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	20000d44 	.word	0x20000d44

080024ac <prvIdleTask>:
{
 80024ac:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024ae:	4c15      	ldr	r4, [pc, #84]	; (8002504 <prvIdleTask+0x58>)
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <prvIdleTask+0x5c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d9f7      	bls.n	80024ae <prvIdleTask+0x2>
				taskYIELD();
 80024be:	f7ff fc53 	bl	8001d68 <vPortYield>
 80024c2:	e7f4      	b.n	80024ae <prvIdleTask+0x2>
			vTaskSuspendAll();
 80024c4:	f7ff feea 	bl	800229c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80024c8:	4d10      	ldr	r5, [pc, #64]	; (800250c <prvIdleTask+0x60>)
 80024ca:	682e      	ldr	r6, [r5, #0]
			( void ) xTaskResumeAll();
 80024cc:	f7ff ff6c 	bl	80023a8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80024d0:	2e00      	cmp	r6, #0
 80024d2:	d0ec      	beq.n	80024ae <prvIdleTask+0x2>
				taskENTER_CRITICAL();
 80024d4:	f7ff fc54 	bl	8001d80 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80024d8:	68eb      	ldr	r3, [r5, #12]
 80024da:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024dc:	1d28      	adds	r0, r5, #4
 80024de:	f7ff fbf9 	bl	8001cd4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <prvIdleTask+0x64>)
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80024f0:	f7ff fc52 	bl	8001d98 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80024f4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80024f6:	f7ff fd73 	bl	8001fe0 <vPortFree>
			vPortFree( pxTCB );
 80024fa:	0028      	movs	r0, r5
 80024fc:	f7ff fd70 	bl	8001fe0 <vPortFree>
 8002500:	e7d5      	b.n	80024ae <prvIdleTask+0x2>
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	20000d3c 	.word	0x20000d3c
 8002508:	20000cac 	.word	0x20000cac
 800250c:	20000db0 	.word	0x20000db0
 8002510:	20000d38 	.word	0x20000d38

08002514 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <vTaskSwitchContext+0x58>)
{
 8002516:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <vTaskSwitchContext+0x5c>)
 800251c:	2a00      	cmp	r2, #0
 800251e:	d002      	beq.n	8002526 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	bd30      	pop	{r4, r5, pc}
 8002526:	2414      	movs	r4, #20
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002528:	4812      	ldr	r0, [pc, #72]	; (8002574 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 800252a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800252c:	6802      	ldr	r2, [r0, #0]
 800252e:	4912      	ldr	r1, [pc, #72]	; (8002578 <vTaskSwitchContext+0x64>)
 8002530:	0023      	movs	r3, r4
 8002532:	4353      	muls	r3, r2
 8002534:	585d      	ldr	r5, [r3, r1]
 8002536:	2d00      	cmp	r5, #0
 8002538:	d012      	beq.n	8002560 <vTaskSwitchContext+0x4c>
 800253a:	18cc      	adds	r4, r1, r3
 800253c:	6865      	ldr	r5, [r4, #4]
 800253e:	3308      	adds	r3, #8
 8002540:	686d      	ldr	r5, [r5, #4]
 8002542:	18cb      	adds	r3, r1, r3
 8002544:	6065      	str	r5, [r4, #4]
 8002546:	429d      	cmp	r5, r3
 8002548:	d101      	bne.n	800254e <vTaskSwitchContext+0x3a>
 800254a:	686b      	ldr	r3, [r5, #4]
 800254c:	6063      	str	r3, [r4, #4]
 800254e:	2314      	movs	r3, #20
 8002550:	4353      	muls	r3, r2
 8002552:	18c9      	adds	r1, r1, r3
 8002554:	684b      	ldr	r3, [r1, #4]
 8002556:	68d9      	ldr	r1, [r3, #12]
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <vTaskSwitchContext+0x68>)
 800255a:	6019      	str	r1, [r3, #0]
 800255c:	6002      	str	r2, [r0, #0]
}
 800255e:	e7e1      	b.n	8002524 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002560:	2a00      	cmp	r2, #0
 8002562:	d101      	bne.n	8002568 <vTaskSwitchContext+0x54>
 8002564:	b672      	cpsid	i
 8002566:	e7fe      	b.n	8002566 <vTaskSwitchContext+0x52>
 8002568:	3a01      	subs	r2, #1
 800256a:	e7e1      	b.n	8002530 <vTaskSwitchContext+0x1c>
 800256c:	20000d44 	.word	0x20000d44
 8002570:	20000dc8 	.word	0x20000dc8
 8002574:	20000d4c 	.word	0x20000d4c
 8002578:	20000cac 	.word	0x20000cac
 800257c:	20000ca0 	.word	0x20000ca0

08002580 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002582:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800258a:	4b04      	ldr	r3, [pc, #16]	; (800259c <xTaskGetSchedulerState+0x1c>)
 800258c:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800258e:	4243      	negs	r3, r0
 8002590:	4158      	adcs	r0, r3
 8002592:	0040      	lsls	r0, r0, #1
	}
 8002594:	4770      	bx	lr
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	20000d98 	.word	0x20000d98
 800259c:	20000d44 	.word	0x20000d44

080025a0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025a0:	b530      	push	{r4, r5, lr}
 80025a2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN 5 */

	  /* Infinite loop */

	  uint8_t good_id[MFRC522_MAX_LEN]  = { 215, 133, 10, 133, 221, 0, 0, 0};
 80025a4:	2210      	movs	r2, #16
 80025a6:	2100      	movs	r1, #0
 80025a8:	4668      	mov	r0, sp
 80025aa:	f000 fbed 	bl	8002d88 <memset>
 80025ae:	466a      	mov	r2, sp
 80025b0:	23d7      	movs	r3, #215	; 0xd7
 80025b2:	4669      	mov	r1, sp
 80025b4:	7013      	strb	r3, [r2, #0]
 80025b6:	3b52      	subs	r3, #82	; 0x52
 80025b8:	7053      	strb	r3, [r2, #1]
 80025ba:	70cb      	strb	r3, [r1, #3]
 80025bc:	3358      	adds	r3, #88	; 0x58
 80025be:	220a      	movs	r2, #10
 80025c0:	710b      	strb	r3, [r1, #4]

	  uint8_t		str[MFRC522_MAX_LEN];
	  uint8_t		lastID[4];
	  int i;

	  for(int k = 0; k < MFRC522_MAX_LEN; ++k) {
 80025c2:	2300      	movs	r3, #0
	  uint8_t good_id[MFRC522_MAX_LEN]  = { 215, 133, 10, 133, 221, 0, 0, 0};
 80025c4:	708a      	strb	r2, [r1, #2]
		  str[k] = 0;
 80025c6:	001a      	movs	r2, r3
 80025c8:	ac04      	add	r4, sp, #16
 80025ca:	551a      	strb	r2, [r3, r4]
	  for(int k = 0; k < MFRC522_MAX_LEN; ++k) {
 80025cc:	3301      	adds	r3, #1
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d1fb      	bne.n	80025ca <StartDefaultTask+0x2a>
						vTaskDelay(1000);
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

					}else{
						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80025d2:	2580      	movs	r5, #128	; 0x80
 80025d4:	01ed      	lsls	r5, r5, #7
		  printf("wersja: %u\n", MFRC522_ReadRegister(MFRC522_REG_VERSION));
 80025d6:	2037      	movs	r0, #55	; 0x37
 80025d8:	f000 f966 	bl	80028a8 <MFRC522_ReadRegister>
 80025dc:	0001      	movs	r1, r0
 80025de:	481e      	ldr	r0, [pc, #120]	; (8002658 <StartDefaultTask+0xb8>)
 80025e0:	f000 fbda 	bl	8002d98 <iprintf>
		  if (!MFRC522_Request(PICC_REQIDL, str)) {
 80025e4:	0021      	movs	r1, r4
 80025e6:	2026      	movs	r0, #38	; 0x26
 80025e8:	f000 fa0b 	bl	8002a02 <MFRC522_Request>
 80025ec:	2800      	cmp	r0, #0
 80025ee:	d125      	bne.n	800263c <StartDefaultTask+0x9c>
			  if (!MFRC522_Anticoll(str)) {
 80025f0:	0020      	movs	r0, r4
 80025f2:	f000 fa21 	bl	8002a38 <MFRC522_Anticoll>
 80025f6:	2800      	cmp	r0, #0
 80025f8:	d120      	bne.n	800263c <StartDefaultTask+0x9c>
					if (MFRC522_Compare(str, good_id) == MI_OK) {
 80025fa:	4669      	mov	r1, sp
 80025fc:	0020      	movs	r0, r4
 80025fe:	f000 f95c 	bl	80028ba <MFRC522_Compare>
 8002602:	2800      	cmp	r0, #0
 8002604:	d11e      	bne.n	8002644 <StartDefaultTask+0xa4>
						printf("gud\n");
 8002606:	4815      	ldr	r0, [pc, #84]	; (800265c <StartDefaultTask+0xbc>)
 8002608:	f000 fc40 	bl	8002e8c <puts>
						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	4814      	ldr	r0, [pc, #80]	; (8002660 <StartDefaultTask+0xc0>)
 8002610:	0209      	lsls	r1, r1, #8
 8002612:	f7fe f855 	bl	80006c0 <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002616:	20a0      	movs	r0, #160	; 0xa0
 8002618:	2102      	movs	r1, #2
 800261a:	05c0      	lsls	r0, r0, #23
 800261c:	f7fe f850 	bl	80006c0 <HAL_GPIO_TogglePin>
						vTaskDelay(1000);
 8002620:	20fa      	movs	r0, #250	; 0xfa
 8002622:	0080      	lsls	r0, r0, #2
 8002624:	f7ff ff28 	bl	8002478 <vTaskDelay>
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002628:	20a0      	movs	r0, #160	; 0xa0
 800262a:	2102      	movs	r1, #2
 800262c:	05c0      	lsls	r0, r0, #23
 800262e:	f7fe f847 	bl	80006c0 <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	0209      	lsls	r1, r1, #8
						vTaskDelay(1000);
						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002636:	480a      	ldr	r0, [pc, #40]	; (8002660 <StartDefaultTask+0xc0>)
 8002638:	f7fe f842 	bl	80006c0 <HAL_GPIO_TogglePin>
					}
				}
		  }
		  vTaskDelay(200);
 800263c:	20c8      	movs	r0, #200	; 0xc8
 800263e:	f7ff ff1b 	bl	8002478 <vTaskDelay>
		  printf("wersja: %u\n", MFRC522_ReadRegister(MFRC522_REG_VERSION));
 8002642:	e7c8      	b.n	80025d6 <StartDefaultTask+0x36>
						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002644:	0029      	movs	r1, r5
 8002646:	4806      	ldr	r0, [pc, #24]	; (8002660 <StartDefaultTask+0xc0>)
 8002648:	f7fe f83a 	bl	80006c0 <HAL_GPIO_TogglePin>
						vTaskDelay(1000);
 800264c:	20fa      	movs	r0, #250	; 0xfa
 800264e:	0080      	lsls	r0, r0, #2
 8002650:	f7ff ff12 	bl	8002478 <vTaskDelay>
						HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002654:	0029      	movs	r1, r5
 8002656:	e7ee      	b.n	8002636 <StartDefaultTask+0x96>
 8002658:	08003d12 	.word	0x08003d12
 800265c:	08003d1e 	.word	0x08003d1e
 8002660:	50000c00 	.word	0x50000c00

08002664 <SystemClock_Config>:
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002664:	4920      	ldr	r1, [pc, #128]	; (80026e8 <SystemClock_Config+0x84>)
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <SystemClock_Config+0x88>)
 8002668:	680b      	ldr	r3, [r1, #0]
{
 800266a:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800266c:	401a      	ands	r2, r3
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002676:	2310      	movs	r3, #16
{
 8002678:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800267a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800267c:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800267e:	3b0f      	subs	r3, #15
 8002680:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002682:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002684:	0212      	lsls	r2, r2, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002686:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002688:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800268a:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800268c:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800268e:	f7fe f855 	bl	800073c <HAL_RCC_OscConfig>
 8002692:	1e01      	subs	r1, r0, #0
 8002694:	d000      	beq.n	8002698 <SystemClock_Config+0x34>
 8002696:	e7fe      	b.n	8002696 <SystemClock_Config+0x32>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002698:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800269a:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800269c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800269e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026a0:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026a2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a4:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026a6:	f7fe faf5 	bl	8000c94 <HAL_RCC_ClockConfig>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d000      	beq.n	80026b0 <SystemClock_Config+0x4c>
 80026ae:	e7fe      	b.n	80026ae <SystemClock_Config+0x4a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026b0:	2302      	movs	r3, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026b2:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b4:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026b6:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b8:	f7fe fbea 	bl	8000e90 <HAL_RCCEx_PeriphCLKConfig>
 80026bc:	1e04      	subs	r4, r0, #0
 80026be:	d000      	beq.n	80026c2 <SystemClock_Config+0x5e>
 80026c0:	e7fe      	b.n	80026c0 <SystemClock_Config+0x5c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80026c2:	f7fe fb9f 	bl	8000e04 <HAL_RCC_GetHCLKFreq>
 80026c6:	21fa      	movs	r1, #250	; 0xfa
 80026c8:	0089      	lsls	r1, r1, #2
 80026ca:	f7fd fd27 	bl	800011c <__udivsi3>
 80026ce:	f7fd ff13 	bl	80004f8 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026d2:	2004      	movs	r0, #4
 80026d4:	f7fd ff2a 	bl	800052c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 80026d8:	2001      	movs	r0, #1
 80026da:	0022      	movs	r2, r4
 80026dc:	2103      	movs	r1, #3
 80026de:	4240      	negs	r0, r0
 80026e0:	f7fd fed0 	bl	8000484 <HAL_NVIC_SetPriority>
}
 80026e4:	b01c      	add	sp, #112	; 0x70
 80026e6:	bd10      	pop	{r4, pc}
 80026e8:	40007000 	.word	0x40007000
 80026ec:	ffffe7ff 	.word	0xffffe7ff

080026f0 <main>:
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80026f4:	f7fd fea8 	bl	8000448 <HAL_Init>
  SystemClock_Config();
 80026f8:	f7ff ffb4 	bl	8002664 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	2004      	movs	r0, #4
 80026fe:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <main+0xf4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002700:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8002704:	4f38      	ldr	r7, [pc, #224]	; (80027e8 <main+0xf8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	4301      	orrs	r1, r0
 8002708:	62d9      	str	r1, [r3, #44]	; 0x2c
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270e:	4002      	ands	r2, r0
 8002710:	9200      	str	r2, [sp, #0]
 8002712:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002716:	307c      	adds	r0, #124	; 0x7c
 8002718:	4301      	orrs	r1, r0
 800271a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800271c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 800271e:	0039      	movs	r1, r7
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002720:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8002722:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002724:	9201      	str	r2, [sp, #4]
 8002726:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 800272a:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272c:	4332      	orrs	r2, r6
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002734:	4033      	ands	r3, r6
 8002736:	9302      	str	r3, [sp, #8]
 8002738:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 800273a:	f7fd ffbb 	bl	80006b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	ac03      	add	r4, sp, #12
 8002744:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <main+0xfc>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002748:	0021      	movs	r1, r4
 800274a:	4829      	ldr	r0, [pc, #164]	; (80027f0 <main+0x100>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800274c:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	60a5      	str	r5, [r4, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002750:	f7fd fefa 	bl	8000548 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002754:	20a0      	movs	r0, #160	; 0xa0
 8002756:	0021      	movs	r1, r4
 8002758:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9;
 800275a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275c:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002762:	f7fd fef1 	bl	8000548 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002766:	4823      	ldr	r0, [pc, #140]	; (80027f4 <main+0x104>)
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <main+0x108>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	6085      	str	r5, [r0, #8]
  huart2.Instance = USART2;
 800276c:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800276e:	23e1      	movs	r3, #225	; 0xe1
 8002770:	025b      	lsls	r3, r3, #9
 8002772:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002774:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002776:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002778:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800277a:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277c:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800277e:	61c5      	str	r5, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002780:	6205      	str	r5, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002782:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002784:	f7ff fa1a 	bl	8001bbc <HAL_UART_Init>
 8002788:	42a8      	cmp	r0, r5
 800278a:	d000      	beq.n	800278e <main+0x9e>
 800278c:	e7fe      	b.n	800278c <main+0x9c>
  hspi1.Instance = SPI1;
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <main+0x10c>)
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <main+0x110>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002792:	6098      	str	r0, [r3, #8]
  hspi1.Instance = SPI1;
 8002794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002796:	2282      	movs	r2, #130	; 0x82
 8002798:	0052      	lsls	r2, r2, #1
 800279a:	605a      	str	r2, [r3, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800279c:	32fc      	adds	r2, #252	; 0xfc
 800279e:	619a      	str	r2, [r3, #24]
  hspi1.Init.CRCPolynomial = 7;
 80027a0:	3afa      	subs	r2, #250	; 0xfa
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027a2:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027a4:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027a6:	6158      	str	r0, [r3, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a8:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027aa:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ac:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ae:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027b0:	3aff      	subs	r2, #255	; 0xff
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027b2:	0018      	movs	r0, r3
  hspi1.Init.CRCPolynomial = 7;
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027b6:	f7fe fd7b 	bl	80012b0 <HAL_SPI_Init>
 80027ba:	1e05      	subs	r5, r0, #0
 80027bc:	d000      	beq.n	80027c0 <main+0xd0>
 80027be:	e7fe      	b.n	80027be <main+0xce>
  MFRC522_Init();
 80027c0:	f000 f96f 	bl	8002aa2 <MFRC522_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80027c4:	0022      	movs	r2, r4
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <main+0x114>)
 80027c8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80027ca:	c243      	stmia	r2!, {r0, r1, r6}
 80027cc:	cb03      	ldmia	r3!, {r0, r1}
 80027ce:	c203      	stmia	r2!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027d0:	0029      	movs	r1, r5
 80027d2:	0020      	movs	r0, r4
 80027d4:	f7ff fa2d 	bl	8001c32 <osThreadCreate>
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <main+0x118>)
 80027da:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80027dc:	f7ff fa24 	bl	8001c28 <osKernelStart>
 80027e0:	e7fe      	b.n	80027e0 <main+0xf0>
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	40021000 	.word	0x40021000
 80027e8:	00000212 	.word	0x00000212
 80027ec:	10210000 	.word	0x10210000
 80027f0:	50000800 	.word	0x50000800
 80027f4:	20000e38 	.word	0x20000e38
 80027f8:	40004400 	.word	0x40004400
 80027fc:	20000de0 	.word	0x20000de0
 8002800:	40013000 	.word	0x40013000
 8002804:	08003ce8 	.word	0x08003ce8
 8002808:	20000ddc 	.word	0x20000ddc

0800280c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	6802      	ldr	r2, [r0, #0]
{
 8002810:	b510      	push	{r4, lr}
  if (htim->Instance == TIM2) {
 8002812:	05db      	lsls	r3, r3, #23
 8002814:	429a      	cmp	r2, r3
 8002816:	d101      	bne.n	800281c <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8002818:	f7fd fe26 	bl	8000468 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800281c:	bd10      	pop	{r4, pc}
	...

08002820 <SPI1SendByte>:
#include "rc522.h"

extern SPI_HandleTypeDef hspi1;


uint8_t SPI1SendByte(uint8_t data) {
 8002820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
	HAL_StatusTypeDef x = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8002822:	230a      	movs	r3, #10
	writeCommand[0] = data;
 8002824:	a902      	add	r1, sp, #8
	HAL_StatusTypeDef x = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8002826:	ac03      	add	r4, sp, #12
	writeCommand[0] = data;
 8002828:	7008      	strb	r0, [r1, #0]
	HAL_StatusTypeDef x = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800282a:	0022      	movs	r2, r4
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	4803      	ldr	r0, [pc, #12]	; (800283c <SPI1SendByte+0x1c>)
 8002830:	3b09      	subs	r3, #9
 8002832:	f7fe fd7d 	bl	8001330 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8002836:	7820      	ldrb	r0, [r4, #0]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 8002838:	b004      	add	sp, #16
 800283a:	bd10      	pop	{r4, pc}
 800283c:	20000de0 	.word	0x20000de0

08002840 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8002840:	b570      	push	{r4, r5, r6, lr}
	cs_reset();
 8002842:	24a0      	movs	r4, #160	; 0xa0
void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8002844:	0006      	movs	r6, r0
 8002846:	000d      	movs	r5, r1
	cs_reset();
 8002848:	05e4      	lsls	r4, r4, #23
 800284a:	2200      	movs	r2, #0
 800284c:	2110      	movs	r1, #16
 800284e:	0020      	movs	r0, r4
 8002850:	f7fd ff30 	bl	80006b4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8002854:	0030      	movs	r0, r6
 8002856:	f7ff ffe3 	bl	8002820 <SPI1SendByte>
	SPI1SendByte(value);
 800285a:	0028      	movs	r0, r5
 800285c:	f7ff ffe0 	bl	8002820 <SPI1SendByte>
	cs_set();
 8002860:	2201      	movs	r2, #1
 8002862:	2110      	movs	r1, #16
 8002864:	0020      	movs	r0, r4
 8002866:	f7fd ff25 	bl	80006b4 <HAL_GPIO_WritePin>
}
 800286a:	bd70      	pop	{r4, r5, r6, pc}

0800286c <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800286c:	b570      	push	{r4, r5, r6, lr}
	uint8_t	val;

	cs_reset();
 800286e:	24a0      	movs	r4, #160	; 0xa0
uint8_t SPI1_ReadReg(uint8_t address) {
 8002870:	0005      	movs	r5, r0
	cs_reset();
 8002872:	05e4      	lsls	r4, r4, #23
 8002874:	2200      	movs	r2, #0
 8002876:	2110      	movs	r1, #16
 8002878:	0020      	movs	r0, r4
 800287a:	f7fd ff1b 	bl	80006b4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800287e:	0028      	movs	r0, r5
 8002880:	f7ff ffce 	bl	8002820 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7ff ffcb 	bl	8002820 <SPI1SendByte>
 800288a:	0005      	movs	r5, r0
	cs_set();
 800288c:	2201      	movs	r2, #1
 800288e:	0020      	movs	r0, r4
 8002890:	2110      	movs	r1, #16
 8002892:	f7fd ff0f 	bl	80006b4 <HAL_GPIO_WritePin>
	return val;
}
 8002896:	0028      	movs	r0, r5
 8002898:	bd70      	pop	{r4, r5, r6, pc}

0800289a <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 	SPI1_WriteReg(addr, val);
 800289a:	237e      	movs	r3, #126	; 0x7e
void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800289c:	b510      	push	{r4, lr}
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 800289e:	0040      	lsls	r0, r0, #1
 	SPI1_WriteReg(addr, val);
 80028a0:	4018      	ands	r0, r3
 80028a2:	f7ff ffcd 	bl	8002840 <SPI1_WriteReg>
}
 80028a6:	bd10      	pop	{r4, pc}

080028a8 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 80028a8:	237e      	movs	r3, #126	; 0x7e
uint8_t MFRC522_ReadRegister(uint8_t addr) {
 80028aa:	b510      	push	{r4, lr}
	addr = ((addr << 1) & 0x7E) | 0x80;
 80028ac:	0040      	lsls	r0, r0, #1
 80028ae:	4018      	ands	r0, r3
 80028b0:	3302      	adds	r3, #2
	val = SPI1_ReadReg(addr);
 80028b2:	4318      	orrs	r0, r3
 80028b4:	f7ff ffda 	bl	800286c <SPI1_ReadReg>
	return val;
}
 80028b8:	bd10      	pop	{r4, pc}

080028ba <MFRC522_Compare>:
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
	MFRC522_Halt();																					// Command card into hibernation
	return status;
}

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 80028ba:	2300      	movs	r3, #0
 80028bc:	b510      	push	{r4, lr}
	uint8_t i;
	for (i = 0; i < 5; i++) {
		if (CardID[i] != CompareID[i]) return MI_ERR;
 80028be:	5cc4      	ldrb	r4, [r0, r3]
 80028c0:	5cca      	ldrb	r2, [r1, r3]
 80028c2:	4294      	cmp	r4, r2
 80028c4:	d104      	bne.n	80028d0 <MFRC522_Compare+0x16>
 80028c6:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d1f8      	bne.n	80028be <MFRC522_Compare+0x4>
	}
	return MI_OK;
 80028cc:	2000      	movs	r0, #0
}
 80028ce:	bd10      	pop	{r4, pc}
		if (CardID[i] != CompareID[i]) return MI_ERR;
 80028d0:	2002      	movs	r0, #2
 80028d2:	e7fc      	b.n	80028ce <MFRC522_Compare+0x14>

080028d4 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	000d      	movs	r5, r1
 80028d8:	0004      	movs	r4, r0
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80028da:	f7ff ffe5 	bl	80028a8 <MFRC522_ReadRegister>
 80028de:	4328      	orrs	r0, r5
 80028e0:	b2c1      	uxtb	r1, r0
 80028e2:	0020      	movs	r0, r4
 80028e4:	f7ff ffd9 	bl	800289a <MFRC522_WriteRegister>
}
 80028e8:	bd70      	pop	{r4, r5, r6, pc}

080028ea <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80028ea:	b570      	push	{r4, r5, r6, lr}
 80028ec:	000d      	movs	r5, r1
 80028ee:	0004      	movs	r4, r0
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 80028f0:	f7ff ffda 	bl	80028a8 <MFRC522_ReadRegister>
 80028f4:	43a8      	bics	r0, r5
 80028f6:	b2c1      	uxtb	r1, r0
 80028f8:	0020      	movs	r0, r4
 80028fa:	f7ff ffce 	bl	800289a <MFRC522_WriteRegister>
}
 80028fe:	bd70      	pop	{r4, r5, r6, pc}

08002900 <MFRC522_ToCard>:
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
	return status;
}

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8002900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002902:	0007      	movs	r7, r0
 8002904:	000c      	movs	r4, r1
 8002906:	0016      	movs	r6, r2
 8002908:	9301      	str	r3, [sp, #4]
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800290a:	280c      	cmp	r0, #12
 800290c:	d03a      	beq.n	8002984 <MFRC522_ToCard+0x84>
 800290e:	280e      	cmp	r0, #14
 8002910:	d03c      	beq.n	800298c <MFRC522_ToCard+0x8c>
	uint8_t waitIRq = 0x00;
 8002912:	2300      	movs	r3, #0
	uint8_t irqEn = 0x00;
 8002914:	001d      	movs	r5, r3
	uint8_t waitIRq = 0x00;
 8002916:	9300      	str	r3, [sp, #0]
		}
		default:
		break;
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8002918:	2180      	movs	r1, #128	; 0x80
 	SPI1_WriteReg(addr, val);
 800291a:	2004      	movs	r0, #4
 800291c:	4329      	orrs	r1, r5
 800291e:	f7ff ff8f 	bl	8002840 <SPI1_WriteReg>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	2004      	movs	r0, #4
 8002926:	f7ff ffe0 	bl	80028ea <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800292a:	2180      	movs	r1, #128	; 0x80
 800292c:	200a      	movs	r0, #10
 800292e:	f7ff ffd1 	bl	80028d4 <MFRC522_SetBitMask>
 	SPI1_WriteReg(addr, val);
 8002932:	2100      	movs	r1, #0
 8002934:	2002      	movs	r0, #2
 8002936:	f7ff ff83 	bl	8002840 <SPI1_WriteReg>
 800293a:	19a6      	adds	r6, r4, r6
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800293c:	42a6      	cmp	r6, r4
 800293e:	d129      	bne.n	8002994 <MFRC522_ToCard+0x94>
 	SPI1_WriteReg(addr, val);
 8002940:	0039      	movs	r1, r7
 8002942:	2002      	movs	r0, #2
 8002944:	f7ff ff7c 	bl	8002840 <SPI1_WriteReg>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 8002948:	2f0c      	cmp	r7, #12
 800294a:	d103      	bne.n	8002954 <MFRC522_ToCard+0x54>
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	200d      	movs	r0, #13
 8002950:	f7ff ffc0 	bl	80028d4 <MFRC522_SetBitMask>
	uint8_t irqEn = 0x00;
 8002954:	24fa      	movs	r4, #250	; 0xfa
 8002956:	00e4      	lsls	r4, r4, #3
	val = SPI1_ReadReg(addr);
 8002958:	2088      	movs	r0, #136	; 0x88
 800295a:	f7ff ff87 	bl	800286c <SPI1_ReadReg>
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
		i--;
 800295e:	3c01      	subs	r4, #1
 8002960:	b2a4      	uxth	r4, r4
	val = SPI1_ReadReg(addr);
 8002962:	0006      	movs	r6, r0
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002964:	2c00      	cmp	r4, #0
 8002966:	d004      	beq.n	8002972 <MFRC522_ToCard+0x72>
 8002968:	2301      	movs	r3, #1
 800296a:	9a00      	ldr	r2, [sp, #0]
 800296c:	4313      	orrs	r3, r2
 800296e:	4203      	tst	r3, r0
 8002970:	d0f2      	beq.n	8002958 <MFRC522_ToCard+0x58>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	200d      	movs	r0, #13
 8002976:	f7ff ffb8 	bl	80028ea <MFRC522_ClearBitMask>

	if (i != 0)  {
 800297a:	2c00      	cmp	r4, #0
 800297c:	d110      	bne.n	80029a0 <MFRC522_ToCard+0xa0>
	uint8_t status = MI_ERR;
 800297e:	2602      	movs	r6, #2
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
			}
		} else status = MI_ERR;
	}
	return status;
}
 8002980:	0030      	movs	r0, r6
 8002982:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			waitIRq = 0x30;
 8002984:	2330      	movs	r3, #48	; 0x30
			irqEn = 0x77;
 8002986:	2577      	movs	r5, #119	; 0x77
			waitIRq = 0x30;
 8002988:	9300      	str	r3, [sp, #0]
			break;
 800298a:	e7c5      	b.n	8002918 <MFRC522_ToCard+0x18>
			waitIRq = 0x10;
 800298c:	2310      	movs	r3, #16
			irqEn = 0x12;
 800298e:	2512      	movs	r5, #18
			waitIRq = 0x10;
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	e7c1      	b.n	8002918 <MFRC522_ToCard+0x18>
 	SPI1_WriteReg(addr, val);
 8002994:	7821      	ldrb	r1, [r4, #0]
 8002996:	2012      	movs	r0, #18
 8002998:	f7ff ff52 	bl	8002840 <SPI1_WriteReg>
 800299c:	3401      	adds	r4, #1
 800299e:	e7cd      	b.n	800293c <MFRC522_ToCard+0x3c>
	val = SPI1_ReadReg(addr);
 80029a0:	208c      	movs	r0, #140	; 0x8c
 80029a2:	f7ff ff63 	bl	800286c <SPI1_ReadReg>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80029a6:	231b      	movs	r3, #27
 80029a8:	4218      	tst	r0, r3
 80029aa:	d1e8      	bne.n	800297e <MFRC522_ToCard+0x7e>
			status = MI_OK;
 80029ac:	3b1a      	subs	r3, #26
 80029ae:	402b      	ands	r3, r5
 80029b0:	401e      	ands	r6, r3
			if (command == PCD_TRANSCEIVE) {
 80029b2:	2f0c      	cmp	r7, #12
 80029b4:	d1e4      	bne.n	8002980 <MFRC522_ToCard+0x80>
	val = SPI1_ReadReg(addr);
 80029b6:	2094      	movs	r0, #148	; 0x94
 80029b8:	f7ff ff58 	bl	800286c <SPI1_ReadReg>
 80029bc:	0004      	movs	r4, r0
 80029be:	2098      	movs	r0, #152	; 0x98
 80029c0:	f7ff ff54 	bl	800286c <SPI1_ReadReg>
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80029c4:	2307      	movs	r3, #7
 80029c6:	4003      	ands	r3, r0
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 80029c8:	d017      	beq.n	80029fa <MFRC522_ToCard+0xfa>
 80029ca:	1e60      	subs	r0, r4, #1
 80029cc:	00c0      	lsls	r0, r0, #3
 80029ce:	18c0      	adds	r0, r0, r3
 80029d0:	9b08      	ldr	r3, [sp, #32]
 80029d2:	8018      	strh	r0, [r3, #0]
				if (n == 0) n = 1;
 80029d4:	2301      	movs	r3, #1
 80029d6:	2c00      	cmp	r4, #0
 80029d8:	d005      	beq.n	80029e6 <MFRC522_ToCard+0xe6>
 80029da:	1c23      	adds	r3, r4, #0
 80029dc:	b2e4      	uxtb	r4, r4
 80029de:	2c10      	cmp	r4, #16
 80029e0:	d900      	bls.n	80029e4 <MFRC522_ToCard+0xe4>
 80029e2:	2310      	movs	r3, #16
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	9d01      	ldr	r5, [sp, #4]
 80029e8:	18ec      	adds	r4, r5, r3
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 80029ea:	42ac      	cmp	r4, r5
 80029ec:	d0c8      	beq.n	8002980 <MFRC522_ToCard+0x80>
	val = SPI1_ReadReg(addr);
 80029ee:	2092      	movs	r0, #146	; 0x92
 80029f0:	f7ff ff3c 	bl	800286c <SPI1_ReadReg>
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 80029f4:	7028      	strb	r0, [r5, #0]
 80029f6:	3501      	adds	r5, #1
 80029f8:	e7f7      	b.n	80029ea <MFRC522_ToCard+0xea>
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 80029fa:	9a08      	ldr	r2, [sp, #32]
 80029fc:	00e3      	lsls	r3, r4, #3
 80029fe:	8013      	strh	r3, [r2, #0]
 8002a00:	e7e8      	b.n	80029d4 <MFRC522_ToCard+0xd4>

08002a02 <MFRC522_Request>:
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8002a02:	b530      	push	{r4, r5, lr}
 8002a04:	000c      	movs	r4, r1
 8002a06:	0005      	movs	r5, r0
 8002a08:	b085      	sub	sp, #20
 	SPI1_WriteReg(addr, val);
 8002a0a:	2107      	movs	r1, #7
 8002a0c:	201a      	movs	r0, #26
 8002a0e:	f7ff ff17 	bl	8002840 <SPI1_WriteReg>
	TagType[0] = reqMode;
 8002a12:	7025      	strb	r5, [r4, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002a14:	250e      	movs	r5, #14
 8002a16:	446d      	add	r5, sp
 8002a18:	9500      	str	r5, [sp, #0]
 8002a1a:	0023      	movs	r3, r4
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	0021      	movs	r1, r4
 8002a20:	200c      	movs	r0, #12
 8002a22:	f7ff ff6d 	bl	8002900 <MFRC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d104      	bne.n	8002a34 <MFRC522_Request+0x32>
 8002a2a:	882b      	ldrh	r3, [r5, #0]
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d101      	bne.n	8002a34 <MFRC522_Request+0x32>
}
 8002a30:	b005      	add	sp, #20
 8002a32:	bd30      	pop	{r4, r5, pc}
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8002a34:	2002      	movs	r0, #2
 8002a36:	e7fb      	b.n	8002a30 <MFRC522_Request+0x2e>

08002a38 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8002a38:	b530      	push	{r4, r5, lr}
 	SPI1_WriteReg(addr, val);
 8002a3a:	2100      	movs	r1, #0
uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8002a3c:	0004      	movs	r4, r0
 8002a3e:	b085      	sub	sp, #20
 	SPI1_WriteReg(addr, val);
 8002a40:	201a      	movs	r0, #26
 8002a42:	f7ff fefd 	bl	8002840 <SPI1_WriteReg>
	uint8_t i;
	uint8_t serNumCheck = 0;
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
	serNum[0] = PICC_ANTICOLL;
 8002a46:	2393      	movs	r3, #147	; 0x93
 8002a48:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20;
 8002a4a:	3b73      	subs	r3, #115	; 0x73
 8002a4c:	7063      	strb	r3, [r4, #1]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002a4e:	3b12      	subs	r3, #18
 8002a50:	446b      	add	r3, sp
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2202      	movs	r2, #2
 8002a56:	0023      	movs	r3, r4
 8002a58:	0021      	movs	r1, r4
 8002a5a:	200c      	movs	r0, #12
 8002a5c:	f7ff ff50 	bl	8002900 <MFRC522_ToCard>
	if (status == MI_OK) {
 8002a60:	2800      	cmp	r0, #0
 8002a62:	d10b      	bne.n	8002a7c <MFRC522_Anticoll+0x44>
 8002a64:	0023      	movs	r3, r4
 8002a66:	0002      	movs	r2, r0
 8002a68:	1d21      	adds	r1, r4, #4
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8002a6a:	781d      	ldrb	r5, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	406a      	eors	r2, r5
 8002a70:	428b      	cmp	r3, r1
 8002a72:	d1fa      	bne.n	8002a6a <MFRC522_Anticoll+0x32>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8002a74:	7923      	ldrb	r3, [r4, #4]
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d000      	beq.n	8002a7c <MFRC522_Anticoll+0x44>
 8002a7a:	2002      	movs	r0, #2
	}
	return status;
}
 8002a7c:	b005      	add	sp, #20
 8002a7e:	bd30      	pop	{r4, r5, pc}

08002a80 <MFRC522_Reset>:
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
	MFRC522_AntennaOn();																		// Open the antenna
}

void MFRC522_Reset(void) {
 8002a80:	b510      	push	{r4, lr}
 	SPI1_WriteReg(addr, val);
 8002a82:	210f      	movs	r1, #15
 8002a84:	2002      	movs	r0, #2
 8002a86:	f7ff fedb 	bl	8002840 <SPI1_WriteReg>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
}
 8002a8a:	bd10      	pop	{r4, pc}

08002a8c <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8002a8c:	b510      	push	{r4, lr}
	val = SPI1_ReadReg(addr);
 8002a8e:	20a8      	movs	r0, #168	; 0xa8
 8002a90:	f7ff feec 	bl	800286c <SPI1_ReadReg>
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8002a94:	2103      	movs	r1, #3
 8002a96:	4208      	tst	r0, r1
 8002a98:	d102      	bne.n	8002aa0 <MFRC522_AntennaOn+0x14>
 8002a9a:	2014      	movs	r0, #20
 8002a9c:	f7ff ff1a 	bl	80028d4 <MFRC522_SetBitMask>
}
 8002aa0:	bd10      	pop	{r4, pc}

08002aa2 <MFRC522_Init>:
void MFRC522_Init(void) {
 8002aa2:	b510      	push	{r4, lr}
	MFRC522_Reset();
 8002aa4:	f7ff ffec 	bl	8002a80 <MFRC522_Reset>
 	SPI1_WriteReg(addr, val);
 8002aa8:	218d      	movs	r1, #141	; 0x8d
 8002aaa:	2054      	movs	r0, #84	; 0x54
 8002aac:	f7ff fec8 	bl	8002840 <SPI1_WriteReg>
 8002ab0:	213e      	movs	r1, #62	; 0x3e
 8002ab2:	2056      	movs	r0, #86	; 0x56
 8002ab4:	f7ff fec4 	bl	8002840 <SPI1_WriteReg>
 8002ab8:	211e      	movs	r1, #30
 8002aba:	205a      	movs	r0, #90	; 0x5a
 8002abc:	f7ff fec0 	bl	8002840 <SPI1_WriteReg>
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2058      	movs	r0, #88	; 0x58
 8002ac4:	f7ff febc 	bl	8002840 <SPI1_WriteReg>
 8002ac8:	2170      	movs	r1, #112	; 0x70
 8002aca:	204c      	movs	r0, #76	; 0x4c
 8002acc:	f7ff feb8 	bl	8002840 <SPI1_WriteReg>
 8002ad0:	2140      	movs	r1, #64	; 0x40
 8002ad2:	202a      	movs	r0, #42	; 0x2a
 8002ad4:	f7ff feb4 	bl	8002840 <SPI1_WriteReg>
 8002ad8:	213d      	movs	r1, #61	; 0x3d
 8002ada:	2022      	movs	r0, #34	; 0x22
 8002adc:	f7ff feb0 	bl	8002840 <SPI1_WriteReg>
	MFRC522_AntennaOn();																		// Open the antenna
 8002ae0:	f7ff ffd4 	bl	8002a8c <MFRC522_AntennaOn>
}
 8002ae4:	bd10      	pop	{r4, pc}
	...

08002ae8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_MspInit+0x3c>)
{
 8002aec:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002af0:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af2:	430a      	orrs	r2, r1
 8002af4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002afa:	0552      	lsls	r2, r2, #21
 8002afc:	430a      	orrs	r2, r1
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002b00:	2200      	movs	r2, #0
 8002b02:	4240      	negs	r0, r0
 8002b04:	0011      	movs	r1, r2
 8002b06:	f7fd fcbd 	bl	8000484 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2103      	movs	r1, #3
 8002b10:	4240      	negs	r0, r0
 8002b12:	f7fd fcb7 	bl	8000484 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 8002b16:	2001      	movs	r0, #1
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2103      	movs	r1, #3
 8002b1c:	4240      	negs	r0, r0
 8002b1e:	f7fd fcb1 	bl	8000484 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b22:	bd10      	pop	{r4, pc}
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <HAL_SPI_MspInit+0x38>)
 8002b2c:	6802      	ldr	r2, [r0, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d113      	bne.n	8002b5a <HAL_SPI_MspInit+0x32>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <HAL_SPI_MspInit+0x3c>)
 8002b36:	015b      	lsls	r3, r3, #5
 8002b38:	6b51      	ldr	r1, [r2, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6353      	str	r3, [r2, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b40:	23e0      	movs	r3, #224	; 0xe0
 8002b42:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	3bde      	subs	r3, #222	; 0xde
 8002b46:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b48:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4c:	a901      	add	r1, sp, #4
 8002b4e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b54:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b56:	f7fd fcf7 	bl	8000548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b5a:	b007      	add	sp, #28
 8002b5c:	bd00      	pop	{pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	40013000 	.word	0x40013000
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <HAL_UART_MspInit+0x38>)
 8002b6c:	6802      	ldr	r2, [r0, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d114      	bne.n	8002b9c <HAL_UART_MspInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <HAL_UART_MspInit+0x3c>)
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	6b91      	ldr	r1, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7a:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6393      	str	r3, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b80:	230c      	movs	r3, #12
 8002b82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	3b0a      	subs	r3, #10
 8002b86:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8c:	3303      	adds	r3, #3
 8002b8e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b90:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002b92:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002b96:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f7fd fcd6 	bl	8000548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b9c:	b007      	add	sp, #28
 8002b9e:	bd00      	pop	{pc}
 8002ba0:	40004400 	.word	0x40004400
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba8:	b530      	push	{r4, r5, lr}
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002baa:	2501      	movs	r5, #1
{
 8002bac:	b087      	sub	sp, #28
 8002bae:	0001      	movs	r1, r0
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	200f      	movs	r0, #15
 8002bb4:	f7fd fc66 	bl	8000484 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8002bb8:	200f      	movs	r0, #15
 8002bba:	f7fd fc93 	bl	80004e4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_InitTick+0x60>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bc0:	4669      	mov	r1, sp
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc2:	6b93      	ldr	r3, [r2, #56]	; 0x38
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bc4:	a801      	add	r0, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc6:	432b      	orrs	r3, r5
 8002bc8:	6393      	str	r3, [r2, #56]	; 0x38
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bca:	f7fe f941 	bl	8000e50 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7fe f91f 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	4c0d      	ldr	r4, [pc, #52]	; (8002c0c <HAL_InitTick+0x64>)
 8002bd6:	05db      	lsls	r3, r3, #23
 8002bd8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_InitTick+0x68>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002bdc:	490d      	ldr	r1, [pc, #52]	; (8002c14 <HAL_InitTick+0x6c>)
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002bde:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002be0:	f7fd fa9c 	bl	800011c <__udivsi3>
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8002be4:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002be6:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8002be8:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002bea:	0020      	movs	r0, r4
  htim2.Init.ClockDivision = 0;
 8002bec:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bee:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002bf0:	f7fe fd43 	bl	800167a <HAL_TIM_Base_Init>
 8002bf4:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002bf6:	0028      	movs	r0, r5
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <HAL_InitTick+0x5a>
    return HAL_TIM_Base_Start_IT(&htim2);
 8002bfc:	0020      	movs	r0, r4
 8002bfe:	f7fe fd57 	bl	80016b0 <HAL_TIM_Base_Start_IT>
}
 8002c02:	b007      	add	sp, #28
 8002c04:	bd30      	pop	{r4, r5, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	20000ea8 	.word	0x20000ea8
 8002c10:	000003e7 	.word	0x000003e7
 8002c14:	000f4240 	.word	0x000f4240

08002c18 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c18:	4770      	bx	lr

08002c1a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002c1a:	e7fe      	b.n	8002c1a <HardFault_Handler>

08002c1c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8002c1e:	f7ff f820 	bl	8001c62 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c22:	bd10      	pop	{r4, pc}

08002c24 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8002c24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c26:	4802      	ldr	r0, [pc, #8]	; (8002c30 <TIM2_IRQHandler+0xc>)
 8002c28:	f7fe fd50 	bl	80016cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	20000ea8 	.word	0x20000ea8

08002c34 <_write>:
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	int i=0;
	for(i=0 ; i<len ; i++)
		//ITM_SendChar((*ptr++));
	return len;
 8002c34:	0010      	movs	r0, r2
}
 8002c36:	4770      	bx	lr

08002c38 <_sbrk>:
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 8002c38:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <_sbrk+0x2c>)
{
 8002c3a:	b510      	push	{r4, lr}
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <_sbrk+0x30>)
 8002c3e:	490b      	ldr	r1, [pc, #44]	; (8002c6c <_sbrk+0x34>)
  if (heap_end == 0)
 8002c40:	6814      	ldr	r4, [r2, #0]
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8002c42:	1859      	adds	r1, r3, r1
  if (heap_end == 0)
 8002c44:	2c00      	cmp	r4, #0
 8002c46:	d100      	bne.n	8002c4a <_sbrk+0x12>
    heap_end = &end;
 8002c48:	6013      	str	r3, [r2, #0]

  prev_heap_end = heap_end;
 8002c4a:	6813      	ldr	r3, [r2, #0]
  if (heap_end + incr > max_heap)
 8002c4c:	1818      	adds	r0, r3, r0
 8002c4e:	4281      	cmp	r1, r0
 8002c50:	d205      	bcs.n	8002c5e <_sbrk+0x26>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8002c52:	220c      	movs	r2, #12
    return (caddr_t) -1;
 8002c54:	2001      	movs	r0, #1
    errno = ENOMEM;
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <_sbrk+0x38>)
    return (caddr_t) -1;
 8002c58:	4240      	negs	r0, r0
    errno = ENOMEM;
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  heap_end += incr;

  return (caddr_t) prev_heap_end;
}
 8002c5c:	bd10      	pop	{r4, pc}
  heap_end += incr;
 8002c5e:	6010      	str	r0, [r2, #0]
  return (caddr_t) prev_heap_end;
 8002c60:	0018      	movs	r0, r3
 8002c62:	e7fb      	b.n	8002c5c <_sbrk+0x24>
 8002c64:	20000dcc 	.word	0x20000dcc
 8002c68:	20000ee4 	.word	0x20000ee4
 8002c6c:	00000200 	.word	0x00000200
 8002c70:	20000ee0 	.word	0x20000ee0

08002c74 <_close>:

int _close(int32_t file)
{
  return -1;
}
 8002c74:	2001      	movs	r0, #1
 8002c76:	4240      	negs	r0, r0
 8002c78:	4770      	bx	lr

08002c7a <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
  st->st_mode = S_IFCHR;
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	019b      	lsls	r3, r3, #6
  return 0;
}
 8002c7e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002c80:	604b      	str	r3, [r1, #4]
}
 8002c82:	4770      	bx	lr

08002c84 <_isatty>:

int _isatty(int32_t file)
{
  return 1;
}
 8002c84:	2001      	movs	r0, #1
 8002c86:	4770      	bx	lr

08002c88 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
  return 0;
}
 8002c88:	2000      	movs	r0, #0
 8002c8a:	4770      	bx	lr

08002c8c <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
  return 0;
}
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	4770      	bx	lr

08002c90 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002c90:	2280      	movs	r2, #128	; 0x80
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <SystemInit+0x44>)
 8002c94:	0052      	lsls	r2, r2, #1
 8002c96:	6819      	ldr	r1, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <SystemInit+0x48>)
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	490d      	ldr	r1, [pc, #52]	; (8002cdc <SystemInit+0x4c>)
 8002ca8:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002caa:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002cac:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	490a      	ldr	r1, [pc, #40]	; (8002ce0 <SystemInit+0x50>)
 8002cb8:	400a      	ands	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	4909      	ldr	r1, [pc, #36]	; (8002ce4 <SystemInit+0x54>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <SystemInit+0x58>)
 8002ccc:	0512      	lsls	r2, r2, #20
 8002cce:	609a      	str	r2, [r3, #8]
#endif
}
 8002cd0:	4770      	bx	lr
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	88ff400c 	.word	0x88ff400c
 8002cdc:	fef6fff6 	.word	0xfef6fff6
 8002ce0:	fffbffff 	.word	0xfffbffff
 8002ce4:	ff02ffff 	.word	0xff02ffff
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002cf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cf2:	e003      	b.n	8002cfc <LoopCopyDataInit>

08002cf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002cf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cfa:	3104      	adds	r1, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cfc:	480b      	ldr	r0, [pc, #44]	; (8002d2c <LoopForever+0xa>)
  ldr  r3, =_edata
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002d00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d04:	d3f6      	bcc.n	8002cf4 <CopyDataInit>
  ldr  r2, =_sbss
 8002d06:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002d08:	e002      	b.n	8002d10 <LoopFillZerobss>

08002d0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002d0a:	2300      	movs	r3, #0
  str  r3, [r2]
 8002d0c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d0e:	3204      	adds	r2, #4

08002d10 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <LoopForever+0x16>)
  cmp  r2, r3
 8002d12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d14:	d3f9      	bcc.n	8002d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d16:	f7ff ffbb 	bl	8002c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d1a:	f000 f811 	bl	8002d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d1e:	f7ff fce7 	bl	80026f0 <main>

08002d22 <LoopForever>:

LoopForever:
    b LoopForever
 8002d22:	e7fe      	b.n	8002d22 <LoopForever>
  ldr   r0, =_estack
 8002d24:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8002d28:	08003df8 	.word	0x08003df8
  ldr  r0, =_sdata
 8002d2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d30:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8002d34:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8002d38:	20000ee4 	.word	0x20000ee4

08002d3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d3c:	e7fe      	b.n	8002d3c <ADC1_COMP_IRQHandler>
	...

08002d40 <__libc_init_array>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	2600      	movs	r6, #0
 8002d44:	4d0c      	ldr	r5, [pc, #48]	; (8002d78 <__libc_init_array+0x38>)
 8002d46:	4c0d      	ldr	r4, [pc, #52]	; (8002d7c <__libc_init_array+0x3c>)
 8002d48:	1b64      	subs	r4, r4, r5
 8002d4a:	10a4      	asrs	r4, r4, #2
 8002d4c:	42a6      	cmp	r6, r4
 8002d4e:	d109      	bne.n	8002d64 <__libc_init_array+0x24>
 8002d50:	2600      	movs	r6, #0
 8002d52:	f000 ffbd 	bl	8003cd0 <_init>
 8002d56:	4d0a      	ldr	r5, [pc, #40]	; (8002d80 <__libc_init_array+0x40>)
 8002d58:	4c0a      	ldr	r4, [pc, #40]	; (8002d84 <__libc_init_array+0x44>)
 8002d5a:	1b64      	subs	r4, r4, r5
 8002d5c:	10a4      	asrs	r4, r4, #2
 8002d5e:	42a6      	cmp	r6, r4
 8002d60:	d105      	bne.n	8002d6e <__libc_init_array+0x2e>
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
 8002d64:	00b3      	lsls	r3, r6, #2
 8002d66:	58eb      	ldr	r3, [r5, r3]
 8002d68:	4798      	blx	r3
 8002d6a:	3601      	adds	r6, #1
 8002d6c:	e7ee      	b.n	8002d4c <__libc_init_array+0xc>
 8002d6e:	00b3      	lsls	r3, r6, #2
 8002d70:	58eb      	ldr	r3, [r5, r3]
 8002d72:	4798      	blx	r3
 8002d74:	3601      	adds	r6, #1
 8002d76:	e7f2      	b.n	8002d5e <__libc_init_array+0x1e>
 8002d78:	08003df0 	.word	0x08003df0
 8002d7c:	08003df0 	.word	0x08003df0
 8002d80:	08003df0 	.word	0x08003df0
 8002d84:	08003df4 	.word	0x08003df4

08002d88 <memset>:
 8002d88:	0003      	movs	r3, r0
 8002d8a:	1882      	adds	r2, r0, r2
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d100      	bne.n	8002d92 <memset+0xa>
 8002d90:	4770      	bx	lr
 8002d92:	7019      	strb	r1, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	e7f9      	b.n	8002d8c <memset+0x4>

08002d98 <iprintf>:
 8002d98:	b40f      	push	{r0, r1, r2, r3}
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <iprintf+0x30>)
 8002d9c:	b513      	push	{r0, r1, r4, lr}
 8002d9e:	681c      	ldr	r4, [r3, #0]
 8002da0:	2c00      	cmp	r4, #0
 8002da2:	d005      	beq.n	8002db0 <iprintf+0x18>
 8002da4:	69a3      	ldr	r3, [r4, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <iprintf+0x18>
 8002daa:	0020      	movs	r0, r4
 8002dac:	f000 fa3c 	bl	8003228 <__sinit>
 8002db0:	ab05      	add	r3, sp, #20
 8002db2:	9a04      	ldr	r2, [sp, #16]
 8002db4:	68a1      	ldr	r1, [r4, #8]
 8002db6:	0020      	movs	r0, r4
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	f000 fc07 	bl	80035cc <_vfiprintf_r>
 8002dbe:	bc16      	pop	{r1, r2, r4}
 8002dc0:	bc08      	pop	{r3}
 8002dc2:	b004      	add	sp, #16
 8002dc4:	4718      	bx	r3
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	20000008 	.word	0x20000008

08002dcc <_puts_r>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	0005      	movs	r5, r0
 8002dd0:	000e      	movs	r6, r1
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d004      	beq.n	8002de0 <_puts_r+0x14>
 8002dd6:	6983      	ldr	r3, [r0, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <_puts_r+0x14>
 8002ddc:	f000 fa24 	bl	8003228 <__sinit>
 8002de0:	69ab      	ldr	r3, [r5, #24]
 8002de2:	68ac      	ldr	r4, [r5, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <_puts_r+0x22>
 8002de8:	0028      	movs	r0, r5
 8002dea:	f000 fa1d 	bl	8003228 <__sinit>
 8002dee:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <_puts_r+0xb4>)
 8002df0:	429c      	cmp	r4, r3
 8002df2:	d10f      	bne.n	8002e14 <_puts_r+0x48>
 8002df4:	686c      	ldr	r4, [r5, #4]
 8002df6:	89a3      	ldrh	r3, [r4, #12]
 8002df8:	071b      	lsls	r3, r3, #28
 8002dfa:	d502      	bpl.n	8002e02 <_puts_r+0x36>
 8002dfc:	6923      	ldr	r3, [r4, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d120      	bne.n	8002e44 <_puts_r+0x78>
 8002e02:	0021      	movs	r1, r4
 8002e04:	0028      	movs	r0, r5
 8002e06:	f000 f8a1 	bl	8002f4c <__swsetup_r>
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d01a      	beq.n	8002e44 <_puts_r+0x78>
 8002e0e:	2001      	movs	r0, #1
 8002e10:	4240      	negs	r0, r0
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <_puts_r+0xb8>)
 8002e16:	429c      	cmp	r4, r3
 8002e18:	d101      	bne.n	8002e1e <_puts_r+0x52>
 8002e1a:	68ac      	ldr	r4, [r5, #8]
 8002e1c:	e7eb      	b.n	8002df6 <_puts_r+0x2a>
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <_puts_r+0xbc>)
 8002e20:	429c      	cmp	r4, r3
 8002e22:	d1e8      	bne.n	8002df6 <_puts_r+0x2a>
 8002e24:	68ec      	ldr	r4, [r5, #12]
 8002e26:	e7e6      	b.n	8002df6 <_puts_r+0x2a>
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	3601      	adds	r6, #1
 8002e2c:	60a3      	str	r3, [r4, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	da04      	bge.n	8002e3c <_puts_r+0x70>
 8002e32:	69a2      	ldr	r2, [r4, #24]
 8002e34:	4293      	cmp	r3, r2
 8002e36:	db16      	blt.n	8002e66 <_puts_r+0x9a>
 8002e38:	290a      	cmp	r1, #10
 8002e3a:	d014      	beq.n	8002e66 <_puts_r+0x9a>
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	6022      	str	r2, [r4, #0]
 8002e42:	7019      	strb	r1, [r3, #0]
 8002e44:	7831      	ldrb	r1, [r6, #0]
 8002e46:	68a3      	ldr	r3, [r4, #8]
 8002e48:	2900      	cmp	r1, #0
 8002e4a:	d1ed      	bne.n	8002e28 <_puts_r+0x5c>
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	60a3      	str	r3, [r4, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da0f      	bge.n	8002e74 <_puts_r+0xa8>
 8002e54:	0022      	movs	r2, r4
 8002e56:	310a      	adds	r1, #10
 8002e58:	0028      	movs	r0, r5
 8002e5a:	f000 f821 	bl	8002ea0 <__swbuf_r>
 8002e5e:	1c43      	adds	r3, r0, #1
 8002e60:	d0d5      	beq.n	8002e0e <_puts_r+0x42>
 8002e62:	200a      	movs	r0, #10
 8002e64:	e7d5      	b.n	8002e12 <_puts_r+0x46>
 8002e66:	0022      	movs	r2, r4
 8002e68:	0028      	movs	r0, r5
 8002e6a:	f000 f819 	bl	8002ea0 <__swbuf_r>
 8002e6e:	1c43      	adds	r3, r0, #1
 8002e70:	d1e8      	bne.n	8002e44 <_puts_r+0x78>
 8002e72:	e7cc      	b.n	8002e0e <_puts_r+0x42>
 8002e74:	200a      	movs	r0, #10
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	6022      	str	r2, [r4, #0]
 8002e7c:	7018      	strb	r0, [r3, #0]
 8002e7e:	e7c8      	b.n	8002e12 <_puts_r+0x46>
 8002e80:	08003d70 	.word	0x08003d70
 8002e84:	08003d90 	.word	0x08003d90
 8002e88:	08003d50 	.word	0x08003d50

08002e8c <puts>:
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <puts+0x10>)
 8002e90:	0001      	movs	r1, r0
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	f7ff ff9a 	bl	8002dcc <_puts_r>
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	20000008 	.word	0x20000008

08002ea0 <__swbuf_r>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	0005      	movs	r5, r0
 8002ea4:	000e      	movs	r6, r1
 8002ea6:	0014      	movs	r4, r2
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d004      	beq.n	8002eb6 <__swbuf_r+0x16>
 8002eac:	6983      	ldr	r3, [r0, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <__swbuf_r+0x16>
 8002eb2:	f000 f9b9 	bl	8003228 <__sinit>
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <__swbuf_r+0xa0>)
 8002eb8:	429c      	cmp	r4, r3
 8002eba:	d12d      	bne.n	8002f18 <__swbuf_r+0x78>
 8002ebc:	686c      	ldr	r4, [r5, #4]
 8002ebe:	69a3      	ldr	r3, [r4, #24]
 8002ec0:	60a3      	str	r3, [r4, #8]
 8002ec2:	89a3      	ldrh	r3, [r4, #12]
 8002ec4:	071b      	lsls	r3, r3, #28
 8002ec6:	d531      	bpl.n	8002f2c <__swbuf_r+0x8c>
 8002ec8:	6923      	ldr	r3, [r4, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d02e      	beq.n	8002f2c <__swbuf_r+0x8c>
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	6922      	ldr	r2, [r4, #16]
 8002ed2:	b2f7      	uxtb	r7, r6
 8002ed4:	1a98      	subs	r0, r3, r2
 8002ed6:	6963      	ldr	r3, [r4, #20]
 8002ed8:	b2f6      	uxtb	r6, r6
 8002eda:	4298      	cmp	r0, r3
 8002edc:	db05      	blt.n	8002eea <__swbuf_r+0x4a>
 8002ede:	0021      	movs	r1, r4
 8002ee0:	0028      	movs	r0, r5
 8002ee2:	f000 f933 	bl	800314c <_fflush_r>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d126      	bne.n	8002f38 <__swbuf_r+0x98>
 8002eea:	68a3      	ldr	r3, [r4, #8]
 8002eec:	3001      	adds	r0, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	60a3      	str	r3, [r4, #8]
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	6022      	str	r2, [r4, #0]
 8002ef8:	701f      	strb	r7, [r3, #0]
 8002efa:	6963      	ldr	r3, [r4, #20]
 8002efc:	4298      	cmp	r0, r3
 8002efe:	d004      	beq.n	8002f0a <__swbuf_r+0x6a>
 8002f00:	89a3      	ldrh	r3, [r4, #12]
 8002f02:	07db      	lsls	r3, r3, #31
 8002f04:	d51a      	bpl.n	8002f3c <__swbuf_r+0x9c>
 8002f06:	2e0a      	cmp	r6, #10
 8002f08:	d118      	bne.n	8002f3c <__swbuf_r+0x9c>
 8002f0a:	0021      	movs	r1, r4
 8002f0c:	0028      	movs	r0, r5
 8002f0e:	f000 f91d 	bl	800314c <_fflush_r>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d012      	beq.n	8002f3c <__swbuf_r+0x9c>
 8002f16:	e00f      	b.n	8002f38 <__swbuf_r+0x98>
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <__swbuf_r+0xa4>)
 8002f1a:	429c      	cmp	r4, r3
 8002f1c:	d101      	bne.n	8002f22 <__swbuf_r+0x82>
 8002f1e:	68ac      	ldr	r4, [r5, #8]
 8002f20:	e7cd      	b.n	8002ebe <__swbuf_r+0x1e>
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <__swbuf_r+0xa8>)
 8002f24:	429c      	cmp	r4, r3
 8002f26:	d1ca      	bne.n	8002ebe <__swbuf_r+0x1e>
 8002f28:	68ec      	ldr	r4, [r5, #12]
 8002f2a:	e7c8      	b.n	8002ebe <__swbuf_r+0x1e>
 8002f2c:	0021      	movs	r1, r4
 8002f2e:	0028      	movs	r0, r5
 8002f30:	f000 f80c 	bl	8002f4c <__swsetup_r>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d0ca      	beq.n	8002ece <__swbuf_r+0x2e>
 8002f38:	2601      	movs	r6, #1
 8002f3a:	4276      	negs	r6, r6
 8002f3c:	0030      	movs	r0, r6
 8002f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f40:	08003d70 	.word	0x08003d70
 8002f44:	08003d90 	.word	0x08003d90
 8002f48:	08003d50 	.word	0x08003d50

08002f4c <__swsetup_r>:
 8002f4c:	4b36      	ldr	r3, [pc, #216]	; (8003028 <__swsetup_r+0xdc>)
 8002f4e:	b570      	push	{r4, r5, r6, lr}
 8002f50:	681d      	ldr	r5, [r3, #0]
 8002f52:	0006      	movs	r6, r0
 8002f54:	000c      	movs	r4, r1
 8002f56:	2d00      	cmp	r5, #0
 8002f58:	d005      	beq.n	8002f66 <__swsetup_r+0x1a>
 8002f5a:	69ab      	ldr	r3, [r5, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <__swsetup_r+0x1a>
 8002f60:	0028      	movs	r0, r5
 8002f62:	f000 f961 	bl	8003228 <__sinit>
 8002f66:	4b31      	ldr	r3, [pc, #196]	; (800302c <__swsetup_r+0xe0>)
 8002f68:	429c      	cmp	r4, r3
 8002f6a:	d10f      	bne.n	8002f8c <__swsetup_r+0x40>
 8002f6c:	686c      	ldr	r4, [r5, #4]
 8002f6e:	230c      	movs	r3, #12
 8002f70:	5ee2      	ldrsh	r2, [r4, r3]
 8002f72:	b293      	uxth	r3, r2
 8002f74:	0719      	lsls	r1, r3, #28
 8002f76:	d42d      	bmi.n	8002fd4 <__swsetup_r+0x88>
 8002f78:	06d9      	lsls	r1, r3, #27
 8002f7a:	d411      	bmi.n	8002fa0 <__swsetup_r+0x54>
 8002f7c:	2309      	movs	r3, #9
 8002f7e:	2001      	movs	r0, #1
 8002f80:	6033      	str	r3, [r6, #0]
 8002f82:	3337      	adds	r3, #55	; 0x37
 8002f84:	4313      	orrs	r3, r2
 8002f86:	81a3      	strh	r3, [r4, #12]
 8002f88:	4240      	negs	r0, r0
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
 8002f8c:	4b28      	ldr	r3, [pc, #160]	; (8003030 <__swsetup_r+0xe4>)
 8002f8e:	429c      	cmp	r4, r3
 8002f90:	d101      	bne.n	8002f96 <__swsetup_r+0x4a>
 8002f92:	68ac      	ldr	r4, [r5, #8]
 8002f94:	e7eb      	b.n	8002f6e <__swsetup_r+0x22>
 8002f96:	4b27      	ldr	r3, [pc, #156]	; (8003034 <__swsetup_r+0xe8>)
 8002f98:	429c      	cmp	r4, r3
 8002f9a:	d1e8      	bne.n	8002f6e <__swsetup_r+0x22>
 8002f9c:	68ec      	ldr	r4, [r5, #12]
 8002f9e:	e7e6      	b.n	8002f6e <__swsetup_r+0x22>
 8002fa0:	075b      	lsls	r3, r3, #29
 8002fa2:	d513      	bpl.n	8002fcc <__swsetup_r+0x80>
 8002fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fa6:	2900      	cmp	r1, #0
 8002fa8:	d008      	beq.n	8002fbc <__swsetup_r+0x70>
 8002faa:	0023      	movs	r3, r4
 8002fac:	3344      	adds	r3, #68	; 0x44
 8002fae:	4299      	cmp	r1, r3
 8002fb0:	d002      	beq.n	8002fb8 <__swsetup_r+0x6c>
 8002fb2:	0030      	movs	r0, r6
 8002fb4:	f000 fa3a 	bl	800342c <_free_r>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6363      	str	r3, [r4, #52]	; 0x34
 8002fbc:	2224      	movs	r2, #36	; 0x24
 8002fbe:	89a3      	ldrh	r3, [r4, #12]
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	81a3      	strh	r3, [r4, #12]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6063      	str	r3, [r4, #4]
 8002fc8:	6923      	ldr	r3, [r4, #16]
 8002fca:	6023      	str	r3, [r4, #0]
 8002fcc:	2308      	movs	r3, #8
 8002fce:	89a2      	ldrh	r2, [r4, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	81a3      	strh	r3, [r4, #12]
 8002fd4:	6923      	ldr	r3, [r4, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <__swsetup_r+0xa6>
 8002fda:	21a0      	movs	r1, #160	; 0xa0
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	0089      	lsls	r1, r1, #2
 8002fe2:	0092      	lsls	r2, r2, #2
 8002fe4:	400b      	ands	r3, r1
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <__swsetup_r+0xa6>
 8002fea:	0021      	movs	r1, r4
 8002fec:	0030      	movs	r0, r6
 8002fee:	f000 f9d9 	bl	80033a4 <__smakebuf_r>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	89a2      	ldrh	r2, [r4, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d011      	beq.n	800301e <__swsetup_r+0xd2>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60a3      	str	r3, [r4, #8]
 8002ffe:	6963      	ldr	r3, [r4, #20]
 8003000:	425b      	negs	r3, r3
 8003002:	61a3      	str	r3, [r4, #24]
 8003004:	2000      	movs	r0, #0
 8003006:	6923      	ldr	r3, [r4, #16]
 8003008:	4283      	cmp	r3, r0
 800300a:	d1be      	bne.n	8002f8a <__swsetup_r+0x3e>
 800300c:	230c      	movs	r3, #12
 800300e:	5ee2      	ldrsh	r2, [r4, r3]
 8003010:	0613      	lsls	r3, r2, #24
 8003012:	d5ba      	bpl.n	8002f8a <__swsetup_r+0x3e>
 8003014:	2340      	movs	r3, #64	; 0x40
 8003016:	4313      	orrs	r3, r2
 8003018:	81a3      	strh	r3, [r4, #12]
 800301a:	3801      	subs	r0, #1
 800301c:	e7b5      	b.n	8002f8a <__swsetup_r+0x3e>
 800301e:	0792      	lsls	r2, r2, #30
 8003020:	d400      	bmi.n	8003024 <__swsetup_r+0xd8>
 8003022:	6963      	ldr	r3, [r4, #20]
 8003024:	60a3      	str	r3, [r4, #8]
 8003026:	e7ed      	b.n	8003004 <__swsetup_r+0xb8>
 8003028:	20000008 	.word	0x20000008
 800302c:	08003d70 	.word	0x08003d70
 8003030:	08003d90 	.word	0x08003d90
 8003034:	08003d50 	.word	0x08003d50

08003038 <__sflush_r>:
 8003038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800303a:	898a      	ldrh	r2, [r1, #12]
 800303c:	0005      	movs	r5, r0
 800303e:	000c      	movs	r4, r1
 8003040:	0713      	lsls	r3, r2, #28
 8003042:	d460      	bmi.n	8003106 <__sflush_r+0xce>
 8003044:	684b      	ldr	r3, [r1, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	dc04      	bgt.n	8003054 <__sflush_r+0x1c>
 800304a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800304c:	2b00      	cmp	r3, #0
 800304e:	dc01      	bgt.n	8003054 <__sflush_r+0x1c>
 8003050:	2000      	movs	r0, #0
 8003052:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003054:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003056:	2f00      	cmp	r7, #0
 8003058:	d0fa      	beq.n	8003050 <__sflush_r+0x18>
 800305a:	2300      	movs	r3, #0
 800305c:	682e      	ldr	r6, [r5, #0]
 800305e:	602b      	str	r3, [r5, #0]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	401a      	ands	r2, r3
 8003066:	d034      	beq.n	80030d2 <__sflush_r+0x9a>
 8003068:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800306a:	89a3      	ldrh	r3, [r4, #12]
 800306c:	075b      	lsls	r3, r3, #29
 800306e:	d506      	bpl.n	800307e <__sflush_r+0x46>
 8003070:	6863      	ldr	r3, [r4, #4]
 8003072:	1ac0      	subs	r0, r0, r3
 8003074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <__sflush_r+0x46>
 800307a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800307c:	1ac0      	subs	r0, r0, r3
 800307e:	0002      	movs	r2, r0
 8003080:	6a21      	ldr	r1, [r4, #32]
 8003082:	2300      	movs	r3, #0
 8003084:	0028      	movs	r0, r5
 8003086:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003088:	47b8      	blx	r7
 800308a:	89a1      	ldrh	r1, [r4, #12]
 800308c:	1c43      	adds	r3, r0, #1
 800308e:	d106      	bne.n	800309e <__sflush_r+0x66>
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	2b1d      	cmp	r3, #29
 8003094:	d831      	bhi.n	80030fa <__sflush_r+0xc2>
 8003096:	4a2c      	ldr	r2, [pc, #176]	; (8003148 <__sflush_r+0x110>)
 8003098:	40da      	lsrs	r2, r3
 800309a:	07d3      	lsls	r3, r2, #31
 800309c:	d52d      	bpl.n	80030fa <__sflush_r+0xc2>
 800309e:	2300      	movs	r3, #0
 80030a0:	6063      	str	r3, [r4, #4]
 80030a2:	6923      	ldr	r3, [r4, #16]
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	04cb      	lsls	r3, r1, #19
 80030a8:	d505      	bpl.n	80030b6 <__sflush_r+0x7e>
 80030aa:	1c43      	adds	r3, r0, #1
 80030ac:	d102      	bne.n	80030b4 <__sflush_r+0x7c>
 80030ae:	682b      	ldr	r3, [r5, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d100      	bne.n	80030b6 <__sflush_r+0x7e>
 80030b4:	6560      	str	r0, [r4, #84]	; 0x54
 80030b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030b8:	602e      	str	r6, [r5, #0]
 80030ba:	2900      	cmp	r1, #0
 80030bc:	d0c8      	beq.n	8003050 <__sflush_r+0x18>
 80030be:	0023      	movs	r3, r4
 80030c0:	3344      	adds	r3, #68	; 0x44
 80030c2:	4299      	cmp	r1, r3
 80030c4:	d002      	beq.n	80030cc <__sflush_r+0x94>
 80030c6:	0028      	movs	r0, r5
 80030c8:	f000 f9b0 	bl	800342c <_free_r>
 80030cc:	2000      	movs	r0, #0
 80030ce:	6360      	str	r0, [r4, #52]	; 0x34
 80030d0:	e7bf      	b.n	8003052 <__sflush_r+0x1a>
 80030d2:	2301      	movs	r3, #1
 80030d4:	6a21      	ldr	r1, [r4, #32]
 80030d6:	0028      	movs	r0, r5
 80030d8:	47b8      	blx	r7
 80030da:	1c43      	adds	r3, r0, #1
 80030dc:	d1c5      	bne.n	800306a <__sflush_r+0x32>
 80030de:	682b      	ldr	r3, [r5, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0c2      	beq.n	800306a <__sflush_r+0x32>
 80030e4:	2b1d      	cmp	r3, #29
 80030e6:	d001      	beq.n	80030ec <__sflush_r+0xb4>
 80030e8:	2b16      	cmp	r3, #22
 80030ea:	d101      	bne.n	80030f0 <__sflush_r+0xb8>
 80030ec:	602e      	str	r6, [r5, #0]
 80030ee:	e7af      	b.n	8003050 <__sflush_r+0x18>
 80030f0:	2340      	movs	r3, #64	; 0x40
 80030f2:	89a2      	ldrh	r2, [r4, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	81a3      	strh	r3, [r4, #12]
 80030f8:	e7ab      	b.n	8003052 <__sflush_r+0x1a>
 80030fa:	2340      	movs	r3, #64	; 0x40
 80030fc:	430b      	orrs	r3, r1
 80030fe:	2001      	movs	r0, #1
 8003100:	81a3      	strh	r3, [r4, #12]
 8003102:	4240      	negs	r0, r0
 8003104:	e7a5      	b.n	8003052 <__sflush_r+0x1a>
 8003106:	690f      	ldr	r7, [r1, #16]
 8003108:	2f00      	cmp	r7, #0
 800310a:	d0a1      	beq.n	8003050 <__sflush_r+0x18>
 800310c:	680b      	ldr	r3, [r1, #0]
 800310e:	600f      	str	r7, [r1, #0]
 8003110:	1bdb      	subs	r3, r3, r7
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	2300      	movs	r3, #0
 8003116:	0792      	lsls	r2, r2, #30
 8003118:	d100      	bne.n	800311c <__sflush_r+0xe4>
 800311a:	694b      	ldr	r3, [r1, #20]
 800311c:	60a3      	str	r3, [r4, #8]
 800311e:	9b01      	ldr	r3, [sp, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	dc00      	bgt.n	8003126 <__sflush_r+0xee>
 8003124:	e794      	b.n	8003050 <__sflush_r+0x18>
 8003126:	9b01      	ldr	r3, [sp, #4]
 8003128:	003a      	movs	r2, r7
 800312a:	6a21      	ldr	r1, [r4, #32]
 800312c:	0028      	movs	r0, r5
 800312e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003130:	47b0      	blx	r6
 8003132:	2800      	cmp	r0, #0
 8003134:	dc03      	bgt.n	800313e <__sflush_r+0x106>
 8003136:	2340      	movs	r3, #64	; 0x40
 8003138:	89a2      	ldrh	r2, [r4, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	e7df      	b.n	80030fe <__sflush_r+0xc6>
 800313e:	9b01      	ldr	r3, [sp, #4]
 8003140:	183f      	adds	r7, r7, r0
 8003142:	1a1b      	subs	r3, r3, r0
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	e7ea      	b.n	800311e <__sflush_r+0xe6>
 8003148:	20400001 	.word	0x20400001

0800314c <_fflush_r>:
 800314c:	690b      	ldr	r3, [r1, #16]
 800314e:	b570      	push	{r4, r5, r6, lr}
 8003150:	0005      	movs	r5, r0
 8003152:	000c      	movs	r4, r1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <_fflush_r+0x10>
 8003158:	2000      	movs	r0, #0
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	2800      	cmp	r0, #0
 800315e:	d004      	beq.n	800316a <_fflush_r+0x1e>
 8003160:	6983      	ldr	r3, [r0, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <_fflush_r+0x1e>
 8003166:	f000 f85f 	bl	8003228 <__sinit>
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <_fflush_r+0x4c>)
 800316c:	429c      	cmp	r4, r3
 800316e:	d109      	bne.n	8003184 <_fflush_r+0x38>
 8003170:	686c      	ldr	r4, [r5, #4]
 8003172:	220c      	movs	r2, #12
 8003174:	5ea3      	ldrsh	r3, [r4, r2]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ee      	beq.n	8003158 <_fflush_r+0xc>
 800317a:	0021      	movs	r1, r4
 800317c:	0028      	movs	r0, r5
 800317e:	f7ff ff5b 	bl	8003038 <__sflush_r>
 8003182:	e7ea      	b.n	800315a <_fflush_r+0xe>
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <_fflush_r+0x50>)
 8003186:	429c      	cmp	r4, r3
 8003188:	d101      	bne.n	800318e <_fflush_r+0x42>
 800318a:	68ac      	ldr	r4, [r5, #8]
 800318c:	e7f1      	b.n	8003172 <_fflush_r+0x26>
 800318e:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <_fflush_r+0x54>)
 8003190:	429c      	cmp	r4, r3
 8003192:	d1ee      	bne.n	8003172 <_fflush_r+0x26>
 8003194:	68ec      	ldr	r4, [r5, #12]
 8003196:	e7ec      	b.n	8003172 <_fflush_r+0x26>
 8003198:	08003d70 	.word	0x08003d70
 800319c:	08003d90 	.word	0x08003d90
 80031a0:	08003d50 	.word	0x08003d50

080031a4 <_cleanup_r>:
 80031a4:	b510      	push	{r4, lr}
 80031a6:	4902      	ldr	r1, [pc, #8]	; (80031b0 <_cleanup_r+0xc>)
 80031a8:	f000 f8b2 	bl	8003310 <_fwalk_reent>
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	0800314d 	.word	0x0800314d

080031b4 <std.isra.0>:
 80031b4:	2300      	movs	r3, #0
 80031b6:	b510      	push	{r4, lr}
 80031b8:	0004      	movs	r4, r0
 80031ba:	6003      	str	r3, [r0, #0]
 80031bc:	6043      	str	r3, [r0, #4]
 80031be:	6083      	str	r3, [r0, #8]
 80031c0:	8181      	strh	r1, [r0, #12]
 80031c2:	6643      	str	r3, [r0, #100]	; 0x64
 80031c4:	81c2      	strh	r2, [r0, #14]
 80031c6:	6103      	str	r3, [r0, #16]
 80031c8:	6143      	str	r3, [r0, #20]
 80031ca:	6183      	str	r3, [r0, #24]
 80031cc:	0019      	movs	r1, r3
 80031ce:	2208      	movs	r2, #8
 80031d0:	305c      	adds	r0, #92	; 0x5c
 80031d2:	f7ff fdd9 	bl	8002d88 <memset>
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <std.isra.0+0x38>)
 80031d8:	6224      	str	r4, [r4, #32]
 80031da:	6263      	str	r3, [r4, #36]	; 0x24
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <std.isra.0+0x3c>)
 80031de:	62a3      	str	r3, [r4, #40]	; 0x28
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <std.isra.0+0x40>)
 80031e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <std.isra.0+0x44>)
 80031e6:	6323      	str	r3, [r4, #48]	; 0x30
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	08003b39 	.word	0x08003b39
 80031f0:	08003b61 	.word	0x08003b61
 80031f4:	08003b99 	.word	0x08003b99
 80031f8:	08003bc5 	.word	0x08003bc5

080031fc <__sfmoreglue>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	2568      	movs	r5, #104	; 0x68
 8003200:	1e4a      	subs	r2, r1, #1
 8003202:	4355      	muls	r5, r2
 8003204:	000e      	movs	r6, r1
 8003206:	0029      	movs	r1, r5
 8003208:	3174      	adds	r1, #116	; 0x74
 800320a:	f000 f959 	bl	80034c0 <_malloc_r>
 800320e:	1e04      	subs	r4, r0, #0
 8003210:	d008      	beq.n	8003224 <__sfmoreglue+0x28>
 8003212:	2100      	movs	r1, #0
 8003214:	002a      	movs	r2, r5
 8003216:	6001      	str	r1, [r0, #0]
 8003218:	6046      	str	r6, [r0, #4]
 800321a:	300c      	adds	r0, #12
 800321c:	60a0      	str	r0, [r4, #8]
 800321e:	3268      	adds	r2, #104	; 0x68
 8003220:	f7ff fdb2 	bl	8002d88 <memset>
 8003224:	0020      	movs	r0, r4
 8003226:	bd70      	pop	{r4, r5, r6, pc}

08003228 <__sinit>:
 8003228:	6983      	ldr	r3, [r0, #24]
 800322a:	b513      	push	{r0, r1, r4, lr}
 800322c:	0004      	movs	r4, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d128      	bne.n	8003284 <__sinit+0x5c>
 8003232:	6483      	str	r3, [r0, #72]	; 0x48
 8003234:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003236:	6503      	str	r3, [r0, #80]	; 0x50
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <__sinit+0x60>)
 800323a:	4a14      	ldr	r2, [pc, #80]	; (800328c <__sinit+0x64>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6282      	str	r2, [r0, #40]	; 0x28
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	4298      	cmp	r0, r3
 8003244:	d101      	bne.n	800324a <__sinit+0x22>
 8003246:	2301      	movs	r3, #1
 8003248:	6183      	str	r3, [r0, #24]
 800324a:	0020      	movs	r0, r4
 800324c:	f000 f820 	bl	8003290 <__sfp>
 8003250:	6060      	str	r0, [r4, #4]
 8003252:	0020      	movs	r0, r4
 8003254:	f000 f81c 	bl	8003290 <__sfp>
 8003258:	60a0      	str	r0, [r4, #8]
 800325a:	0020      	movs	r0, r4
 800325c:	f000 f818 	bl	8003290 <__sfp>
 8003260:	2200      	movs	r2, #0
 8003262:	60e0      	str	r0, [r4, #12]
 8003264:	2104      	movs	r1, #4
 8003266:	6860      	ldr	r0, [r4, #4]
 8003268:	f7ff ffa4 	bl	80031b4 <std.isra.0>
 800326c:	2201      	movs	r2, #1
 800326e:	2109      	movs	r1, #9
 8003270:	68a0      	ldr	r0, [r4, #8]
 8003272:	f7ff ff9f 	bl	80031b4 <std.isra.0>
 8003276:	2202      	movs	r2, #2
 8003278:	2112      	movs	r1, #18
 800327a:	68e0      	ldr	r0, [r4, #12]
 800327c:	f7ff ff9a 	bl	80031b4 <std.isra.0>
 8003280:	2301      	movs	r3, #1
 8003282:	61a3      	str	r3, [r4, #24]
 8003284:	bd13      	pop	{r0, r1, r4, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	08003db0 	.word	0x08003db0
 800328c:	080031a5 	.word	0x080031a5

08003290 <__sfp>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	4b1e      	ldr	r3, [pc, #120]	; (800330c <__sfp+0x7c>)
 8003294:	0007      	movs	r7, r0
 8003296:	681e      	ldr	r6, [r3, #0]
 8003298:	69b3      	ldr	r3, [r6, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <__sfp+0x14>
 800329e:	0030      	movs	r0, r6
 80032a0:	f7ff ffc2 	bl	8003228 <__sinit>
 80032a4:	3648      	adds	r6, #72	; 0x48
 80032a6:	68b4      	ldr	r4, [r6, #8]
 80032a8:	6873      	ldr	r3, [r6, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	d504      	bpl.n	80032b8 <__sfp+0x28>
 80032ae:	6833      	ldr	r3, [r6, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <__sfp+0x34>
 80032b4:	6836      	ldr	r6, [r6, #0]
 80032b6:	e7f6      	b.n	80032a6 <__sfp+0x16>
 80032b8:	220c      	movs	r2, #12
 80032ba:	5ea5      	ldrsh	r5, [r4, r2]
 80032bc:	2d00      	cmp	r5, #0
 80032be:	d00d      	beq.n	80032dc <__sfp+0x4c>
 80032c0:	3468      	adds	r4, #104	; 0x68
 80032c2:	e7f2      	b.n	80032aa <__sfp+0x1a>
 80032c4:	2104      	movs	r1, #4
 80032c6:	0038      	movs	r0, r7
 80032c8:	f7ff ff98 	bl	80031fc <__sfmoreglue>
 80032cc:	6030      	str	r0, [r6, #0]
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d1f0      	bne.n	80032b4 <__sfp+0x24>
 80032d2:	230c      	movs	r3, #12
 80032d4:	0004      	movs	r4, r0
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	0020      	movs	r0, r4
 80032da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032dc:	2301      	movs	r3, #1
 80032de:	0020      	movs	r0, r4
 80032e0:	425b      	negs	r3, r3
 80032e2:	81e3      	strh	r3, [r4, #14]
 80032e4:	3302      	adds	r3, #2
 80032e6:	81a3      	strh	r3, [r4, #12]
 80032e8:	6665      	str	r5, [r4, #100]	; 0x64
 80032ea:	6025      	str	r5, [r4, #0]
 80032ec:	60a5      	str	r5, [r4, #8]
 80032ee:	6065      	str	r5, [r4, #4]
 80032f0:	6125      	str	r5, [r4, #16]
 80032f2:	6165      	str	r5, [r4, #20]
 80032f4:	61a5      	str	r5, [r4, #24]
 80032f6:	2208      	movs	r2, #8
 80032f8:	0029      	movs	r1, r5
 80032fa:	305c      	adds	r0, #92	; 0x5c
 80032fc:	f7ff fd44 	bl	8002d88 <memset>
 8003300:	6365      	str	r5, [r4, #52]	; 0x34
 8003302:	63a5      	str	r5, [r4, #56]	; 0x38
 8003304:	64a5      	str	r5, [r4, #72]	; 0x48
 8003306:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003308:	e7e6      	b.n	80032d8 <__sfp+0x48>
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	08003db0 	.word	0x08003db0

08003310 <_fwalk_reent>:
 8003310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003312:	0004      	movs	r4, r0
 8003314:	0007      	movs	r7, r0
 8003316:	2600      	movs	r6, #0
 8003318:	9101      	str	r1, [sp, #4]
 800331a:	3448      	adds	r4, #72	; 0x48
 800331c:	2c00      	cmp	r4, #0
 800331e:	d101      	bne.n	8003324 <_fwalk_reent+0x14>
 8003320:	0030      	movs	r0, r6
 8003322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	68a5      	ldr	r5, [r4, #8]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	9b00      	ldr	r3, [sp, #0]
 800332c:	3b01      	subs	r3, #1
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	d501      	bpl.n	8003336 <_fwalk_reent+0x26>
 8003332:	6824      	ldr	r4, [r4, #0]
 8003334:	e7f2      	b.n	800331c <_fwalk_reent+0xc>
 8003336:	89ab      	ldrh	r3, [r5, #12]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d908      	bls.n	800334e <_fwalk_reent+0x3e>
 800333c:	220e      	movs	r2, #14
 800333e:	5eab      	ldrsh	r3, [r5, r2]
 8003340:	3301      	adds	r3, #1
 8003342:	d004      	beq.n	800334e <_fwalk_reent+0x3e>
 8003344:	0029      	movs	r1, r5
 8003346:	0038      	movs	r0, r7
 8003348:	9b01      	ldr	r3, [sp, #4]
 800334a:	4798      	blx	r3
 800334c:	4306      	orrs	r6, r0
 800334e:	3568      	adds	r5, #104	; 0x68
 8003350:	e7eb      	b.n	800332a <_fwalk_reent+0x1a>
	...

08003354 <__swhatbuf_r>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	000e      	movs	r6, r1
 8003358:	001d      	movs	r5, r3
 800335a:	230e      	movs	r3, #14
 800335c:	5ec9      	ldrsh	r1, [r1, r3]
 800335e:	b090      	sub	sp, #64	; 0x40
 8003360:	0014      	movs	r4, r2
 8003362:	2900      	cmp	r1, #0
 8003364:	da07      	bge.n	8003376 <__swhatbuf_r+0x22>
 8003366:	2300      	movs	r3, #0
 8003368:	602b      	str	r3, [r5, #0]
 800336a:	89b3      	ldrh	r3, [r6, #12]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	d411      	bmi.n	8003394 <__swhatbuf_r+0x40>
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	e00f      	b.n	8003396 <__swhatbuf_r+0x42>
 8003376:	aa01      	add	r2, sp, #4
 8003378:	f000 fc50 	bl	8003c1c <_fstat_r>
 800337c:	2800      	cmp	r0, #0
 800337e:	dbf2      	blt.n	8003366 <__swhatbuf_r+0x12>
 8003380:	22f0      	movs	r2, #240	; 0xf0
 8003382:	9b02      	ldr	r3, [sp, #8]
 8003384:	0212      	lsls	r2, r2, #8
 8003386:	4013      	ands	r3, r2
 8003388:	4a05      	ldr	r2, [pc, #20]	; (80033a0 <__swhatbuf_r+0x4c>)
 800338a:	189b      	adds	r3, r3, r2
 800338c:	425a      	negs	r2, r3
 800338e:	4153      	adcs	r3, r2
 8003390:	602b      	str	r3, [r5, #0]
 8003392:	e7ed      	b.n	8003370 <__swhatbuf_r+0x1c>
 8003394:	2340      	movs	r3, #64	; 0x40
 8003396:	2000      	movs	r0, #0
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	b010      	add	sp, #64	; 0x40
 800339c:	bd70      	pop	{r4, r5, r6, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	ffffe000 	.word	0xffffe000

080033a4 <__smakebuf_r>:
 80033a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033a6:	2602      	movs	r6, #2
 80033a8:	898b      	ldrh	r3, [r1, #12]
 80033aa:	0005      	movs	r5, r0
 80033ac:	000c      	movs	r4, r1
 80033ae:	4233      	tst	r3, r6
 80033b0:	d006      	beq.n	80033c0 <__smakebuf_r+0x1c>
 80033b2:	0023      	movs	r3, r4
 80033b4:	3347      	adds	r3, #71	; 0x47
 80033b6:	6023      	str	r3, [r4, #0]
 80033b8:	6123      	str	r3, [r4, #16]
 80033ba:	2301      	movs	r3, #1
 80033bc:	6163      	str	r3, [r4, #20]
 80033be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80033c0:	ab01      	add	r3, sp, #4
 80033c2:	466a      	mov	r2, sp
 80033c4:	f7ff ffc6 	bl	8003354 <__swhatbuf_r>
 80033c8:	9900      	ldr	r1, [sp, #0]
 80033ca:	0007      	movs	r7, r0
 80033cc:	0028      	movs	r0, r5
 80033ce:	f000 f877 	bl	80034c0 <_malloc_r>
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d108      	bne.n	80033e8 <__smakebuf_r+0x44>
 80033d6:	220c      	movs	r2, #12
 80033d8:	5ea3      	ldrsh	r3, [r4, r2]
 80033da:	059a      	lsls	r2, r3, #22
 80033dc:	d4ef      	bmi.n	80033be <__smakebuf_r+0x1a>
 80033de:	2203      	movs	r2, #3
 80033e0:	4393      	bics	r3, r2
 80033e2:	431e      	orrs	r6, r3
 80033e4:	81a6      	strh	r6, [r4, #12]
 80033e6:	e7e4      	b.n	80033b2 <__smakebuf_r+0xe>
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <__smakebuf_r+0x84>)
 80033ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	89a2      	ldrh	r2, [r4, #12]
 80033f0:	6020      	str	r0, [r4, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	81a3      	strh	r3, [r4, #12]
 80033f6:	9b00      	ldr	r3, [sp, #0]
 80033f8:	6120      	str	r0, [r4, #16]
 80033fa:	6163      	str	r3, [r4, #20]
 80033fc:	9b01      	ldr	r3, [sp, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <__smakebuf_r+0x7a>
 8003402:	230e      	movs	r3, #14
 8003404:	5ee1      	ldrsh	r1, [r4, r3]
 8003406:	0028      	movs	r0, r5
 8003408:	f000 fc1a 	bl	8003c40 <_isatty_r>
 800340c:	2800      	cmp	r0, #0
 800340e:	d006      	beq.n	800341e <__smakebuf_r+0x7a>
 8003410:	2203      	movs	r2, #3
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	4393      	bics	r3, r2
 8003416:	001a      	movs	r2, r3
 8003418:	2301      	movs	r3, #1
 800341a:	4313      	orrs	r3, r2
 800341c:	81a3      	strh	r3, [r4, #12]
 800341e:	89a0      	ldrh	r0, [r4, #12]
 8003420:	4338      	orrs	r0, r7
 8003422:	81a0      	strh	r0, [r4, #12]
 8003424:	e7cb      	b.n	80033be <__smakebuf_r+0x1a>
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	080031a5 	.word	0x080031a5

0800342c <_free_r>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	0005      	movs	r5, r0
 8003430:	2900      	cmp	r1, #0
 8003432:	d010      	beq.n	8003456 <_free_r+0x2a>
 8003434:	1f0c      	subs	r4, r1, #4
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	da00      	bge.n	800343e <_free_r+0x12>
 800343c:	18e4      	adds	r4, r4, r3
 800343e:	0028      	movs	r0, r5
 8003440:	f000 fc2f 	bl	8003ca2 <__malloc_lock>
 8003444:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <_free_r+0x90>)
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <_free_r+0x2c>
 800344c:	6063      	str	r3, [r4, #4]
 800344e:	6014      	str	r4, [r2, #0]
 8003450:	0028      	movs	r0, r5
 8003452:	f000 fc27 	bl	8003ca4 <__malloc_unlock>
 8003456:	bd70      	pop	{r4, r5, r6, pc}
 8003458:	42a3      	cmp	r3, r4
 800345a:	d909      	bls.n	8003470 <_free_r+0x44>
 800345c:	6821      	ldr	r1, [r4, #0]
 800345e:	1860      	adds	r0, r4, r1
 8003460:	4283      	cmp	r3, r0
 8003462:	d1f3      	bne.n	800344c <_free_r+0x20>
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	1841      	adds	r1, r0, r1
 800346a:	6021      	str	r1, [r4, #0]
 800346c:	e7ee      	b.n	800344c <_free_r+0x20>
 800346e:	0013      	movs	r3, r2
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	2a00      	cmp	r2, #0
 8003474:	d001      	beq.n	800347a <_free_r+0x4e>
 8003476:	42a2      	cmp	r2, r4
 8003478:	d9f9      	bls.n	800346e <_free_r+0x42>
 800347a:	6819      	ldr	r1, [r3, #0]
 800347c:	1858      	adds	r0, r3, r1
 800347e:	42a0      	cmp	r0, r4
 8003480:	d10b      	bne.n	800349a <_free_r+0x6e>
 8003482:	6820      	ldr	r0, [r4, #0]
 8003484:	1809      	adds	r1, r1, r0
 8003486:	1858      	adds	r0, r3, r1
 8003488:	6019      	str	r1, [r3, #0]
 800348a:	4282      	cmp	r2, r0
 800348c:	d1e0      	bne.n	8003450 <_free_r+0x24>
 800348e:	6810      	ldr	r0, [r2, #0]
 8003490:	6852      	ldr	r2, [r2, #4]
 8003492:	1841      	adds	r1, r0, r1
 8003494:	6019      	str	r1, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	e7da      	b.n	8003450 <_free_r+0x24>
 800349a:	42a0      	cmp	r0, r4
 800349c:	d902      	bls.n	80034a4 <_free_r+0x78>
 800349e:	230c      	movs	r3, #12
 80034a0:	602b      	str	r3, [r5, #0]
 80034a2:	e7d5      	b.n	8003450 <_free_r+0x24>
 80034a4:	6821      	ldr	r1, [r4, #0]
 80034a6:	1860      	adds	r0, r4, r1
 80034a8:	4282      	cmp	r2, r0
 80034aa:	d103      	bne.n	80034b4 <_free_r+0x88>
 80034ac:	6810      	ldr	r0, [r2, #0]
 80034ae:	6852      	ldr	r2, [r2, #4]
 80034b0:	1841      	adds	r1, r0, r1
 80034b2:	6021      	str	r1, [r4, #0]
 80034b4:	6062      	str	r2, [r4, #4]
 80034b6:	605c      	str	r4, [r3, #4]
 80034b8:	e7ca      	b.n	8003450 <_free_r+0x24>
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	20000dd0 	.word	0x20000dd0

080034c0 <_malloc_r>:
 80034c0:	2303      	movs	r3, #3
 80034c2:	b570      	push	{r4, r5, r6, lr}
 80034c4:	1ccd      	adds	r5, r1, #3
 80034c6:	439d      	bics	r5, r3
 80034c8:	3508      	adds	r5, #8
 80034ca:	0006      	movs	r6, r0
 80034cc:	2d0c      	cmp	r5, #12
 80034ce:	d21e      	bcs.n	800350e <_malloc_r+0x4e>
 80034d0:	250c      	movs	r5, #12
 80034d2:	42a9      	cmp	r1, r5
 80034d4:	d81d      	bhi.n	8003512 <_malloc_r+0x52>
 80034d6:	0030      	movs	r0, r6
 80034d8:	f000 fbe3 	bl	8003ca2 <__malloc_lock>
 80034dc:	4a25      	ldr	r2, [pc, #148]	; (8003574 <_malloc_r+0xb4>)
 80034de:	6814      	ldr	r4, [r2, #0]
 80034e0:	0021      	movs	r1, r4
 80034e2:	2900      	cmp	r1, #0
 80034e4:	d119      	bne.n	800351a <_malloc_r+0x5a>
 80034e6:	4c24      	ldr	r4, [pc, #144]	; (8003578 <_malloc_r+0xb8>)
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <_malloc_r+0x36>
 80034ee:	0030      	movs	r0, r6
 80034f0:	f000 fb10 	bl	8003b14 <_sbrk_r>
 80034f4:	6020      	str	r0, [r4, #0]
 80034f6:	0029      	movs	r1, r5
 80034f8:	0030      	movs	r0, r6
 80034fa:	f000 fb0b 	bl	8003b14 <_sbrk_r>
 80034fe:	1c43      	adds	r3, r0, #1
 8003500:	d12c      	bne.n	800355c <_malloc_r+0x9c>
 8003502:	230c      	movs	r3, #12
 8003504:	0030      	movs	r0, r6
 8003506:	6033      	str	r3, [r6, #0]
 8003508:	f000 fbcc 	bl	8003ca4 <__malloc_unlock>
 800350c:	e003      	b.n	8003516 <_malloc_r+0x56>
 800350e:	2d00      	cmp	r5, #0
 8003510:	dadf      	bge.n	80034d2 <_malloc_r+0x12>
 8003512:	230c      	movs	r3, #12
 8003514:	6033      	str	r3, [r6, #0]
 8003516:	2000      	movs	r0, #0
 8003518:	bd70      	pop	{r4, r5, r6, pc}
 800351a:	680b      	ldr	r3, [r1, #0]
 800351c:	1b5b      	subs	r3, r3, r5
 800351e:	d41a      	bmi.n	8003556 <_malloc_r+0x96>
 8003520:	2b0b      	cmp	r3, #11
 8003522:	d903      	bls.n	800352c <_malloc_r+0x6c>
 8003524:	600b      	str	r3, [r1, #0]
 8003526:	18cc      	adds	r4, r1, r3
 8003528:	6025      	str	r5, [r4, #0]
 800352a:	e003      	b.n	8003534 <_malloc_r+0x74>
 800352c:	428c      	cmp	r4, r1
 800352e:	d10e      	bne.n	800354e <_malloc_r+0x8e>
 8003530:	6863      	ldr	r3, [r4, #4]
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	0030      	movs	r0, r6
 8003536:	f000 fbb5 	bl	8003ca4 <__malloc_unlock>
 800353a:	0020      	movs	r0, r4
 800353c:	2207      	movs	r2, #7
 800353e:	300b      	adds	r0, #11
 8003540:	1d23      	adds	r3, r4, #4
 8003542:	4390      	bics	r0, r2
 8003544:	1ac3      	subs	r3, r0, r3
 8003546:	d0e7      	beq.n	8003518 <_malloc_r+0x58>
 8003548:	425a      	negs	r2, r3
 800354a:	50e2      	str	r2, [r4, r3]
 800354c:	e7e4      	b.n	8003518 <_malloc_r+0x58>
 800354e:	684b      	ldr	r3, [r1, #4]
 8003550:	6063      	str	r3, [r4, #4]
 8003552:	000c      	movs	r4, r1
 8003554:	e7ee      	b.n	8003534 <_malloc_r+0x74>
 8003556:	000c      	movs	r4, r1
 8003558:	6849      	ldr	r1, [r1, #4]
 800355a:	e7c2      	b.n	80034e2 <_malloc_r+0x22>
 800355c:	2303      	movs	r3, #3
 800355e:	1cc4      	adds	r4, r0, #3
 8003560:	439c      	bics	r4, r3
 8003562:	42a0      	cmp	r0, r4
 8003564:	d0e0      	beq.n	8003528 <_malloc_r+0x68>
 8003566:	1a21      	subs	r1, r4, r0
 8003568:	0030      	movs	r0, r6
 800356a:	f000 fad3 	bl	8003b14 <_sbrk_r>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	d1da      	bne.n	8003528 <_malloc_r+0x68>
 8003572:	e7c6      	b.n	8003502 <_malloc_r+0x42>
 8003574:	20000dd0 	.word	0x20000dd0
 8003578:	20000dd4 	.word	0x20000dd4

0800357c <__sfputc_r>:
 800357c:	6893      	ldr	r3, [r2, #8]
 800357e:	b510      	push	{r4, lr}
 8003580:	3b01      	subs	r3, #1
 8003582:	6093      	str	r3, [r2, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	da05      	bge.n	8003594 <__sfputc_r+0x18>
 8003588:	6994      	ldr	r4, [r2, #24]
 800358a:	42a3      	cmp	r3, r4
 800358c:	db08      	blt.n	80035a0 <__sfputc_r+0x24>
 800358e:	b2cb      	uxtb	r3, r1
 8003590:	2b0a      	cmp	r3, #10
 8003592:	d005      	beq.n	80035a0 <__sfputc_r+0x24>
 8003594:	6813      	ldr	r3, [r2, #0]
 8003596:	1c58      	adds	r0, r3, #1
 8003598:	6010      	str	r0, [r2, #0]
 800359a:	7019      	strb	r1, [r3, #0]
 800359c:	b2c8      	uxtb	r0, r1
 800359e:	bd10      	pop	{r4, pc}
 80035a0:	f7ff fc7e 	bl	8002ea0 <__swbuf_r>
 80035a4:	e7fb      	b.n	800359e <__sfputc_r+0x22>

080035a6 <__sfputs_r>:
 80035a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a8:	0006      	movs	r6, r0
 80035aa:	000f      	movs	r7, r1
 80035ac:	0014      	movs	r4, r2
 80035ae:	18d5      	adds	r5, r2, r3
 80035b0:	42ac      	cmp	r4, r5
 80035b2:	d101      	bne.n	80035b8 <__sfputs_r+0x12>
 80035b4:	2000      	movs	r0, #0
 80035b6:	e007      	b.n	80035c8 <__sfputs_r+0x22>
 80035b8:	7821      	ldrb	r1, [r4, #0]
 80035ba:	003a      	movs	r2, r7
 80035bc:	0030      	movs	r0, r6
 80035be:	f7ff ffdd 	bl	800357c <__sfputc_r>
 80035c2:	3401      	adds	r4, #1
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d1f3      	bne.n	80035b0 <__sfputs_r+0xa>
 80035c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035cc <_vfiprintf_r>:
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	b09f      	sub	sp, #124	; 0x7c
 80035d0:	0006      	movs	r6, r0
 80035d2:	000f      	movs	r7, r1
 80035d4:	0014      	movs	r4, r2
 80035d6:	9305      	str	r3, [sp, #20]
 80035d8:	2800      	cmp	r0, #0
 80035da:	d004      	beq.n	80035e6 <_vfiprintf_r+0x1a>
 80035dc:	6983      	ldr	r3, [r0, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <_vfiprintf_r+0x1a>
 80035e2:	f7ff fe21 	bl	8003228 <__sinit>
 80035e6:	4b7f      	ldr	r3, [pc, #508]	; (80037e4 <_vfiprintf_r+0x218>)
 80035e8:	429f      	cmp	r7, r3
 80035ea:	d15c      	bne.n	80036a6 <_vfiprintf_r+0xda>
 80035ec:	6877      	ldr	r7, [r6, #4]
 80035ee:	89bb      	ldrh	r3, [r7, #12]
 80035f0:	071b      	lsls	r3, r3, #28
 80035f2:	d562      	bpl.n	80036ba <_vfiprintf_r+0xee>
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d05f      	beq.n	80036ba <_vfiprintf_r+0xee>
 80035fa:	2300      	movs	r3, #0
 80035fc:	ad06      	add	r5, sp, #24
 80035fe:	616b      	str	r3, [r5, #20]
 8003600:	3320      	adds	r3, #32
 8003602:	766b      	strb	r3, [r5, #25]
 8003604:	3310      	adds	r3, #16
 8003606:	76ab      	strb	r3, [r5, #26]
 8003608:	9402      	str	r4, [sp, #8]
 800360a:	9c02      	ldr	r4, [sp, #8]
 800360c:	7823      	ldrb	r3, [r4, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d15d      	bne.n	80036ce <_vfiprintf_r+0x102>
 8003612:	9b02      	ldr	r3, [sp, #8]
 8003614:	1ae3      	subs	r3, r4, r3
 8003616:	9304      	str	r3, [sp, #16]
 8003618:	d00d      	beq.n	8003636 <_vfiprintf_r+0x6a>
 800361a:	9b04      	ldr	r3, [sp, #16]
 800361c:	9a02      	ldr	r2, [sp, #8]
 800361e:	0039      	movs	r1, r7
 8003620:	0030      	movs	r0, r6
 8003622:	f7ff ffc0 	bl	80035a6 <__sfputs_r>
 8003626:	1c43      	adds	r3, r0, #1
 8003628:	d100      	bne.n	800362c <_vfiprintf_r+0x60>
 800362a:	e0cc      	b.n	80037c6 <_vfiprintf_r+0x1fa>
 800362c:	696a      	ldr	r2, [r5, #20]
 800362e:	9b04      	ldr	r3, [sp, #16]
 8003630:	4694      	mov	ip, r2
 8003632:	4463      	add	r3, ip
 8003634:	616b      	str	r3, [r5, #20]
 8003636:	7823      	ldrb	r3, [r4, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d100      	bne.n	800363e <_vfiprintf_r+0x72>
 800363c:	e0c3      	b.n	80037c6 <_vfiprintf_r+0x1fa>
 800363e:	2201      	movs	r2, #1
 8003640:	2300      	movs	r3, #0
 8003642:	4252      	negs	r2, r2
 8003644:	606a      	str	r2, [r5, #4]
 8003646:	a902      	add	r1, sp, #8
 8003648:	3254      	adds	r2, #84	; 0x54
 800364a:	1852      	adds	r2, r2, r1
 800364c:	3401      	adds	r4, #1
 800364e:	602b      	str	r3, [r5, #0]
 8003650:	60eb      	str	r3, [r5, #12]
 8003652:	60ab      	str	r3, [r5, #8]
 8003654:	7013      	strb	r3, [r2, #0]
 8003656:	65ab      	str	r3, [r5, #88]	; 0x58
 8003658:	7821      	ldrb	r1, [r4, #0]
 800365a:	2205      	movs	r2, #5
 800365c:	4862      	ldr	r0, [pc, #392]	; (80037e8 <_vfiprintf_r+0x21c>)
 800365e:	f000 fb15 	bl	8003c8c <memchr>
 8003662:	1c63      	adds	r3, r4, #1
 8003664:	469c      	mov	ip, r3
 8003666:	2800      	cmp	r0, #0
 8003668:	d135      	bne.n	80036d6 <_vfiprintf_r+0x10a>
 800366a:	6829      	ldr	r1, [r5, #0]
 800366c:	06cb      	lsls	r3, r1, #27
 800366e:	d504      	bpl.n	800367a <_vfiprintf_r+0xae>
 8003670:	2353      	movs	r3, #83	; 0x53
 8003672:	aa02      	add	r2, sp, #8
 8003674:	3020      	adds	r0, #32
 8003676:	189b      	adds	r3, r3, r2
 8003678:	7018      	strb	r0, [r3, #0]
 800367a:	070b      	lsls	r3, r1, #28
 800367c:	d504      	bpl.n	8003688 <_vfiprintf_r+0xbc>
 800367e:	2353      	movs	r3, #83	; 0x53
 8003680:	202b      	movs	r0, #43	; 0x2b
 8003682:	aa02      	add	r2, sp, #8
 8003684:	189b      	adds	r3, r3, r2
 8003686:	7018      	strb	r0, [r3, #0]
 8003688:	7823      	ldrb	r3, [r4, #0]
 800368a:	2b2a      	cmp	r3, #42	; 0x2a
 800368c:	d02c      	beq.n	80036e8 <_vfiprintf_r+0x11c>
 800368e:	2000      	movs	r0, #0
 8003690:	210a      	movs	r1, #10
 8003692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003694:	7822      	ldrb	r2, [r4, #0]
 8003696:	3a30      	subs	r2, #48	; 0x30
 8003698:	2a09      	cmp	r2, #9
 800369a:	d800      	bhi.n	800369e <_vfiprintf_r+0xd2>
 800369c:	e06b      	b.n	8003776 <_vfiprintf_r+0x1aa>
 800369e:	2800      	cmp	r0, #0
 80036a0:	d02a      	beq.n	80036f8 <_vfiprintf_r+0x12c>
 80036a2:	9309      	str	r3, [sp, #36]	; 0x24
 80036a4:	e028      	b.n	80036f8 <_vfiprintf_r+0x12c>
 80036a6:	4b51      	ldr	r3, [pc, #324]	; (80037ec <_vfiprintf_r+0x220>)
 80036a8:	429f      	cmp	r7, r3
 80036aa:	d101      	bne.n	80036b0 <_vfiprintf_r+0xe4>
 80036ac:	68b7      	ldr	r7, [r6, #8]
 80036ae:	e79e      	b.n	80035ee <_vfiprintf_r+0x22>
 80036b0:	4b4f      	ldr	r3, [pc, #316]	; (80037f0 <_vfiprintf_r+0x224>)
 80036b2:	429f      	cmp	r7, r3
 80036b4:	d19b      	bne.n	80035ee <_vfiprintf_r+0x22>
 80036b6:	68f7      	ldr	r7, [r6, #12]
 80036b8:	e799      	b.n	80035ee <_vfiprintf_r+0x22>
 80036ba:	0039      	movs	r1, r7
 80036bc:	0030      	movs	r0, r6
 80036be:	f7ff fc45 	bl	8002f4c <__swsetup_r>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	d099      	beq.n	80035fa <_vfiprintf_r+0x2e>
 80036c6:	2001      	movs	r0, #1
 80036c8:	4240      	negs	r0, r0
 80036ca:	b01f      	add	sp, #124	; 0x7c
 80036cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ce:	2b25      	cmp	r3, #37	; 0x25
 80036d0:	d09f      	beq.n	8003612 <_vfiprintf_r+0x46>
 80036d2:	3401      	adds	r4, #1
 80036d4:	e79a      	b.n	800360c <_vfiprintf_r+0x40>
 80036d6:	4b44      	ldr	r3, [pc, #272]	; (80037e8 <_vfiprintf_r+0x21c>)
 80036d8:	6829      	ldr	r1, [r5, #0]
 80036da:	1ac0      	subs	r0, r0, r3
 80036dc:	2301      	movs	r3, #1
 80036de:	4083      	lsls	r3, r0
 80036e0:	430b      	orrs	r3, r1
 80036e2:	602b      	str	r3, [r5, #0]
 80036e4:	4664      	mov	r4, ip
 80036e6:	e7b7      	b.n	8003658 <_vfiprintf_r+0x8c>
 80036e8:	9b05      	ldr	r3, [sp, #20]
 80036ea:	1d18      	adds	r0, r3, #4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	9005      	str	r0, [sp, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	db3a      	blt.n	800376a <_vfiprintf_r+0x19e>
 80036f4:	9309      	str	r3, [sp, #36]	; 0x24
 80036f6:	4664      	mov	r4, ip
 80036f8:	7823      	ldrb	r3, [r4, #0]
 80036fa:	2b2e      	cmp	r3, #46	; 0x2e
 80036fc:	d10b      	bne.n	8003716 <_vfiprintf_r+0x14a>
 80036fe:	7863      	ldrb	r3, [r4, #1]
 8003700:	1c62      	adds	r2, r4, #1
 8003702:	2b2a      	cmp	r3, #42	; 0x2a
 8003704:	d13f      	bne.n	8003786 <_vfiprintf_r+0x1ba>
 8003706:	9b05      	ldr	r3, [sp, #20]
 8003708:	3402      	adds	r4, #2
 800370a:	1d1a      	adds	r2, r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	9205      	str	r2, [sp, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	db35      	blt.n	8003780 <_vfiprintf_r+0x1b4>
 8003714:	9307      	str	r3, [sp, #28]
 8003716:	7821      	ldrb	r1, [r4, #0]
 8003718:	2203      	movs	r2, #3
 800371a:	4836      	ldr	r0, [pc, #216]	; (80037f4 <_vfiprintf_r+0x228>)
 800371c:	f000 fab6 	bl	8003c8c <memchr>
 8003720:	2800      	cmp	r0, #0
 8003722:	d007      	beq.n	8003734 <_vfiprintf_r+0x168>
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <_vfiprintf_r+0x228>)
 8003726:	682a      	ldr	r2, [r5, #0]
 8003728:	1ac0      	subs	r0, r0, r3
 800372a:	2340      	movs	r3, #64	; 0x40
 800372c:	4083      	lsls	r3, r0
 800372e:	4313      	orrs	r3, r2
 8003730:	602b      	str	r3, [r5, #0]
 8003732:	3401      	adds	r4, #1
 8003734:	7821      	ldrb	r1, [r4, #0]
 8003736:	1c63      	adds	r3, r4, #1
 8003738:	2206      	movs	r2, #6
 800373a:	482f      	ldr	r0, [pc, #188]	; (80037f8 <_vfiprintf_r+0x22c>)
 800373c:	9302      	str	r3, [sp, #8]
 800373e:	7629      	strb	r1, [r5, #24]
 8003740:	f000 faa4 	bl	8003c8c <memchr>
 8003744:	2800      	cmp	r0, #0
 8003746:	d044      	beq.n	80037d2 <_vfiprintf_r+0x206>
 8003748:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <_vfiprintf_r+0x230>)
 800374a:	2b00      	cmp	r3, #0
 800374c:	d12f      	bne.n	80037ae <_vfiprintf_r+0x1e2>
 800374e:	6829      	ldr	r1, [r5, #0]
 8003750:	9b05      	ldr	r3, [sp, #20]
 8003752:	2207      	movs	r2, #7
 8003754:	05c9      	lsls	r1, r1, #23
 8003756:	d528      	bpl.n	80037aa <_vfiprintf_r+0x1de>
 8003758:	189b      	adds	r3, r3, r2
 800375a:	4393      	bics	r3, r2
 800375c:	3308      	adds	r3, #8
 800375e:	9305      	str	r3, [sp, #20]
 8003760:	696b      	ldr	r3, [r5, #20]
 8003762:	9a03      	ldr	r2, [sp, #12]
 8003764:	189b      	adds	r3, r3, r2
 8003766:	616b      	str	r3, [r5, #20]
 8003768:	e74f      	b.n	800360a <_vfiprintf_r+0x3e>
 800376a:	425b      	negs	r3, r3
 800376c:	60eb      	str	r3, [r5, #12]
 800376e:	2302      	movs	r3, #2
 8003770:	430b      	orrs	r3, r1
 8003772:	602b      	str	r3, [r5, #0]
 8003774:	e7bf      	b.n	80036f6 <_vfiprintf_r+0x12a>
 8003776:	434b      	muls	r3, r1
 8003778:	3401      	adds	r4, #1
 800377a:	189b      	adds	r3, r3, r2
 800377c:	2001      	movs	r0, #1
 800377e:	e789      	b.n	8003694 <_vfiprintf_r+0xc8>
 8003780:	2301      	movs	r3, #1
 8003782:	425b      	negs	r3, r3
 8003784:	e7c6      	b.n	8003714 <_vfiprintf_r+0x148>
 8003786:	2300      	movs	r3, #0
 8003788:	0014      	movs	r4, r2
 800378a:	200a      	movs	r0, #10
 800378c:	001a      	movs	r2, r3
 800378e:	606b      	str	r3, [r5, #4]
 8003790:	7821      	ldrb	r1, [r4, #0]
 8003792:	3930      	subs	r1, #48	; 0x30
 8003794:	2909      	cmp	r1, #9
 8003796:	d903      	bls.n	80037a0 <_vfiprintf_r+0x1d4>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0bc      	beq.n	8003716 <_vfiprintf_r+0x14a>
 800379c:	9207      	str	r2, [sp, #28]
 800379e:	e7ba      	b.n	8003716 <_vfiprintf_r+0x14a>
 80037a0:	4342      	muls	r2, r0
 80037a2:	3401      	adds	r4, #1
 80037a4:	1852      	adds	r2, r2, r1
 80037a6:	2301      	movs	r3, #1
 80037a8:	e7f2      	b.n	8003790 <_vfiprintf_r+0x1c4>
 80037aa:	3307      	adds	r3, #7
 80037ac:	e7d5      	b.n	800375a <_vfiprintf_r+0x18e>
 80037ae:	ab05      	add	r3, sp, #20
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	003a      	movs	r2, r7
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <_vfiprintf_r+0x234>)
 80037b6:	0029      	movs	r1, r5
 80037b8:	0030      	movs	r0, r6
 80037ba:	e000      	b.n	80037be <_vfiprintf_r+0x1f2>
 80037bc:	bf00      	nop
 80037be:	9003      	str	r0, [sp, #12]
 80037c0:	9b03      	ldr	r3, [sp, #12]
 80037c2:	3301      	adds	r3, #1
 80037c4:	d1cc      	bne.n	8003760 <_vfiprintf_r+0x194>
 80037c6:	89bb      	ldrh	r3, [r7, #12]
 80037c8:	065b      	lsls	r3, r3, #25
 80037ca:	d500      	bpl.n	80037ce <_vfiprintf_r+0x202>
 80037cc:	e77b      	b.n	80036c6 <_vfiprintf_r+0xfa>
 80037ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80037d0:	e77b      	b.n	80036ca <_vfiprintf_r+0xfe>
 80037d2:	ab05      	add	r3, sp, #20
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	003a      	movs	r2, r7
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <_vfiprintf_r+0x234>)
 80037da:	0029      	movs	r1, r5
 80037dc:	0030      	movs	r0, r6
 80037de:	f000 f87f 	bl	80038e0 <_printf_i>
 80037e2:	e7ec      	b.n	80037be <_vfiprintf_r+0x1f2>
 80037e4:	08003d70 	.word	0x08003d70
 80037e8:	08003db4 	.word	0x08003db4
 80037ec:	08003d90 	.word	0x08003d90
 80037f0:	08003d50 	.word	0x08003d50
 80037f4:	08003dba 	.word	0x08003dba
 80037f8:	08003dbe 	.word	0x08003dbe
 80037fc:	00000000 	.word	0x00000000
 8003800:	080035a7 	.word	0x080035a7

08003804 <_printf_common>:
 8003804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003806:	0015      	movs	r5, r2
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	688a      	ldr	r2, [r1, #8]
 800380c:	690b      	ldr	r3, [r1, #16]
 800380e:	9000      	str	r0, [sp, #0]
 8003810:	000c      	movs	r4, r1
 8003812:	4293      	cmp	r3, r2
 8003814:	da00      	bge.n	8003818 <_printf_common+0x14>
 8003816:	0013      	movs	r3, r2
 8003818:	0022      	movs	r2, r4
 800381a:	602b      	str	r3, [r5, #0]
 800381c:	3243      	adds	r2, #67	; 0x43
 800381e:	7812      	ldrb	r2, [r2, #0]
 8003820:	2a00      	cmp	r2, #0
 8003822:	d001      	beq.n	8003828 <_printf_common+0x24>
 8003824:	3301      	adds	r3, #1
 8003826:	602b      	str	r3, [r5, #0]
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	069b      	lsls	r3, r3, #26
 800382c:	d502      	bpl.n	8003834 <_printf_common+0x30>
 800382e:	682b      	ldr	r3, [r5, #0]
 8003830:	3302      	adds	r3, #2
 8003832:	602b      	str	r3, [r5, #0]
 8003834:	2706      	movs	r7, #6
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	401f      	ands	r7, r3
 800383a:	d027      	beq.n	800388c <_printf_common+0x88>
 800383c:	0023      	movs	r3, r4
 800383e:	3343      	adds	r3, #67	; 0x43
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	4193      	sbcs	r3, r2
 8003846:	6822      	ldr	r2, [r4, #0]
 8003848:	0692      	lsls	r2, r2, #26
 800384a:	d430      	bmi.n	80038ae <_printf_common+0xaa>
 800384c:	0022      	movs	r2, r4
 800384e:	9901      	ldr	r1, [sp, #4]
 8003850:	3243      	adds	r2, #67	; 0x43
 8003852:	9800      	ldr	r0, [sp, #0]
 8003854:	9e08      	ldr	r6, [sp, #32]
 8003856:	47b0      	blx	r6
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d025      	beq.n	80038a8 <_printf_common+0xa4>
 800385c:	2306      	movs	r3, #6
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	682a      	ldr	r2, [r5, #0]
 8003862:	68e1      	ldr	r1, [r4, #12]
 8003864:	4003      	ands	r3, r0
 8003866:	2500      	movs	r5, #0
 8003868:	2b04      	cmp	r3, #4
 800386a:	d103      	bne.n	8003874 <_printf_common+0x70>
 800386c:	1a8d      	subs	r5, r1, r2
 800386e:	43eb      	mvns	r3, r5
 8003870:	17db      	asrs	r3, r3, #31
 8003872:	401d      	ands	r5, r3
 8003874:	68a3      	ldr	r3, [r4, #8]
 8003876:	6922      	ldr	r2, [r4, #16]
 8003878:	4293      	cmp	r3, r2
 800387a:	dd01      	ble.n	8003880 <_printf_common+0x7c>
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	18ed      	adds	r5, r5, r3
 8003880:	2700      	movs	r7, #0
 8003882:	42bd      	cmp	r5, r7
 8003884:	d120      	bne.n	80038c8 <_printf_common+0xc4>
 8003886:	2000      	movs	r0, #0
 8003888:	e010      	b.n	80038ac <_printf_common+0xa8>
 800388a:	3701      	adds	r7, #1
 800388c:	68e3      	ldr	r3, [r4, #12]
 800388e:	682a      	ldr	r2, [r5, #0]
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	429f      	cmp	r7, r3
 8003894:	dad2      	bge.n	800383c <_printf_common+0x38>
 8003896:	0022      	movs	r2, r4
 8003898:	2301      	movs	r3, #1
 800389a:	3219      	adds	r2, #25
 800389c:	9901      	ldr	r1, [sp, #4]
 800389e:	9800      	ldr	r0, [sp, #0]
 80038a0:	9e08      	ldr	r6, [sp, #32]
 80038a2:	47b0      	blx	r6
 80038a4:	1c43      	adds	r3, r0, #1
 80038a6:	d1f0      	bne.n	800388a <_printf_common+0x86>
 80038a8:	2001      	movs	r0, #1
 80038aa:	4240      	negs	r0, r0
 80038ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80038ae:	2030      	movs	r0, #48	; 0x30
 80038b0:	18e1      	adds	r1, r4, r3
 80038b2:	3143      	adds	r1, #67	; 0x43
 80038b4:	7008      	strb	r0, [r1, #0]
 80038b6:	0021      	movs	r1, r4
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	3145      	adds	r1, #69	; 0x45
 80038bc:	7809      	ldrb	r1, [r1, #0]
 80038be:	18a2      	adds	r2, r4, r2
 80038c0:	3243      	adds	r2, #67	; 0x43
 80038c2:	3302      	adds	r3, #2
 80038c4:	7011      	strb	r1, [r2, #0]
 80038c6:	e7c1      	b.n	800384c <_printf_common+0x48>
 80038c8:	0022      	movs	r2, r4
 80038ca:	2301      	movs	r3, #1
 80038cc:	321a      	adds	r2, #26
 80038ce:	9901      	ldr	r1, [sp, #4]
 80038d0:	9800      	ldr	r0, [sp, #0]
 80038d2:	9e08      	ldr	r6, [sp, #32]
 80038d4:	47b0      	blx	r6
 80038d6:	1c43      	adds	r3, r0, #1
 80038d8:	d0e6      	beq.n	80038a8 <_printf_common+0xa4>
 80038da:	3701      	adds	r7, #1
 80038dc:	e7d1      	b.n	8003882 <_printf_common+0x7e>
	...

080038e0 <_printf_i>:
 80038e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e2:	b08b      	sub	sp, #44	; 0x2c
 80038e4:	9206      	str	r2, [sp, #24]
 80038e6:	000a      	movs	r2, r1
 80038e8:	3243      	adds	r2, #67	; 0x43
 80038ea:	9307      	str	r3, [sp, #28]
 80038ec:	9005      	str	r0, [sp, #20]
 80038ee:	9204      	str	r2, [sp, #16]
 80038f0:	7e0a      	ldrb	r2, [r1, #24]
 80038f2:	000c      	movs	r4, r1
 80038f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80038f6:	2a6e      	cmp	r2, #110	; 0x6e
 80038f8:	d100      	bne.n	80038fc <_printf_i+0x1c>
 80038fa:	e08f      	b.n	8003a1c <_printf_i+0x13c>
 80038fc:	d817      	bhi.n	800392e <_printf_i+0x4e>
 80038fe:	2a63      	cmp	r2, #99	; 0x63
 8003900:	d02c      	beq.n	800395c <_printf_i+0x7c>
 8003902:	d808      	bhi.n	8003916 <_printf_i+0x36>
 8003904:	2a00      	cmp	r2, #0
 8003906:	d100      	bne.n	800390a <_printf_i+0x2a>
 8003908:	e099      	b.n	8003a3e <_printf_i+0x15e>
 800390a:	2a58      	cmp	r2, #88	; 0x58
 800390c:	d054      	beq.n	80039b8 <_printf_i+0xd8>
 800390e:	0026      	movs	r6, r4
 8003910:	3642      	adds	r6, #66	; 0x42
 8003912:	7032      	strb	r2, [r6, #0]
 8003914:	e029      	b.n	800396a <_printf_i+0x8a>
 8003916:	2a64      	cmp	r2, #100	; 0x64
 8003918:	d001      	beq.n	800391e <_printf_i+0x3e>
 800391a:	2a69      	cmp	r2, #105	; 0x69
 800391c:	d1f7      	bne.n	800390e <_printf_i+0x2e>
 800391e:	6821      	ldr	r1, [r4, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	0608      	lsls	r0, r1, #24
 8003924:	d523      	bpl.n	800396e <_printf_i+0x8e>
 8003926:	1d11      	adds	r1, r2, #4
 8003928:	6019      	str	r1, [r3, #0]
 800392a:	6815      	ldr	r5, [r2, #0]
 800392c:	e025      	b.n	800397a <_printf_i+0x9a>
 800392e:	2a73      	cmp	r2, #115	; 0x73
 8003930:	d100      	bne.n	8003934 <_printf_i+0x54>
 8003932:	e088      	b.n	8003a46 <_printf_i+0x166>
 8003934:	d808      	bhi.n	8003948 <_printf_i+0x68>
 8003936:	2a6f      	cmp	r2, #111	; 0x6f
 8003938:	d029      	beq.n	800398e <_printf_i+0xae>
 800393a:	2a70      	cmp	r2, #112	; 0x70
 800393c:	d1e7      	bne.n	800390e <_printf_i+0x2e>
 800393e:	2220      	movs	r2, #32
 8003940:	6809      	ldr	r1, [r1, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	6022      	str	r2, [r4, #0]
 8003946:	e003      	b.n	8003950 <_printf_i+0x70>
 8003948:	2a75      	cmp	r2, #117	; 0x75
 800394a:	d020      	beq.n	800398e <_printf_i+0xae>
 800394c:	2a78      	cmp	r2, #120	; 0x78
 800394e:	d1de      	bne.n	800390e <_printf_i+0x2e>
 8003950:	0022      	movs	r2, r4
 8003952:	2178      	movs	r1, #120	; 0x78
 8003954:	3245      	adds	r2, #69	; 0x45
 8003956:	7011      	strb	r1, [r2, #0]
 8003958:	4a6c      	ldr	r2, [pc, #432]	; (8003b0c <_printf_i+0x22c>)
 800395a:	e030      	b.n	80039be <_printf_i+0xde>
 800395c:	000e      	movs	r6, r1
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	3642      	adds	r6, #66	; 0x42
 8003962:	1d11      	adds	r1, r2, #4
 8003964:	6019      	str	r1, [r3, #0]
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	7033      	strb	r3, [r6, #0]
 800396a:	2301      	movs	r3, #1
 800396c:	e079      	b.n	8003a62 <_printf_i+0x182>
 800396e:	0649      	lsls	r1, r1, #25
 8003970:	d5d9      	bpl.n	8003926 <_printf_i+0x46>
 8003972:	1d11      	adds	r1, r2, #4
 8003974:	6019      	str	r1, [r3, #0]
 8003976:	2300      	movs	r3, #0
 8003978:	5ed5      	ldrsh	r5, [r2, r3]
 800397a:	2d00      	cmp	r5, #0
 800397c:	da03      	bge.n	8003986 <_printf_i+0xa6>
 800397e:	232d      	movs	r3, #45	; 0x2d
 8003980:	9a04      	ldr	r2, [sp, #16]
 8003982:	426d      	negs	r5, r5
 8003984:	7013      	strb	r3, [r2, #0]
 8003986:	4b62      	ldr	r3, [pc, #392]	; (8003b10 <_printf_i+0x230>)
 8003988:	270a      	movs	r7, #10
 800398a:	9303      	str	r3, [sp, #12]
 800398c:	e02f      	b.n	80039ee <_printf_i+0x10e>
 800398e:	6820      	ldr	r0, [r4, #0]
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	0605      	lsls	r5, r0, #24
 8003994:	d503      	bpl.n	800399e <_printf_i+0xbe>
 8003996:	1d08      	adds	r0, r1, #4
 8003998:	6018      	str	r0, [r3, #0]
 800399a:	680d      	ldr	r5, [r1, #0]
 800399c:	e005      	b.n	80039aa <_printf_i+0xca>
 800399e:	0640      	lsls	r0, r0, #25
 80039a0:	d5f9      	bpl.n	8003996 <_printf_i+0xb6>
 80039a2:	680d      	ldr	r5, [r1, #0]
 80039a4:	1d08      	adds	r0, r1, #4
 80039a6:	6018      	str	r0, [r3, #0]
 80039a8:	b2ad      	uxth	r5, r5
 80039aa:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <_printf_i+0x230>)
 80039ac:	2708      	movs	r7, #8
 80039ae:	9303      	str	r3, [sp, #12]
 80039b0:	2a6f      	cmp	r2, #111	; 0x6f
 80039b2:	d018      	beq.n	80039e6 <_printf_i+0x106>
 80039b4:	270a      	movs	r7, #10
 80039b6:	e016      	b.n	80039e6 <_printf_i+0x106>
 80039b8:	3145      	adds	r1, #69	; 0x45
 80039ba:	700a      	strb	r2, [r1, #0]
 80039bc:	4a54      	ldr	r2, [pc, #336]	; (8003b10 <_printf_i+0x230>)
 80039be:	9203      	str	r2, [sp, #12]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	6821      	ldr	r1, [r4, #0]
 80039c4:	1d10      	adds	r0, r2, #4
 80039c6:	6018      	str	r0, [r3, #0]
 80039c8:	6815      	ldr	r5, [r2, #0]
 80039ca:	0608      	lsls	r0, r1, #24
 80039cc:	d522      	bpl.n	8003a14 <_printf_i+0x134>
 80039ce:	07cb      	lsls	r3, r1, #31
 80039d0:	d502      	bpl.n	80039d8 <_printf_i+0xf8>
 80039d2:	2320      	movs	r3, #32
 80039d4:	4319      	orrs	r1, r3
 80039d6:	6021      	str	r1, [r4, #0]
 80039d8:	2710      	movs	r7, #16
 80039da:	2d00      	cmp	r5, #0
 80039dc:	d103      	bne.n	80039e6 <_printf_i+0x106>
 80039de:	2320      	movs	r3, #32
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	439a      	bics	r2, r3
 80039e4:	6022      	str	r2, [r4, #0]
 80039e6:	0023      	movs	r3, r4
 80039e8:	2200      	movs	r2, #0
 80039ea:	3343      	adds	r3, #67	; 0x43
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	6863      	ldr	r3, [r4, #4]
 80039f0:	60a3      	str	r3, [r4, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	db5c      	blt.n	8003ab0 <_printf_i+0x1d0>
 80039f6:	2204      	movs	r2, #4
 80039f8:	6821      	ldr	r1, [r4, #0]
 80039fa:	4391      	bics	r1, r2
 80039fc:	6021      	str	r1, [r4, #0]
 80039fe:	2d00      	cmp	r5, #0
 8003a00:	d158      	bne.n	8003ab4 <_printf_i+0x1d4>
 8003a02:	9e04      	ldr	r6, [sp, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d064      	beq.n	8003ad2 <_printf_i+0x1f2>
 8003a08:	0026      	movs	r6, r4
 8003a0a:	9b03      	ldr	r3, [sp, #12]
 8003a0c:	3642      	adds	r6, #66	; 0x42
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	7033      	strb	r3, [r6, #0]
 8003a12:	e05e      	b.n	8003ad2 <_printf_i+0x1f2>
 8003a14:	0648      	lsls	r0, r1, #25
 8003a16:	d5da      	bpl.n	80039ce <_printf_i+0xee>
 8003a18:	b2ad      	uxth	r5, r5
 8003a1a:	e7d8      	b.n	80039ce <_printf_i+0xee>
 8003a1c:	6809      	ldr	r1, [r1, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	0608      	lsls	r0, r1, #24
 8003a22:	d505      	bpl.n	8003a30 <_printf_i+0x150>
 8003a24:	1d11      	adds	r1, r2, #4
 8003a26:	6019      	str	r1, [r3, #0]
 8003a28:	6813      	ldr	r3, [r2, #0]
 8003a2a:	6962      	ldr	r2, [r4, #20]
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e006      	b.n	8003a3e <_printf_i+0x15e>
 8003a30:	0649      	lsls	r1, r1, #25
 8003a32:	d5f7      	bpl.n	8003a24 <_printf_i+0x144>
 8003a34:	1d11      	adds	r1, r2, #4
 8003a36:	6019      	str	r1, [r3, #0]
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	8aa2      	ldrh	r2, [r4, #20]
 8003a3c:	801a      	strh	r2, [r3, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9e04      	ldr	r6, [sp, #16]
 8003a42:	6123      	str	r3, [r4, #16]
 8003a44:	e054      	b.n	8003af0 <_printf_i+0x210>
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	1d11      	adds	r1, r2, #4
 8003a4a:	6019      	str	r1, [r3, #0]
 8003a4c:	6816      	ldr	r6, [r2, #0]
 8003a4e:	2100      	movs	r1, #0
 8003a50:	6862      	ldr	r2, [r4, #4]
 8003a52:	0030      	movs	r0, r6
 8003a54:	f000 f91a 	bl	8003c8c <memchr>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d001      	beq.n	8003a60 <_printf_i+0x180>
 8003a5c:	1b80      	subs	r0, r0, r6
 8003a5e:	6060      	str	r0, [r4, #4]
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	6123      	str	r3, [r4, #16]
 8003a64:	2300      	movs	r3, #0
 8003a66:	9a04      	ldr	r2, [sp, #16]
 8003a68:	7013      	strb	r3, [r2, #0]
 8003a6a:	e041      	b.n	8003af0 <_printf_i+0x210>
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	0032      	movs	r2, r6
 8003a70:	9906      	ldr	r1, [sp, #24]
 8003a72:	9805      	ldr	r0, [sp, #20]
 8003a74:	9d07      	ldr	r5, [sp, #28]
 8003a76:	47a8      	blx	r5
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d043      	beq.n	8003b04 <_printf_i+0x224>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	2500      	movs	r5, #0
 8003a80:	079b      	lsls	r3, r3, #30
 8003a82:	d40f      	bmi.n	8003aa4 <_printf_i+0x1c4>
 8003a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a86:	68e0      	ldr	r0, [r4, #12]
 8003a88:	4298      	cmp	r0, r3
 8003a8a:	da3d      	bge.n	8003b08 <_printf_i+0x228>
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	e03b      	b.n	8003b08 <_printf_i+0x228>
 8003a90:	0022      	movs	r2, r4
 8003a92:	2301      	movs	r3, #1
 8003a94:	3219      	adds	r2, #25
 8003a96:	9906      	ldr	r1, [sp, #24]
 8003a98:	9805      	ldr	r0, [sp, #20]
 8003a9a:	9e07      	ldr	r6, [sp, #28]
 8003a9c:	47b0      	blx	r6
 8003a9e:	1c43      	adds	r3, r0, #1
 8003aa0:	d030      	beq.n	8003b04 <_printf_i+0x224>
 8003aa2:	3501      	adds	r5, #1
 8003aa4:	68e3      	ldr	r3, [r4, #12]
 8003aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	429d      	cmp	r5, r3
 8003aac:	dbf0      	blt.n	8003a90 <_printf_i+0x1b0>
 8003aae:	e7e9      	b.n	8003a84 <_printf_i+0x1a4>
 8003ab0:	2d00      	cmp	r5, #0
 8003ab2:	d0a9      	beq.n	8003a08 <_printf_i+0x128>
 8003ab4:	9e04      	ldr	r6, [sp, #16]
 8003ab6:	0028      	movs	r0, r5
 8003ab8:	0039      	movs	r1, r7
 8003aba:	f7fc fbb5 	bl	8000228 <__aeabi_uidivmod>
 8003abe:	9b03      	ldr	r3, [sp, #12]
 8003ac0:	3e01      	subs	r6, #1
 8003ac2:	5c5b      	ldrb	r3, [r3, r1]
 8003ac4:	0028      	movs	r0, r5
 8003ac6:	7033      	strb	r3, [r6, #0]
 8003ac8:	0039      	movs	r1, r7
 8003aca:	f7fc fb27 	bl	800011c <__udivsi3>
 8003ace:	1e05      	subs	r5, r0, #0
 8003ad0:	d1f1      	bne.n	8003ab6 <_printf_i+0x1d6>
 8003ad2:	2f08      	cmp	r7, #8
 8003ad4:	d109      	bne.n	8003aea <_printf_i+0x20a>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	07db      	lsls	r3, r3, #31
 8003ada:	d506      	bpl.n	8003aea <_printf_i+0x20a>
 8003adc:	6863      	ldr	r3, [r4, #4]
 8003ade:	6922      	ldr	r2, [r4, #16]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	dc02      	bgt.n	8003aea <_printf_i+0x20a>
 8003ae4:	2330      	movs	r3, #48	; 0x30
 8003ae6:	3e01      	subs	r6, #1
 8003ae8:	7033      	strb	r3, [r6, #0]
 8003aea:	9b04      	ldr	r3, [sp, #16]
 8003aec:	1b9b      	subs	r3, r3, r6
 8003aee:	6123      	str	r3, [r4, #16]
 8003af0:	9b07      	ldr	r3, [sp, #28]
 8003af2:	aa09      	add	r2, sp, #36	; 0x24
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	0021      	movs	r1, r4
 8003af8:	9b06      	ldr	r3, [sp, #24]
 8003afa:	9805      	ldr	r0, [sp, #20]
 8003afc:	f7ff fe82 	bl	8003804 <_printf_common>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d1b3      	bne.n	8003a6c <_printf_i+0x18c>
 8003b04:	2001      	movs	r0, #1
 8003b06:	4240      	negs	r0, r0
 8003b08:	b00b      	add	sp, #44	; 0x2c
 8003b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b0c:	08003dd6 	.word	0x08003dd6
 8003b10:	08003dc5 	.word	0x08003dc5

08003b14 <_sbrk_r>:
 8003b14:	2300      	movs	r3, #0
 8003b16:	b570      	push	{r4, r5, r6, lr}
 8003b18:	4c06      	ldr	r4, [pc, #24]	; (8003b34 <_sbrk_r+0x20>)
 8003b1a:	0005      	movs	r5, r0
 8003b1c:	0008      	movs	r0, r1
 8003b1e:	6023      	str	r3, [r4, #0]
 8003b20:	f7ff f88a 	bl	8002c38 <_sbrk>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d103      	bne.n	8003b30 <_sbrk_r+0x1c>
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d000      	beq.n	8003b30 <_sbrk_r+0x1c>
 8003b2e:	602b      	str	r3, [r5, #0]
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	20000ee0 	.word	0x20000ee0

08003b38 <__sread>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	000c      	movs	r4, r1
 8003b3c:	250e      	movs	r5, #14
 8003b3e:	5f49      	ldrsh	r1, [r1, r5]
 8003b40:	f000 f8b2 	bl	8003ca8 <_read_r>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	db03      	blt.n	8003b50 <__sread+0x18>
 8003b48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b4a:	181b      	adds	r3, r3, r0
 8003b4c:	6563      	str	r3, [r4, #84]	; 0x54
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	89a3      	ldrh	r3, [r4, #12]
 8003b52:	4a02      	ldr	r2, [pc, #8]	; (8003b5c <__sread+0x24>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	81a3      	strh	r3, [r4, #12]
 8003b58:	e7f9      	b.n	8003b4e <__sread+0x16>
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	ffffefff 	.word	0xffffefff

08003b60 <__swrite>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	001f      	movs	r7, r3
 8003b64:	898b      	ldrh	r3, [r1, #12]
 8003b66:	0005      	movs	r5, r0
 8003b68:	000c      	movs	r4, r1
 8003b6a:	0016      	movs	r6, r2
 8003b6c:	05db      	lsls	r3, r3, #23
 8003b6e:	d505      	bpl.n	8003b7c <__swrite+0x1c>
 8003b70:	230e      	movs	r3, #14
 8003b72:	5ec9      	ldrsh	r1, [r1, r3]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2302      	movs	r3, #2
 8003b78:	f000 f874 	bl	8003c64 <_lseek_r>
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	4a05      	ldr	r2, [pc, #20]	; (8003b94 <__swrite+0x34>)
 8003b80:	0028      	movs	r0, r5
 8003b82:	4013      	ands	r3, r2
 8003b84:	81a3      	strh	r3, [r4, #12]
 8003b86:	0032      	movs	r2, r6
 8003b88:	230e      	movs	r3, #14
 8003b8a:	5ee1      	ldrsh	r1, [r4, r3]
 8003b8c:	003b      	movs	r3, r7
 8003b8e:	f000 f81f 	bl	8003bd0 <_write_r>
 8003b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b94:	ffffefff 	.word	0xffffefff

08003b98 <__sseek>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	000c      	movs	r4, r1
 8003b9c:	250e      	movs	r5, #14
 8003b9e:	5f49      	ldrsh	r1, [r1, r5]
 8003ba0:	f000 f860 	bl	8003c64 <_lseek_r>
 8003ba4:	89a3      	ldrh	r3, [r4, #12]
 8003ba6:	1c42      	adds	r2, r0, #1
 8003ba8:	d103      	bne.n	8003bb2 <__sseek+0x1a>
 8003baa:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <__sseek+0x28>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	81a3      	strh	r3, [r4, #12]
 8003bb0:	bd70      	pop	{r4, r5, r6, pc}
 8003bb2:	2280      	movs	r2, #128	; 0x80
 8003bb4:	0152      	lsls	r2, r2, #5
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	6560      	str	r0, [r4, #84]	; 0x54
 8003bbc:	e7f8      	b.n	8003bb0 <__sseek+0x18>
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	ffffefff 	.word	0xffffefff

08003bc4 <__sclose>:
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	230e      	movs	r3, #14
 8003bc8:	5ec9      	ldrsh	r1, [r1, r3]
 8003bca:	f000 f815 	bl	8003bf8 <_close_r>
 8003bce:	bd10      	pop	{r4, pc}

08003bd0 <_write_r>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	0005      	movs	r5, r0
 8003bd4:	0008      	movs	r0, r1
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	2200      	movs	r2, #0
 8003bda:	4c06      	ldr	r4, [pc, #24]	; (8003bf4 <_write_r+0x24>)
 8003bdc:	6022      	str	r2, [r4, #0]
 8003bde:	001a      	movs	r2, r3
 8003be0:	f7ff f828 	bl	8002c34 <_write>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d103      	bne.n	8003bf0 <_write_r+0x20>
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d000      	beq.n	8003bf0 <_write_r+0x20>
 8003bee:	602b      	str	r3, [r5, #0]
 8003bf0:	bd70      	pop	{r4, r5, r6, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	20000ee0 	.word	0x20000ee0

08003bf8 <_close_r>:
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	b570      	push	{r4, r5, r6, lr}
 8003bfc:	4c06      	ldr	r4, [pc, #24]	; (8003c18 <_close_r+0x20>)
 8003bfe:	0005      	movs	r5, r0
 8003c00:	0008      	movs	r0, r1
 8003c02:	6023      	str	r3, [r4, #0]
 8003c04:	f7ff f836 	bl	8002c74 <_close>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d103      	bne.n	8003c14 <_close_r+0x1c>
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d000      	beq.n	8003c14 <_close_r+0x1c>
 8003c12:	602b      	str	r3, [r5, #0]
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	20000ee0 	.word	0x20000ee0

08003c1c <_fstat_r>:
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	b570      	push	{r4, r5, r6, lr}
 8003c20:	4c06      	ldr	r4, [pc, #24]	; (8003c3c <_fstat_r+0x20>)
 8003c22:	0005      	movs	r5, r0
 8003c24:	0008      	movs	r0, r1
 8003c26:	0011      	movs	r1, r2
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	f7ff f826 	bl	8002c7a <_fstat>
 8003c2e:	1c43      	adds	r3, r0, #1
 8003c30:	d103      	bne.n	8003c3a <_fstat_r+0x1e>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d000      	beq.n	8003c3a <_fstat_r+0x1e>
 8003c38:	602b      	str	r3, [r5, #0]
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	20000ee0 	.word	0x20000ee0

08003c40 <_isatty_r>:
 8003c40:	2300      	movs	r3, #0
 8003c42:	b570      	push	{r4, r5, r6, lr}
 8003c44:	4c06      	ldr	r4, [pc, #24]	; (8003c60 <_isatty_r+0x20>)
 8003c46:	0005      	movs	r5, r0
 8003c48:	0008      	movs	r0, r1
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	f7ff f81a 	bl	8002c84 <_isatty>
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	d103      	bne.n	8003c5c <_isatty_r+0x1c>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d000      	beq.n	8003c5c <_isatty_r+0x1c>
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	20000ee0 	.word	0x20000ee0

08003c64 <_lseek_r>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	0005      	movs	r5, r0
 8003c68:	0008      	movs	r0, r1
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	4c06      	ldr	r4, [pc, #24]	; (8003c88 <_lseek_r+0x24>)
 8003c70:	6022      	str	r2, [r4, #0]
 8003c72:	001a      	movs	r2, r3
 8003c74:	f7ff f808 	bl	8002c88 <_lseek>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	d103      	bne.n	8003c84 <_lseek_r+0x20>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d000      	beq.n	8003c84 <_lseek_r+0x20>
 8003c82:	602b      	str	r3, [r5, #0]
 8003c84:	bd70      	pop	{r4, r5, r6, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	20000ee0 	.word	0x20000ee0

08003c8c <memchr>:
 8003c8c:	b2c9      	uxtb	r1, r1
 8003c8e:	1882      	adds	r2, r0, r2
 8003c90:	4290      	cmp	r0, r2
 8003c92:	d101      	bne.n	8003c98 <memchr+0xc>
 8003c94:	2000      	movs	r0, #0
 8003c96:	4770      	bx	lr
 8003c98:	7803      	ldrb	r3, [r0, #0]
 8003c9a:	428b      	cmp	r3, r1
 8003c9c:	d0fb      	beq.n	8003c96 <memchr+0xa>
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	e7f6      	b.n	8003c90 <memchr+0x4>

08003ca2 <__malloc_lock>:
 8003ca2:	4770      	bx	lr

08003ca4 <__malloc_unlock>:
 8003ca4:	4770      	bx	lr
	...

08003ca8 <_read_r>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	0005      	movs	r5, r0
 8003cac:	0008      	movs	r0, r1
 8003cae:	0011      	movs	r1, r2
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	4c06      	ldr	r4, [pc, #24]	; (8003ccc <_read_r+0x24>)
 8003cb4:	6022      	str	r2, [r4, #0]
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	f7fe ffe8 	bl	8002c8c <_read>
 8003cbc:	1c43      	adds	r3, r0, #1
 8003cbe:	d103      	bne.n	8003cc8 <_read_r+0x20>
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d000      	beq.n	8003cc8 <_read_r+0x20>
 8003cc6:	602b      	str	r3, [r5, #0]
 8003cc8:	bd70      	pop	{r4, r5, r6, pc}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	20000ee0 	.word	0x20000ee0

08003cd0 <_init>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr

08003cdc <_fini>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr
